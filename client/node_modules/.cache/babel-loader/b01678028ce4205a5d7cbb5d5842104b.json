{"ast":null,"code":"'use strict';\n\nvar _regeneratorRuntime = require(\"/Users/jervisbay/project-tres/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\");\n\nvar _objectSpread = require(\"/Users/jervisbay/project-tres/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/objectSpread\");\n\nvar _asyncToGenerator = require(\"/Users/jervisbay/project-tres/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/asyncToGenerator\");\n\nvar _classCallCheck = require(\"/Users/jervisbay/project-tres/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/Users/jervisbay/project-tres/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\n\nvar _possibleConstructorReturn = require(\"/Users/jervisbay/project-tres/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/possibleConstructorReturn\");\n\nvar _getPrototypeOf = require(\"/Users/jervisbay/project-tres/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/getPrototypeOf\");\n\nvar _inherits = require(\"/Users/jervisbay/project-tres/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/inherits\");\n\nfunction _createForOfIteratorHelper(o, allowArrayLike) { var it; if (typeof Symbol === \"undefined\" || o[Symbol.iterator] == null) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = o[Symbol.iterator](); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nvar sequelizeErrors = require('../../errors');\n\nvar QueryTypes = require('../../query-types');\n\nvar _require = require('../abstract/query-interface'),\n    QueryInterface = _require.QueryInterface;\n\nvar _require2 = require('../../utils'),\n    cloneDeep = _require2.cloneDeep;\n\nvar _ = require('lodash');\n/**\n * The interface that Sequelize uses to talk with SQLite database\n */\n\n\nvar SQLiteQueryInterface = /*#__PURE__*/function (_QueryInterface) {\n  _inherits(SQLiteQueryInterface, _QueryInterface);\n\n  function SQLiteQueryInterface() {\n    _classCallCheck(this, SQLiteQueryInterface);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(SQLiteQueryInterface).apply(this, arguments));\n  }\n\n  _createClass(SQLiteQueryInterface, [{\n    key: \"removeColumn\",\n\n    /**\n     * A wrapper that fixes SQLite's inability to remove columns from existing tables.\n     * It will create a backup of the table, drop the table afterwards and create a\n     * new table with the same name but without the obsolete column.\n     *\n     * @override\n     */\n    value: function () {\n      var _removeColumn = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(tableName, attributeName, options) {\n        var fields, sql, subQueries, _iterator, _step, subQuery;\n\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                options = options || {};\n                _context.next = 3;\n                return this.describeTable(tableName, options);\n\n              case 3:\n                fields = _context.sent;\n                delete fields[attributeName];\n                sql = this.queryGenerator.removeColumnQuery(tableName, fields);\n                subQueries = sql.split(';').filter(function (q) {\n                  return q !== '';\n                });\n                _iterator = _createForOfIteratorHelper(subQueries);\n                _context.prev = 8;\n\n                _iterator.s();\n\n              case 10:\n                if ((_step = _iterator.n()).done) {\n                  _context.next = 16;\n                  break;\n                }\n\n                subQuery = _step.value;\n                _context.next = 14;\n                return this.sequelize.query(\"\".concat(subQuery, \";\"), _objectSpread({\n                  raw: true\n                }, options));\n\n              case 14:\n                _context.next = 10;\n                break;\n\n              case 16:\n                _context.next = 21;\n                break;\n\n              case 18:\n                _context.prev = 18;\n                _context.t0 = _context[\"catch\"](8);\n\n                _iterator.e(_context.t0);\n\n              case 21:\n                _context.prev = 21;\n\n                _iterator.f();\n\n                return _context.finish(21);\n\n              case 24:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this, [[8, 18, 21, 24]]);\n      }));\n\n      function removeColumn(_x, _x2, _x3) {\n        return _removeColumn.apply(this, arguments);\n      }\n\n      return removeColumn;\n    }()\n    /**\n     * A wrapper that fixes SQLite's inability to change columns from existing tables.\n     * It will create a backup of the table, drop the table afterwards and create a\n     * new table with the same name but with a modified version of the respective column.\n     *\n     * @override\n     */\n\n  }, {\n    key: \"changeColumn\",\n    value: function () {\n      var _changeColumn = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(tableName, attributeName, dataTypeOrOptions, options) {\n        var fields, sql, subQueries, _iterator2, _step2, subQuery;\n\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                options = options || {};\n                _context2.next = 3;\n                return this.describeTable(tableName, options);\n\n              case 3:\n                fields = _context2.sent;\n                Object.assign(fields[attributeName], this.normalizeAttribute(dataTypeOrOptions));\n                sql = this.queryGenerator.removeColumnQuery(tableName, fields);\n                subQueries = sql.split(';').filter(function (q) {\n                  return q !== '';\n                });\n                _iterator2 = _createForOfIteratorHelper(subQueries);\n                _context2.prev = 8;\n\n                _iterator2.s();\n\n              case 10:\n                if ((_step2 = _iterator2.n()).done) {\n                  _context2.next = 16;\n                  break;\n                }\n\n                subQuery = _step2.value;\n                _context2.next = 14;\n                return this.sequelize.query(\"\".concat(subQuery, \";\"), _objectSpread({\n                  raw: true\n                }, options));\n\n              case 14:\n                _context2.next = 10;\n                break;\n\n              case 16:\n                _context2.next = 21;\n                break;\n\n              case 18:\n                _context2.prev = 18;\n                _context2.t0 = _context2[\"catch\"](8);\n\n                _iterator2.e(_context2.t0);\n\n              case 21:\n                _context2.prev = 21;\n\n                _iterator2.f();\n\n                return _context2.finish(21);\n\n              case 24:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this, [[8, 18, 21, 24]]);\n      }));\n\n      function changeColumn(_x4, _x5, _x6, _x7) {\n        return _changeColumn.apply(this, arguments);\n      }\n\n      return changeColumn;\n    }()\n    /**\n     * A wrapper that fixes SQLite's inability to rename columns from existing tables.\n     * It will create a backup of the table, drop the table afterwards and create a\n     * new table with the same name but with a renamed version of the respective column.\n     *\n     * @override\n     */\n\n  }, {\n    key: \"renameColumn\",\n    value: function () {\n      var _renameColumn = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3(tableName, attrNameBefore, attrNameAfter, options) {\n        var fields, sql, subQueries, _iterator3, _step3, subQuery;\n\n        return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                options = options || {};\n                _context3.next = 3;\n                return this.assertTableHasColumn(tableName, attrNameBefore, options);\n\n              case 3:\n                fields = _context3.sent;\n                fields[attrNameAfter] = _objectSpread({}, fields[attrNameBefore]);\n                delete fields[attrNameBefore];\n                sql = this.queryGenerator.renameColumnQuery(tableName, attrNameBefore, attrNameAfter, fields);\n                subQueries = sql.split(';').filter(function (q) {\n                  return q !== '';\n                });\n                _iterator3 = _createForOfIteratorHelper(subQueries);\n                _context3.prev = 9;\n\n                _iterator3.s();\n\n              case 11:\n                if ((_step3 = _iterator3.n()).done) {\n                  _context3.next = 17;\n                  break;\n                }\n\n                subQuery = _step3.value;\n                _context3.next = 15;\n                return this.sequelize.query(\"\".concat(subQuery, \";\"), _objectSpread({\n                  raw: true\n                }, options));\n\n              case 15:\n                _context3.next = 11;\n                break;\n\n              case 17:\n                _context3.next = 22;\n                break;\n\n              case 19:\n                _context3.prev = 19;\n                _context3.t0 = _context3[\"catch\"](9);\n\n                _iterator3.e(_context3.t0);\n\n              case 22:\n                _context3.prev = 22;\n\n                _iterator3.f();\n\n                return _context3.finish(22);\n\n              case 25:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this, [[9, 19, 22, 25]]);\n      }));\n\n      function renameColumn(_x8, _x9, _x10, _x11) {\n        return _renameColumn.apply(this, arguments);\n      }\n\n      return renameColumn;\n    }()\n    /**\n     * @override\n     */\n\n  }, {\n    key: \"removeConstraint\",\n    value: function () {\n      var _removeConstraint = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee4(tableName, constraintName, options) {\n        var _this = this;\n\n        var createTableSql, constraints, constraint, constraintSnippet, referenceTableName, referenceTableKeys, fields, sql, subQueries, _iterator4, _step4, subQuery;\n\n        return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                _context4.next = 2;\n                return this.showConstraint(tableName, constraintName);\n\n              case 2:\n                constraints = _context4.sent;\n                // sqlite can't show only one constraint, so we find here the one to remove\n                constraint = constraints.find(function (constaint) {\n                  return constaint.constraintName === constraintName;\n                });\n\n                if (constraint) {\n                  _context4.next = 6;\n                  break;\n                }\n\n                throw new sequelizeErrors.UnknownConstraintError({\n                  message: \"Constraint \".concat(constraintName, \" on table \").concat(tableName, \" does not exist\"),\n                  constraint: constraintName,\n                  table: tableName\n                });\n\n              case 6:\n                createTableSql = constraint.sql;\n                constraint.constraintName = this.queryGenerator.quoteIdentifier(constraint.constraintName);\n                constraintSnippet = \", CONSTRAINT \".concat(constraint.constraintName, \" \").concat(constraint.constraintType, \" \").concat(constraint.constraintCondition);\n\n                if (constraint.constraintType === 'FOREIGN KEY') {\n                  referenceTableName = this.queryGenerator.quoteTable(constraint.referenceTableName);\n                  constraint.referenceTableKeys = constraint.referenceTableKeys.map(function (columnName) {\n                    return _this.queryGenerator.quoteIdentifier(columnName);\n                  });\n                  referenceTableKeys = constraint.referenceTableKeys.join(', ');\n                  constraintSnippet += \" REFERENCES \".concat(referenceTableName, \" (\").concat(referenceTableKeys, \")\");\n                  constraintSnippet += \" ON UPDATE \".concat(constraint.updateAction);\n                  constraintSnippet += \" ON DELETE \".concat(constraint.deleteAction);\n                }\n\n                createTableSql = createTableSql.replace(constraintSnippet, '');\n                createTableSql += ';';\n                _context4.next = 14;\n                return this.describeTable(tableName, options);\n\n              case 14:\n                fields = _context4.sent;\n                sql = this.queryGenerator._alterConstraintQuery(tableName, fields, createTableSql);\n                subQueries = sql.split(';').filter(function (q) {\n                  return q !== '';\n                });\n                _iterator4 = _createForOfIteratorHelper(subQueries);\n                _context4.prev = 18;\n\n                _iterator4.s();\n\n              case 20:\n                if ((_step4 = _iterator4.n()).done) {\n                  _context4.next = 26;\n                  break;\n                }\n\n                subQuery = _step4.value;\n                _context4.next = 24;\n                return this.sequelize.query(\"\".concat(subQuery, \";\"), _objectSpread({\n                  raw: true\n                }, options));\n\n              case 24:\n                _context4.next = 20;\n                break;\n\n              case 26:\n                _context4.next = 31;\n                break;\n\n              case 28:\n                _context4.prev = 28;\n                _context4.t0 = _context4[\"catch\"](18);\n\n                _iterator4.e(_context4.t0);\n\n              case 31:\n                _context4.prev = 31;\n\n                _iterator4.f();\n\n                return _context4.finish(31);\n\n              case 34:\n              case \"end\":\n                return _context4.stop();\n            }\n          }\n        }, _callee4, this, [[18, 28, 31, 34]]);\n      }));\n\n      function removeConstraint(_x12, _x13, _x14) {\n        return _removeConstraint.apply(this, arguments);\n      }\n\n      return removeConstraint;\n    }()\n    /**\n     * @override\n     */\n\n  }, {\n    key: \"addConstraint\",\n    value: function () {\n      var _addConstraint = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee5(tableName, options) {\n        var constraintSnippet, describeCreateTableSql, constraints, sql, index, createTableSql, fields, subQueries, _iterator5, _step5, subQuery;\n\n        return _regeneratorRuntime.wrap(function _callee5$(_context5) {\n          while (1) {\n            switch (_context5.prev = _context5.next) {\n              case 0:\n                if (options.fields) {\n                  _context5.next = 2;\n                  break;\n                }\n\n                throw new Error('Fields must be specified through options.fields');\n\n              case 2:\n                if (options.type) {\n                  _context5.next = 4;\n                  break;\n                }\n\n                throw new Error('Constraint type must be specified through options.type');\n\n              case 4:\n                options = cloneDeep(options);\n                constraintSnippet = this.queryGenerator.getConstraintSnippet(tableName, options);\n                describeCreateTableSql = this.queryGenerator.describeCreateTableQuery(tableName);\n                _context5.next = 9;\n                return this.sequelize.query(describeCreateTableSql, _objectSpread({}, options, {\n                  type: QueryTypes.SELECT,\n                  raw: true\n                }));\n\n              case 9:\n                constraints = _context5.sent;\n                sql = constraints[0].sql;\n                index = sql.length - 1; //Replace ending ')' with constraint snippet - Simulates String.replaceAt\n                //http://stackoverflow.com/questions/1431094\n\n                createTableSql = \"\".concat(sql.substr(0, index), \", \").concat(constraintSnippet, \")\").concat(sql.substr(index + 1), \";\");\n                _context5.next = 15;\n                return this.describeTable(tableName, options);\n\n              case 15:\n                fields = _context5.sent;\n                sql = this.queryGenerator._alterConstraintQuery(tableName, fields, createTableSql);\n                subQueries = sql.split(';').filter(function (q) {\n                  return q !== '';\n                });\n                _iterator5 = _createForOfIteratorHelper(subQueries);\n                _context5.prev = 19;\n\n                _iterator5.s();\n\n              case 21:\n                if ((_step5 = _iterator5.n()).done) {\n                  _context5.next = 27;\n                  break;\n                }\n\n                subQuery = _step5.value;\n                _context5.next = 25;\n                return this.sequelize.query(\"\".concat(subQuery, \";\"), _objectSpread({\n                  raw: true\n                }, options));\n\n              case 25:\n                _context5.next = 21;\n                break;\n\n              case 27:\n                _context5.next = 32;\n                break;\n\n              case 29:\n                _context5.prev = 29;\n                _context5.t0 = _context5[\"catch\"](19);\n\n                _iterator5.e(_context5.t0);\n\n              case 32:\n                _context5.prev = 32;\n\n                _iterator5.f();\n\n                return _context5.finish(32);\n\n              case 35:\n              case \"end\":\n                return _context5.stop();\n            }\n          }\n        }, _callee5, this, [[19, 29, 32, 35]]);\n      }));\n\n      function addConstraint(_x15, _x16) {\n        return _addConstraint.apply(this, arguments);\n      }\n\n      return addConstraint;\n    }()\n    /**\n     * @override\n     */\n\n  }, {\n    key: \"getForeignKeyReferencesForTable\",\n    value: function () {\n      var _getForeignKeyReferencesForTable = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee6(tableName, options) {\n        var database, query, result;\n        return _regeneratorRuntime.wrap(function _callee6$(_context6) {\n          while (1) {\n            switch (_context6.prev = _context6.next) {\n              case 0:\n                database = this.sequelize.config.database;\n                query = this.queryGenerator.getForeignKeysQuery(tableName, database);\n                _context6.next = 4;\n                return this.sequelize.query(query, options);\n\n              case 4:\n                result = _context6.sent;\n                return _context6.abrupt(\"return\", result.map(function (row) {\n                  return {\n                    tableName: tableName,\n                    columnName: row.from,\n                    referencedTableName: row.table,\n                    referencedColumnName: row.to,\n                    tableCatalog: database,\n                    referencedTableCatalog: database\n                  };\n                }));\n\n              case 6:\n              case \"end\":\n                return _context6.stop();\n            }\n          }\n        }, _callee6, this);\n      }));\n\n      function getForeignKeyReferencesForTable(_x17, _x18) {\n        return _getForeignKeyReferencesForTable.apply(this, arguments);\n      }\n\n      return getForeignKeyReferencesForTable;\n    }()\n    /**\n     * @override\n     */\n\n  }, {\n    key: \"dropAllTables\",\n    value: function () {\n      var _dropAllTables = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee7(options) {\n        var skip, tableNames;\n        return _regeneratorRuntime.wrap(function _callee7$(_context7) {\n          while (1) {\n            switch (_context7.prev = _context7.next) {\n              case 0:\n                options = options || {};\n                skip = options.skip || [];\n                _context7.next = 4;\n                return this.showAllTables(options);\n\n              case 4:\n                tableNames = _context7.sent;\n                _context7.next = 7;\n                return this.sequelize.query('PRAGMA foreign_keys = OFF', options);\n\n              case 7:\n                _context7.next = 9;\n                return this._dropAllTables(tableNames, skip, options);\n\n              case 9:\n                _context7.next = 11;\n                return this.sequelize.query('PRAGMA foreign_keys = ON', options);\n\n              case 11:\n              case \"end\":\n                return _context7.stop();\n            }\n          }\n        }, _callee7, this);\n      }));\n\n      function dropAllTables(_x19) {\n        return _dropAllTables.apply(this, arguments);\n      }\n\n      return dropAllTables;\n    }()\n    /**\n     * @override\n     */\n\n  }, {\n    key: \"describeTable\",\n    value: function () {\n      var _describeTable = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee8(tableName, options) {\n        var schema, schemaDelimiter, sql, sqlIndexes, data, indexes, prop, _iterator6, _step6, index, _iterator8, _step8, field, foreignKeys, _iterator7, _step7, foreignKey;\n\n        return _regeneratorRuntime.wrap(function _callee8$(_context8) {\n          while (1) {\n            switch (_context8.prev = _context8.next) {\n              case 0:\n                schema = null;\n                schemaDelimiter = null;\n\n                if (typeof options === 'string') {\n                  schema = options;\n                } else if (typeof options === 'object' && options !== null) {\n                  schema = options.schema || null;\n                  schemaDelimiter = options.schemaDelimiter || null;\n                }\n\n                if (typeof tableName === 'object' && tableName !== null) {\n                  schema = tableName.schema;\n                  tableName = tableName.tableName;\n                }\n\n                sql = this.queryGenerator.describeTableQuery(tableName, schema, schemaDelimiter);\n                options = _objectSpread({}, options, {\n                  type: QueryTypes.DESCRIBE\n                });\n                sqlIndexes = this.queryGenerator.showIndexesQuery(tableName);\n                _context8.prev = 7;\n                _context8.next = 10;\n                return this.sequelize.query(sql, options);\n\n              case 10:\n                data = _context8.sent;\n\n                if (!_.isEmpty(data)) {\n                  _context8.next = 13;\n                  break;\n                }\n\n                throw new Error(\"No description found for \\\"\".concat(tableName, \"\\\" table. Check the table name and schema; remember, they _are_ case sensitive.\"));\n\n              case 13:\n                _context8.next = 15;\n                return this.sequelize.query(sqlIndexes, options);\n\n              case 15:\n                indexes = _context8.sent;\n\n                for (prop in data) {\n                  data[prop].unique = false;\n                }\n\n                _iterator6 = _createForOfIteratorHelper(indexes);\n\n                try {\n                  for (_iterator6.s(); !(_step6 = _iterator6.n()).done;) {\n                    index = _step6.value;\n                    _iterator8 = _createForOfIteratorHelper(index.fields);\n\n                    try {\n                      for (_iterator8.s(); !(_step8 = _iterator8.n()).done;) {\n                        field = _step8.value;\n\n                        if (index.unique !== undefined) {\n                          data[field.attribute].unique = index.unique;\n                        }\n                      }\n                    } catch (err) {\n                      _iterator8.e(err);\n                    } finally {\n                      _iterator8.f();\n                    }\n                  }\n                } catch (err) {\n                  _iterator6.e(err);\n                } finally {\n                  _iterator6.f();\n                }\n\n                _context8.next = 21;\n                return this.getForeignKeyReferencesForTable(tableName, options);\n\n              case 21:\n                foreignKeys = _context8.sent;\n                _iterator7 = _createForOfIteratorHelper(foreignKeys);\n\n                try {\n                  for (_iterator7.s(); !(_step7 = _iterator7.n()).done;) {\n                    foreignKey = _step7.value;\n                    data[foreignKey.columnName].references = {\n                      model: foreignKey.referencedTableName,\n                      key: foreignKey.referencedColumnName\n                    };\n                  }\n                } catch (err) {\n                  _iterator7.e(err);\n                } finally {\n                  _iterator7.f();\n                }\n\n                return _context8.abrupt(\"return\", data);\n\n              case 27:\n                _context8.prev = 27;\n                _context8.t0 = _context8[\"catch\"](7);\n\n                if (!(_context8.t0.original && _context8.t0.original.code === 'ER_NO_SUCH_TABLE')) {\n                  _context8.next = 31;\n                  break;\n                }\n\n                throw new Error(\"No description found for \\\"\".concat(tableName, \"\\\" table. Check the table name and schema; remember, they _are_ case sensitive.\"));\n\n              case 31:\n                throw _context8.t0;\n\n              case 32:\n              case \"end\":\n                return _context8.stop();\n            }\n          }\n        }, _callee8, this, [[7, 27]]);\n      }));\n\n      function describeTable(_x20, _x21) {\n        return _describeTable.apply(this, arguments);\n      }\n\n      return describeTable;\n    }()\n  }]);\n\n  return SQLiteQueryInterface;\n}(QueryInterface);\n\nexports.SQLiteQueryInterface = SQLiteQueryInterface;","map":null,"metadata":{},"sourceType":"script"}