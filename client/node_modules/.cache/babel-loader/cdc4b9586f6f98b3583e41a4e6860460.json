{"ast":null,"code":"'use strict';\n/*\n4.1 authentication: (http://bazaar.launchpad.net/~mysql/mysql-server/5.5/view/head:/sql/password.c)\n\n  SERVER:  public_seed=create_random_string()\n           send(public_seed)\n\n  CLIENT:  recv(public_seed)\n           hash_stage1=sha1(\"password\")\n           hash_stage2=sha1(hash_stage1)\n           reply=xor(hash_stage1, sha1(public_seed,hash_stage2)\n\n           // this three steps are done in scramble()\n\n           send(reply)\n\n\n  SERVER:  recv(reply)\n           hash_stage1=xor(reply, sha1(public_seed,hash_stage2))\n           candidate_hash2=sha1(hash_stage1)\n           check(candidate_hash2==hash_stage2)\n\nserver stores sha1(sha1(password)) ( hash_stag2)\n*/\n\nvar crypto = require('crypto');\n\nfunction sha1(msg, msg1, msg2) {\n  var hash = crypto.createHash('sha1');\n  hash.update(msg);\n\n  if (msg1) {\n    hash.update(msg1);\n  }\n\n  if (msg2) {\n    hash.update(msg2);\n  }\n\n  return hash.digest();\n}\n\nfunction xor(a, b) {\n  if (!Buffer.isBuffer(a)) {\n    a = Buffer.from(a, 'binary');\n  }\n\n  if (!Buffer.isBuffer(b)) {\n    b = Buffer.from(b, 'binary');\n  }\n\n  var result = Buffer.allocUnsafe(a.length);\n\n  for (var i = 0; i < a.length; i++) {\n    result[i] = a[i] ^ b[i];\n  }\n\n  return result;\n}\n\nexports.xor = xor;\n\nfunction token(password, scramble1, scramble2) {\n  // TODO: use buffers (not sure why strings here)\n  if (!password) {\n    return Buffer.alloc(0);\n  }\n\n  var stage1 = sha1(password);\n  return exports.calculateTokenFromPasswordSha(stage1, scramble1, scramble2);\n}\n\nexports.calculateTokenFromPasswordSha = function (passwordSha, scramble1, scramble2) {\n  // we use AUTH 41 here, and we need only the bytes we just need.\n  var authPluginData1 = scramble1.slice(0, 8);\n  var authPluginData2 = scramble2.slice(0, 12);\n  var stage2 = sha1(passwordSha);\n  var stage3 = sha1(authPluginData1, authPluginData2, stage2);\n  return xor(stage3, passwordSha);\n};\n\nexports.calculateToken = token;\n\nexports.verifyToken = function (publicSeed1, publicSeed2, token, doubleSha) {\n  var hashStage1 = xor(token, sha1(publicSeed1, publicSeed2, doubleSha));\n  var candidateHash2 = sha1(hashStage1);\n  return candidateHash2.compare(doubleSha) === 0;\n};\n\nexports.doubleSha1 = function (password) {\n  return sha1(sha1(password));\n};\n\nfunction xorRotating(a, seed) {\n  if (!Buffer.isBuffer(a)) {\n    a = Buffer.from(a, 'binary');\n  }\n\n  if (!Buffer.isBuffer(seed)) {\n    seed = Buffer.from(seed, 'binary');\n  }\n\n  var result = Buffer.allocUnsafe(a.length);\n  var seedLen = seed.length;\n\n  for (var i = 0; i < a.length; i++) {\n    result[i] = a[i] ^ seed[i % seedLen];\n  }\n\n  return result;\n}\n\nexports.xorRotating = xorRotating;","map":null,"metadata":{},"sourceType":"script"}