{"ast":null,"code":"'use strict';\n\nvar _classCallCheck = require(\"/Users/jervisbay/project-tres/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _possibleConstructorReturn = require(\"/Users/jervisbay/project-tres/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/possibleConstructorReturn\");\n\nvar _getPrototypeOf = require(\"/Users/jervisbay/project-tres/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/getPrototypeOf\");\n\nvar _inherits = require(\"/Users/jervisbay/project-tres/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/inherits\");\n\nvar _assertThisInitialized = require(\"/Users/jervisbay/project-tres/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/assertThisInitialized\");\n\nvar _ = require('lodash');\n\nvar AbstractDialect = require('../abstract');\n\nvar ConnectionManager = require('./connection-manager');\n\nvar Query = require('./query');\n\nvar QueryGenerator = require('./query-generator');\n\nvar DataTypes = require('../../data-types').sqlite;\n\nvar _require = require('./query-interface'),\n    SQLiteQueryInterface = _require.SQLiteQueryInterface;\n\nvar SqliteDialect = /*#__PURE__*/function (_AbstractDialect) {\n  _inherits(SqliteDialect, _AbstractDialect);\n\n  function SqliteDialect(sequelize) {\n    var _this;\n\n    _classCallCheck(this, SqliteDialect);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(SqliteDialect).call(this));\n    _this.sequelize = sequelize;\n    _this.connectionManager = new ConnectionManager(_assertThisInitialized(_assertThisInitialized(_this)), sequelize);\n    _this.queryGenerator = new QueryGenerator({\n      _dialect: _assertThisInitialized(_assertThisInitialized(_this)),\n      sequelize: sequelize\n    });\n    _this.queryInterface = new SQLiteQueryInterface(sequelize, _this.queryGenerator);\n    return _this;\n  }\n\n  return SqliteDialect;\n}(AbstractDialect);\n\nSqliteDialect.prototype.supports = _.merge(_.cloneDeep(AbstractDialect.prototype.supports), {\n  'DEFAULT': false,\n  'DEFAULT VALUES': true,\n  'UNION ALL': false,\n  'RIGHT JOIN': false,\n  inserts: {\n    ignoreDuplicates: ' OR IGNORE',\n    updateOnDuplicate: ' ON CONFLICT DO UPDATE SET'\n  },\n  index: {\n    using: false,\n    where: true,\n    functionBased: true\n  },\n  transactionOptions: {\n    type: true\n  },\n  constraints: {\n    addConstraint: false,\n    dropConstraint: false\n  },\n  joinTableDependent: false,\n  groupedLimit: false,\n  JSON: true\n});\nSqliteDialect.prototype.defaultVersion = '3.8.0';\nSqliteDialect.prototype.Query = Query;\nSqliteDialect.prototype.DataTypes = DataTypes;\nSqliteDialect.prototype.name = 'sqlite';\nSqliteDialect.prototype.TICK_CHAR = '`';\nSqliteDialect.prototype.TICK_CHAR_LEFT = SqliteDialect.prototype.TICK_CHAR;\nSqliteDialect.prototype.TICK_CHAR_RIGHT = SqliteDialect.prototype.TICK_CHAR;\nmodule.exports = SqliteDialect;\nmodule.exports.SqliteDialect = SqliteDialect;\nmodule.exports.default = SqliteDialect;","map":null,"metadata":{},"sourceType":"script"}