{"ast":null,"code":"'use strict';\n\nvar _classCallCheck = require(\"/Users/jervisbay/project-tres/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/Users/jervisbay/project-tres/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\n\nvar ClientConstants = require('../constants/client.js');\n\nvar CharsetToEncoding = require('../constants/charset_encodings.js');\n\nvar Packet = require('../packets/packet.js');\n\nvar auth41 = require('../auth_41.js');\n\nvar HandshakeResponse = /*#__PURE__*/function () {\n  function HandshakeResponse(handshake) {\n    _classCallCheck(this, HandshakeResponse);\n\n    this.user = handshake.user || '';\n    this.database = handshake.database || '';\n    this.password = handshake.password || '';\n    this.passwordSha1 = handshake.passwordSha1;\n    this.authPluginData1 = handshake.authPluginData1;\n    this.authPluginData2 = handshake.authPluginData2;\n    this.compress = handshake.compress;\n    this.clientFlags = handshake.flags; // TODO: pre-4.1 auth support\n\n    var authToken;\n\n    if (this.passwordSha1) {\n      authToken = auth41.calculateTokenFromPasswordSha(this.passwordSha1, this.authPluginData1, this.authPluginData2);\n    } else {\n      authToken = auth41.calculateToken(this.password, this.authPluginData1, this.authPluginData2);\n    }\n\n    this.authToken = authToken;\n    this.charsetNumber = handshake.charsetNumber;\n    this.encoding = CharsetToEncoding[handshake.charsetNumber];\n    this.connectAttributes = handshake.connectAttributes;\n  }\n\n  _createClass(HandshakeResponse, [{\n    key: \"serializeResponse\",\n    value: function serializeResponse(buffer) {\n      var _this = this;\n\n      var isSet = function isSet(flag) {\n        return _this.clientFlags & ClientConstants[flag];\n      };\n\n      var packet = new Packet(0, buffer, 0, buffer.length);\n      packet.offset = 4;\n      packet.writeInt32(this.clientFlags);\n      packet.writeInt32(0); // max packet size. todo: move to config\n\n      packet.writeInt8(this.charsetNumber);\n      packet.skip(23);\n      var encoding = this.encoding;\n      packet.writeNullTerminatedString(this.user, encoding);\n      var k;\n\n      if (isSet('PLUGIN_AUTH_LENENC_CLIENT_DATA')) {\n        packet.writeLengthCodedNumber(this.authToken.length);\n        packet.writeBuffer(this.authToken);\n      } else if (isSet('SECURE_CONNECTION')) {\n        packet.writeInt8(this.authToken.length);\n        packet.writeBuffer(this.authToken);\n      } else {\n        packet.writeBuffer(this.authToken);\n        packet.writeInt8(0);\n      }\n\n      if (isSet('CONNECT_WITH_DB')) {\n        packet.writeNullTerminatedString(this.database, encoding);\n      }\n\n      if (isSet('PLUGIN_AUTH')) {\n        // TODO: pass from config\n        packet.writeNullTerminatedString('mysql_native_password', 'latin1');\n      }\n\n      if (isSet('CONNECT_ATTRS')) {\n        var connectAttributes = this.connectAttributes || {};\n        var attrNames = Object.keys(connectAttributes);\n        var keysLength = 0;\n\n        for (k = 0; k < attrNames.length; ++k) {\n          keysLength += Packet.lengthCodedStringLength(attrNames[k], encoding);\n          keysLength += Packet.lengthCodedStringLength(connectAttributes[attrNames[k]], encoding);\n        }\n\n        packet.writeLengthCodedNumber(keysLength);\n\n        for (k = 0; k < attrNames.length; ++k) {\n          packet.writeLengthCodedString(attrNames[k], encoding);\n          packet.writeLengthCodedString(connectAttributes[attrNames[k]], encoding);\n        }\n      }\n\n      return packet;\n    }\n  }, {\n    key: \"toPacket\",\n    value: function toPacket() {\n      if (typeof this.user !== 'string') {\n        throw new Error('\"user\" connection config property must be a string');\n      }\n\n      if (typeof this.database !== 'string') {\n        throw new Error('\"database\" connection config property must be a string');\n      } // dry run: calculate resulting packet length\n\n\n      var p = this.serializeResponse(Packet.MockBuffer());\n      return this.serializeResponse(Buffer.alloc(p.offset));\n    }\n  }], [{\n    key: \"fromPacket\",\n    value: function fromPacket(packet) {\n      var args = {};\n      args.clientFlags = packet.readInt32();\n\n      function isSet(flag) {\n        return args.clientFlags & ClientConstants[flag];\n      }\n\n      args.maxPacketSize = packet.readInt32();\n      args.charsetNumber = packet.readInt8();\n      var encoding = CharsetToEncoding[args.charsetNumber];\n      args.encoding = encoding;\n      packet.skip(23);\n      args.user = packet.readNullTerminatedString(encoding);\n      var authTokenLength;\n\n      if (isSet('PLUGIN_AUTH_LENENC_CLIENT_DATA')) {\n        authTokenLength = packet.readLengthCodedNumber(encoding);\n        args.authToken = packet.readBuffer(authTokenLength);\n      } else if (isSet('SECURE_CONNECTION')) {\n        authTokenLength = packet.readInt8();\n        args.authToken = packet.readBuffer(authTokenLength);\n      } else {\n        args.authToken = packet.readNullTerminatedString(encoding);\n      }\n\n      if (isSet('CONNECT_WITH_DB')) {\n        args.database = packet.readNullTerminatedString(encoding);\n      }\n\n      if (isSet('PLUGIN_AUTH')) {\n        args.authPluginName = packet.readNullTerminatedString(encoding);\n      }\n\n      if (isSet('CONNECT_ATTRS')) {\n        var keysLength = packet.readLengthCodedNumber(encoding);\n        var keysEnd = packet.offset + keysLength;\n        var attrs = {};\n\n        while (packet.offset < keysEnd) {\n          attrs[packet.readLengthCodedString(encoding)] = packet.readLengthCodedString(encoding);\n        }\n\n        args.connectAttributes = attrs;\n      }\n\n      return args;\n    }\n  }]);\n\n  return HandshakeResponse;\n}();\n\nmodule.exports = HandshakeResponse;","map":null,"metadata":{},"sourceType":"script"}