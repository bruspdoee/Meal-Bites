{"ast":null,"code":"'use strict';\n\nvar through = require('through2');\n\nfunction forward(chunk, enc, cb) {\n  cb(null, chunk);\n}\n\nfunction toThrough(readable) {\n  var opts = {\n    objectMode: readable._readableState.objectMode,\n    highWaterMark: readable._readableState.highWaterMark\n  };\n\n  function flush(cb) {\n    var self = this;\n    readable.on('readable', onReadable);\n    readable.on('end', cb);\n\n    function onReadable() {\n      var chunk;\n\n      while (chunk = readable.read()) {\n        self.push(chunk);\n      }\n    }\n  }\n\n  var wrapper = through(opts, forward, flush);\n  var shouldFlow = true;\n  wrapper.once('pipe', onPipe);\n  wrapper.on('newListener', onListener);\n  readable.on('error', wrapper.emit.bind(wrapper, 'error'));\n\n  function onListener(event) {\n    // Once we've seen the data or readable event, check if we need to flow\n    if (event === 'data' || event === 'readable') {\n      maybeFlow();\n      this.removeListener('newListener', onListener);\n    }\n  }\n\n  function onPipe() {\n    // If the wrapper is piped, disable flow\n    shouldFlow = false;\n  }\n\n  function maybeFlow() {\n    // If we need to flow, end the stream which triggers flush\n    if (shouldFlow) {\n      wrapper.end();\n    }\n  }\n\n  return wrapper;\n}\n\nmodule.exports = toThrough;","map":null,"metadata":{},"sourceType":"script"}