{"ast":null,"code":"'use strict';\n\nvar _classCallCheck = require(\"/Users/jervisbay/project-tres/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/Users/jervisbay/project-tres/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\n\nvar Promise = require('./promise');\n/**\n * The transaction object is used to identify a running transaction.\n * It is created by calling `Sequelize.transaction()`.\n * To run a query under a transaction, you should pass the transaction in the options object.\n *\n * @class Transaction\n * @see {@link Sequelize.transaction}\n */\n\n\nvar Transaction = /*#__PURE__*/function () {\n  /**\n   * Creates a new transaction instance\n   *\n   * @param {Sequelize} sequelize A configured sequelize Instance\n   * @param {Object} options An object with options\n   * @param {string} [options.type] Sets the type of the transaction. Sqlite only\n   * @param {string} [options.isolationLevel] Sets the isolation level of the transaction.\n   * @param {string} [options.deferrable] Sets the constraints to be deferred or immediately checked. PostgreSQL only\n   */\n  function Transaction(sequelize, options) {\n    _classCallCheck(this, Transaction);\n\n    this.sequelize = sequelize;\n    this.savepoints = [];\n    this._afterCommitHooks = []; // get dialect specific transaction options\n\n    var generateTransactionId = this.sequelize.dialect.QueryGenerator.generateTransactionId;\n    this.options = Object.assign({\n      type: sequelize.options.transactionType,\n      isolationLevel: sequelize.options.isolationLevel,\n      readOnly: false\n    }, options || {});\n    this.parent = this.options.transaction;\n\n    if (this.parent) {\n      this.id = this.parent.id;\n      this.parent.savepoints.push(this);\n      this.name = \"\".concat(this.id, \"-sp-\").concat(this.parent.savepoints.length);\n    } else {\n      this.id = this.name = generateTransactionId();\n    }\n\n    delete this.options.transaction;\n  }\n  /**\n   * Commit the transaction\n   *\n   * @returns {Promise}\n   */\n\n\n  _createClass(Transaction, [{\n    key: \"commit\",\n    value: function commit() {\n      var _this = this;\n\n      if (this.finished) {\n        return Promise.reject(new Error(\"Transaction cannot be committed because it has been finished with state: \".concat(this.finished)));\n      }\n\n      this._clearCls();\n\n      return this.sequelize.getQueryInterface().commitTransaction(this, this.options).finally(function () {\n        _this.finished = 'commit';\n\n        if (!_this.parent) {\n          return _this.cleanup();\n        }\n\n        return null;\n      }).tap(function () {\n        return Promise.each(_this._afterCommitHooks, function (hook) {\n          return Promise.resolve(hook.apply(_this, [_this]));\n        });\n      });\n    }\n    /**\n     * Rollback (abort) the transaction\n     *\n     * @returns {Promise}\n     */\n\n  }, {\n    key: \"rollback\",\n    value: function rollback() {\n      var _this2 = this;\n\n      if (this.finished) {\n        return Promise.reject(new Error(\"Transaction cannot be rolled back because it has been finished with state: \".concat(this.finished)));\n      }\n\n      if (!this.connection) {\n        return Promise.reject(new Error('Transaction cannot be rolled back because it never started'));\n      }\n\n      this._clearCls();\n\n      return this.sequelize.getQueryInterface().rollbackTransaction(this, this.options).finally(function () {\n        if (!_this2.parent) {\n          return _this2.cleanup();\n        }\n\n        return _this2;\n      });\n    }\n  }, {\n    key: \"prepareEnvironment\",\n    value: function prepareEnvironment(useCLS) {\n      var _this3 = this;\n\n      var connectionPromise;\n\n      if (useCLS === undefined) {\n        useCLS = true;\n      }\n\n      if (this.parent) {\n        connectionPromise = Promise.resolve(this.parent.connection);\n      } else {\n        var acquireOptions = {\n          uuid: this.id\n        };\n\n        if (this.options.readOnly) {\n          acquireOptions.type = 'SELECT';\n        }\n\n        connectionPromise = this.sequelize.connectionManager.getConnection(acquireOptions);\n      }\n\n      return connectionPromise.then(function (connection) {\n        _this3.connection = connection;\n        _this3.connection.uuid = _this3.id;\n      }).then(function () {\n        return _this3.begin().then(function () {\n          return _this3.setDeferrable();\n        }).catch(function (setupErr) {\n          return _this3.rollback().finally(function () {\n            throw setupErr;\n          });\n        });\n      }).tap(function () {\n        if (useCLS && _this3.sequelize.constructor._cls) {\n          _this3.sequelize.constructor._cls.set('transaction', _this3);\n        }\n\n        return null;\n      });\n    }\n  }, {\n    key: \"setDeferrable\",\n    value: function setDeferrable() {\n      if (this.options.deferrable) {\n        return this.sequelize.getQueryInterface().deferConstraints(this, this.options);\n      }\n    }\n  }, {\n    key: \"begin\",\n    value: function begin() {\n      var _this4 = this;\n\n      var queryInterface = this.sequelize.getQueryInterface();\n\n      if (this.sequelize.dialect.supports.settingIsolationLevelDuringTransaction) {\n        return queryInterface.startTransaction(this, this.options).then(function () {\n          return queryInterface.setIsolationLevel(_this4, _this4.options.isolationLevel, _this4.options);\n        });\n      }\n\n      return queryInterface.setIsolationLevel(this, this.options.isolationLevel, this.options).then(function () {\n        return queryInterface.startTransaction(_this4, _this4.options);\n      });\n    }\n  }, {\n    key: \"cleanup\",\n    value: function cleanup() {\n      var res = this.sequelize.connectionManager.releaseConnection(this.connection);\n      this.connection.uuid = undefined;\n      return res;\n    }\n  }, {\n    key: \"_clearCls\",\n    value: function _clearCls() {\n      var cls = this.sequelize.constructor._cls;\n\n      if (cls) {\n        if (cls.get('transaction') === this) {\n          cls.set('transaction', null);\n        }\n      }\n    }\n    /**\n     * A hook that is run after a transaction is committed\n     *\n     * @param {Function} fn   A callback function that is called with the committed transaction\n     * @name afterCommit\n     * @memberof Sequelize.Transaction\n     */\n\n  }, {\n    key: \"afterCommit\",\n    value: function afterCommit(fn) {\n      if (!fn || typeof fn !== 'function') {\n        throw new Error('\"fn\" must be a function');\n      }\n\n      this._afterCommitHooks.push(fn);\n    }\n    /**\n     * Types can be set per-transaction by passing `options.type` to `sequelize.transaction`.\n     * Default to `DEFERRED` but you can override the default type by passing `options.transactionType` in `new Sequelize`.\n     * Sqlite only.\n     *\n     * Pass in the desired level as the first argument:\n     *\n     * @example\n     * return sequelize.transaction({type: Sequelize.Transaction.TYPES.EXCLUSIVE}, transaction => {\n     *   // your transactions\n     * }).then(result => {\n     *   // transaction has been committed. Do something after the commit if required.\n     * }).catch(err => {\n     *   // do something with the err.\n     * });\n     *\n     * @property DEFERRED\n     * @property IMMEDIATE\n     * @property EXCLUSIVE\n     */\n\n  }, {\n    key: \"LOCK\",\n\n    /**\n     * Please see {@link Transaction.LOCK}\n     */\n    get: function get() {\n      return Transaction.LOCK;\n    }\n  }], [{\n    key: \"TYPES\",\n    get: function get() {\n      return {\n        DEFERRED: 'DEFERRED',\n        IMMEDIATE: 'IMMEDIATE',\n        EXCLUSIVE: 'EXCLUSIVE'\n      };\n    }\n    /**\n     * Isolation levels can be set per-transaction by passing `options.isolationLevel` to `sequelize.transaction`.\n     * Sequelize uses the default isolation level of the database, you can override this by passing `options.isolationLevel` in Sequelize constructor options.\n     *\n     * Pass in the desired level as the first argument:\n     *\n     * @example\n     * return sequelize.transaction({isolationLevel: Sequelize.Transaction.ISOLATION_LEVELS.SERIALIZABLE}, transaction => {\n     *   // your transactions\n     * }).then(result => {\n     *   // transaction has been committed. Do something after the commit if required.\n     * }).catch(err => {\n     *   // do something with the err.\n     * });\n     *\n     * @property READ_UNCOMMITTED\n     * @property READ_COMMITTED\n     * @property REPEATABLE_READ\n     * @property SERIALIZABLE\n     */\n\n  }, {\n    key: \"ISOLATION_LEVELS\",\n    get: function get() {\n      return {\n        READ_UNCOMMITTED: 'READ UNCOMMITTED',\n        READ_COMMITTED: 'READ COMMITTED',\n        REPEATABLE_READ: 'REPEATABLE READ',\n        SERIALIZABLE: 'SERIALIZABLE'\n      };\n    }\n    /**\n     * Possible options for row locking. Used in conjunction with `find` calls:\n     *\n     * @example\n     * // t1 is a transaction\n     * Model.findAll({\n     *   where: ...,\n     *   transaction: t1,\n     *   lock: t1.LOCK...\n     * });\n     *\n     * @example <caption>Postgres also supports specific locks while eager loading by using OF:</caption>\n     * UserModel.findAll({\n     *   where: ...,\n     *   include: [TaskModel, ...],\n     *   transaction: t1,\n     *   lock: {\n     *     level: t1.LOCK...,\n     *     of: UserModel\n     *   }\n     * });\n     *\n     * # UserModel will be locked but TaskModel won't!\n     *\n     * @example <caption>You can also skip locked rows:</caption>\n     * // t1 is a transaction\n     * Model.findAll({\n     *   where: ...,\n     *   transaction: t1,\n     *   lock: true,\n     *   skipLocked: true\n     * });\n     * # The query will now return any rows that aren't locked by another transaction\n     *\n     * @returns {Object}\n     * @property UPDATE\n     * @property SHARE\n     * @property KEY_SHARE Postgres 9.3+ only\n     * @property NO_KEY_UPDATE Postgres 9.3+ only\n     */\n\n  }, {\n    key: \"LOCK\",\n    get: function get() {\n      return {\n        UPDATE: 'UPDATE',\n        SHARE: 'SHARE',\n        KEY_SHARE: 'KEY SHARE',\n        NO_KEY_UPDATE: 'NO KEY UPDATE'\n      };\n    }\n  }]);\n\n  return Transaction;\n}();\n\nmodule.exports = Transaction;\nmodule.exports.Transaction = Transaction;\nmodule.exports.default = Transaction;","map":null,"metadata":{},"sourceType":"script"}