{"ast":null,"code":"'use strict';\n\nfunction _createForOfIteratorHelper(o, allowArrayLike) { var it; if (typeof Symbol === \"undefined\" || o[Symbol.iterator] == null) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = o[Symbol.iterator](); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nfunction doesNotWantLeadingSpace(str) {\n  return /^[;,)]/.test(str);\n}\n\nfunction doesNotWantTrailingSpace(str) {\n  return /\\($/.test(str);\n}\n/**\n * Joins an array of strings with a single space between them,\n * except for:\n * \n * - Strings starting with ';', ',' and ')', which do not get a leading space.\n * - Strings ending with '(', which do not get a trailing space.\n * \n * @param {string[]} parts\n * @returns {string}\n * @private\n */\n\n\nfunction singleSpaceJoinHelper(parts) {\n  return parts.reduce(function (_ref, part) {\n    var skipNextLeadingSpace = _ref.skipNextLeadingSpace,\n        result = _ref.result;\n\n    if (skipNextLeadingSpace || doesNotWantLeadingSpace(part)) {\n      result += part.trim();\n    } else {\n      result += \" \".concat(part.trim());\n    }\n\n    return {\n      skipNextLeadingSpace: doesNotWantTrailingSpace(part),\n      result: result\n    };\n  }, {\n    skipNextLeadingSpace: true,\n    result: ''\n  }).result;\n}\n/**\n * Joins an array with a single space, auto trimming when needed.\n * \n * Certain elements do not get leading/trailing spaces.\n * \n * @param {any[]} array The array to be joined. Falsy values are skipped. If an\n * element is another array, this function will be called recursively on that array.\n * Otherwise, if a non-string, non-falsy value is present, a TypeError will be thrown.\n * \n * @returns {string} The joined string.\n * \n * @private\n */\n\n\nfunction joinSQLFragments(array) {\n  if (array.length === 0) return ''; // Skip falsy fragments\n\n  array = array.filter(function (x) {\n    return x;\n  }); // Resolve recursive calls\n\n  array = array.map(function (fragment) {\n    if (Array.isArray(fragment)) {\n      return joinSQLFragments(fragment);\n    }\n\n    return fragment;\n  }); // Ensure strings\n\n  var _iterator = _createForOfIteratorHelper(array),\n      _step;\n\n  try {\n    for (_iterator.s(); !(_step = _iterator.n()).done;) {\n      var fragment = _step.value;\n\n      if (fragment && typeof fragment !== 'string') {\n        var error = new TypeError(\"Tried to construct a SQL string with a non-string, non-falsy fragment (\".concat(fragment, \").\"));\n        error.args = array;\n        error.fragment = fragment;\n        throw error;\n      }\n    } // Trim fragments\n\n  } catch (err) {\n    _iterator.e(err);\n  } finally {\n    _iterator.f();\n  }\n\n  array = array.map(function (x) {\n    return x.trim();\n  }); // Skip full-whitespace fragments (empty after the above trim)\n\n  array = array.filter(function (x) {\n    return x !== '';\n  });\n  return singleSpaceJoinHelper(array);\n}\n\nexports.joinSQLFragments = joinSQLFragments;","map":null,"metadata":{},"sourceType":"script"}