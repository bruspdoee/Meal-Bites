{"ast":null,"code":"'use strict';\n\nvar _regeneratorRuntime = require(\"/Users/jervisbay/project-tres/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\");\n\nvar _objectSpread = require(\"/Users/jervisbay/project-tres/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/objectSpread\");\n\nvar _asyncToGenerator = require(\"/Users/jervisbay/project-tres/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/asyncToGenerator\");\n\nvar _classCallCheck = require(\"/Users/jervisbay/project-tres/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/Users/jervisbay/project-tres/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\n\nvar _possibleConstructorReturn = require(\"/Users/jervisbay/project-tres/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/possibleConstructorReturn\");\n\nvar _getPrototypeOf = require(\"/Users/jervisbay/project-tres/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/getPrototypeOf\");\n\nvar _inherits = require(\"/Users/jervisbay/project-tres/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/inherits\");\n\nvar AbstractConnectionManager = require('../abstract/connection-manager');\n\nvar SequelizeErrors = require('../../errors');\n\nvar _require = require('../../utils/logger'),\n    logger = _require.logger;\n\nvar DataTypes = require('../../data-types').mysql;\n\nvar momentTz = require('moment-timezone');\n\nvar debug = logger.debugContext('connection:mysql');\n\nvar parserStore = require('../parserStore')('mysql');\n\nvar _require2 = require('util'),\n    promisify = _require2.promisify;\n/**\n * MySQL Connection Manager\n *\n * Get connections, validate and disconnect them.\n * AbstractConnectionManager pooling use it to handle MySQL specific connections\n * Use https://github.com/sidorares/node-mysql2 to connect with MySQL server\n *\n * @private\n */\n\n\nvar ConnectionManager = /*#__PURE__*/function (_AbstractConnectionMa) {\n  _inherits(ConnectionManager, _AbstractConnectionMa);\n\n  function ConnectionManager(dialect, sequelize) {\n    var _this;\n\n    _classCallCheck(this, ConnectionManager);\n\n    sequelize.config.port = sequelize.config.port || 3306;\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(ConnectionManager).call(this, dialect, sequelize));\n    _this.lib = _this._loadDialectModule('mysql2');\n\n    _this.refreshTypeParser(DataTypes);\n\n    return _this;\n  }\n\n  _createClass(ConnectionManager, [{\n    key: \"_refreshTypeParser\",\n    value: function _refreshTypeParser(dataType) {\n      parserStore.refresh(dataType);\n    }\n  }, {\n    key: \"_clearTypeParser\",\n    value: function _clearTypeParser() {\n      parserStore.clear();\n    }\n  }, {\n    key: \"connect\",\n\n    /**\n     * Connect with MySQL database based on config, Handle any errors in connection\n     * Set the pool handlers on connection.error\n     * Also set proper timezone once connection is connected.\n     *\n     * @param {object} config\n     * @returns {Promise<Connection>}\n     * @private\n     */\n    value: function () {\n      var _connect = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(config) {\n        var _this2 = this;\n\n        var connectionConfig, connection, tzOffset;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                connectionConfig = _objectSpread({\n                  host: config.host,\n                  port: config.port,\n                  user: config.username,\n                  flags: '-FOUND_ROWS',\n                  password: config.password,\n                  database: config.database,\n                  timezone: this.sequelize.options.timezone,\n                  typeCast: ConnectionManager._typecast.bind(this),\n                  bigNumberStrings: false,\n                  supportBigNumbers: true\n                }, config.dialectOptions);\n                _context.prev = 1;\n                _context.next = 4;\n                return new Promise(function (resolve, reject) {\n                  var connection = _this2.lib.createConnection(connectionConfig);\n\n                  var errorHandler = function errorHandler(e) {\n                    // clean up connect & error event if there is error\n                    connection.removeListener('connect', connectHandler);\n                    connection.removeListener('error', connectHandler);\n                    reject(e);\n                  };\n\n                  var connectHandler = function connectHandler() {\n                    // clean up error event if connected\n                    connection.removeListener('error', errorHandler);\n                    resolve(connection);\n                  }; // don't use connection.once for error event handling here\n                  // mysql2 emit error two times in case handshake was failed\n                  // first error is protocol_lost and second is timeout\n                  // if we will use `once.error` node process will crash on 2nd error emit\n\n\n                  connection.on('error', errorHandler);\n                  connection.once('connect', connectHandler);\n                });\n\n              case 4:\n                connection = _context.sent;\n                debug('connection acquired');\n                connection.on('error', function (error) {\n                  switch (error.code) {\n                    case 'ESOCKET':\n                    case 'ECONNRESET':\n                    case 'EPIPE':\n                    case 'PROTOCOL_CONNECTION_LOST':\n                      _this2.pool.destroy(connection);\n\n                  }\n                });\n\n                if (this.sequelize.config.keepDefaultTimezone) {\n                  _context.next = 12;\n                  break;\n                }\n\n                // set timezone for this connection\n                // but named timezone are not directly supported in mysql, so get its offset first\n                tzOffset = this.sequelize.options.timezone;\n                tzOffset = /\\//.test(tzOffset) ? momentTz.tz(tzOffset).format('Z') : tzOffset;\n                _context.next = 12;\n                return promisify(function (cb) {\n                  return connection.query(\"SET time_zone = '\".concat(tzOffset, \"'\"), cb);\n                })();\n\n              case 12:\n                return _context.abrupt(\"return\", connection);\n\n              case 15:\n                _context.prev = 15;\n                _context.t0 = _context[\"catch\"](1);\n                _context.t1 = _context.t0.code;\n                _context.next = _context.t1 === 'ECONNREFUSED' ? 20 : _context.t1 === 'ER_ACCESS_DENIED_ERROR' ? 21 : _context.t1 === 'ENOTFOUND' ? 22 : _context.t1 === 'EHOSTUNREACH' ? 23 : _context.t1 === 'EINVAL' ? 24 : 25;\n                break;\n\n              case 20:\n                throw new SequelizeErrors.ConnectionRefusedError(_context.t0);\n\n              case 21:\n                throw new SequelizeErrors.AccessDeniedError(_context.t0);\n\n              case 22:\n                throw new SequelizeErrors.HostNotFoundError(_context.t0);\n\n              case 23:\n                throw new SequelizeErrors.HostNotReachableError(_context.t0);\n\n              case 24:\n                throw new SequelizeErrors.InvalidConnectionError(_context.t0);\n\n              case 25:\n                throw new SequelizeErrors.ConnectionError(_context.t0);\n\n              case 26:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this, [[1, 15]]);\n      }));\n\n      function connect(_x) {\n        return _connect.apply(this, arguments);\n      }\n\n      return connect;\n    }()\n  }, {\n    key: \"disconnect\",\n    value: function () {\n      var _disconnect = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(connection) {\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                if (!connection._closing) {\n                  _context2.next = 3;\n                  break;\n                }\n\n                debug('connection tried to disconnect but was already at CLOSED state');\n                return _context2.abrupt(\"return\");\n\n              case 3:\n                _context2.next = 5;\n                return promisify(function (callback) {\n                  return connection.end(callback);\n                })();\n\n              case 5:\n                return _context2.abrupt(\"return\", _context2.sent);\n\n              case 6:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2);\n      }));\n\n      function disconnect(_x2) {\n        return _disconnect.apply(this, arguments);\n      }\n\n      return disconnect;\n    }()\n  }, {\n    key: \"validate\",\n    value: function validate(connection) {\n      return connection && !connection._fatalError && !connection._protocolError && !connection._closing && !connection.stream.destroyed;\n    }\n  }], [{\n    key: \"_typecast\",\n    value: function _typecast(field, next) {\n      if (parserStore.get(field.type)) {\n        return parserStore.get(field.type)(field, this.sequelize.options, next);\n      }\n\n      return next();\n    }\n  }]);\n\n  return ConnectionManager;\n}(AbstractConnectionManager);\n\nmodule.exports = ConnectionManager;\nmodule.exports.ConnectionManager = ConnectionManager;\nmodule.exports.default = ConnectionManager;","map":null,"metadata":{},"sourceType":"script"}