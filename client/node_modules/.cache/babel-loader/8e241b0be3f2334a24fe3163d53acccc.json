{"ast":null,"code":"'use strict';\n\nvar _classCallCheck = require(\"/Users/jervisbay/project-tres/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/Users/jervisbay/project-tres/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\n\nvar _possibleConstructorReturn = require(\"/Users/jervisbay/project-tres/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/possibleConstructorReturn\");\n\nvar _getPrototypeOf = require(\"/Users/jervisbay/project-tres/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/getPrototypeOf\");\n\nvar _inherits = require(\"/Users/jervisbay/project-tres/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/inherits\");\n\nfunction _createForOfIteratorHelper(o, allowArrayLike) { var it; if (typeof Symbol === \"undefined\" || o[Symbol.iterator] == null) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = o[Symbol.iterator](); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nvar _ = require('lodash');\n\nvar AbstractConnectionManager = require('../abstract/connection-manager');\n\nvar _require = require('../../utils/logger'),\n    logger = _require.logger;\n\nvar debug = logger.debugContext('connection:pg');\n\nvar Promise = require('../../promise');\n\nvar sequelizeErrors = require('../../errors');\n\nvar semver = require('semver');\n\nvar dataTypes = require('../../data-types');\n\nvar moment = require('moment-timezone');\n\nvar ConnectionManager = /*#__PURE__*/function (_AbstractConnectionMa) {\n  _inherits(ConnectionManager, _AbstractConnectionMa);\n\n  function ConnectionManager(dialect, sequelize) {\n    var _this;\n\n    _classCallCheck(this, ConnectionManager);\n\n    sequelize.config.port = sequelize.config.port || 5432;\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(ConnectionManager).call(this, dialect, sequelize));\n\n    var pgLib = _this._loadDialectModule('pg');\n\n    _this.lib = _this.sequelize.config.native ? pgLib.native : pgLib;\n\n    _this._clearDynamicOIDs();\n\n    _this._clearTypeParser();\n\n    _this.refreshTypeParser(dataTypes.postgres);\n\n    return _this;\n  } // Expose this as a method so that the parsing may be updated when the user has added additional, custom types\n\n\n  _createClass(ConnectionManager, [{\n    key: \"_refreshTypeParser\",\n    value: function _refreshTypeParser(dataType) {\n      var _this2 = this;\n\n      var arrayParserBuilder = function arrayParserBuilder(parser) {\n        return function (value) {\n          return _this2.lib.types.arrayParser.create(value, parser).parse();\n        };\n      };\n\n      var rangeParserBuilder = function rangeParserBuilder(parser) {\n        return function (value) {\n          return dataType.parse(value, {\n            parser: parser\n          });\n        };\n      }; // Set range parsers\n\n\n      if (dataType.key.toLowerCase() === 'range') {\n        for (var name in this.nameOidMap) {\n          var entry = this.nameOidMap[name];\n          if (!entry.rangeOid) continue;\n          var rangeParser = rangeParserBuilder(this.getTypeParser(entry.oid));\n          var arrayRangeParser = arrayParserBuilder(rangeParser);\n          this.oidParserMap.set(entry.rangeOid, rangeParser);\n          if (!entry.arrayRangeOid) continue;\n          this.oidParserMap.set(entry.arrayRangeOid, arrayRangeParser);\n        }\n\n        return;\n      } // Create parsers for normal or enum data types\n\n\n      var parser = function parser(value) {\n        return dataType.parse(value);\n      };\n\n      var arrayParser = arrayParserBuilder(parser); // Set enum parsers\n\n      if (dataType.key.toLowerCase() === 'enum') {\n        this.enumOids.oids.forEach(function (oid) {\n          _this2.oidParserMap.set(oid, parser);\n        });\n        this.enumOids.arrayOids.forEach(function (arrayOid) {\n          _this2.oidParserMap.set(arrayOid, arrayParser);\n        });\n        return;\n      } // Set parsers for normal data types\n\n\n      dataType.types.postgres.forEach(function (name) {\n        if (!_this2.nameOidMap[name]) return;\n\n        _this2.oidParserMap.set(_this2.nameOidMap[name].oid, parser);\n\n        if (!_this2.nameOidMap[name].arrayOid) return;\n\n        _this2.oidParserMap.set(_this2.nameOidMap[name].arrayOid, arrayParser);\n      });\n    }\n  }, {\n    key: \"_clearTypeParser\",\n    value: function _clearTypeParser() {\n      this.oidParserMap = new Map();\n    }\n  }, {\n    key: \"getTypeParser\",\n    value: function getTypeParser(oid) {\n      var _this$lib$types;\n\n      if (this.oidParserMap.get(oid)) return this.oidParserMap.get(oid);\n\n      for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n        args[_key - 1] = arguments[_key];\n      }\n\n      return (_this$lib$types = this.lib.types).getTypeParser.apply(_this$lib$types, [oid].concat(args));\n    }\n  }, {\n    key: \"connect\",\n    value: function connect(config) {\n      var _this3 = this;\n\n      config.user = config.username;\n\n      var connectionConfig = _.pick(config, ['user', 'password', 'host', 'database', 'port']);\n\n      connectionConfig.types = {\n        getTypeParser: ConnectionManager.prototype.getTypeParser.bind(this)\n      };\n\n      if (config.dialectOptions) {\n        _.merge(connectionConfig, _.pick(config.dialectOptions, [// see [http://www.postgresql.org/docs/9.3/static/runtime-config-logging.html#GUC-APPLICATION-NAME]\n        'application_name', // choose the SSL mode with the PGSSLMODE environment variable\n        // object format: [https://github.com/brianc/node-postgres/blob/master/lib/connection.js#L79]\n        // see also [http://www.postgresql.org/docs/9.3/static/libpq-ssl.html]\n        'ssl', // In addition to the values accepted by the corresponding server,\n        // you can use \"auto\" to determine the right encoding from the\n        // current locale in the client (LC_CTYPE environment variable on Unix systems)\n        'client_encoding', // !! DO NOT SET THIS TO TRUE !!\n        // (unless you know what you're doing)\n        // see [http://www.postgresql.org/message-id/flat/bc9549a50706040852u27633f41ib1e6b09f8339d845@mail.gmail.com#bc9549a50706040852u27633f41ib1e6b09f8339d845@mail.gmail.com]\n        'binary', // This should help with backends incorrectly considering idle clients to be dead and prematurely disconnecting them.\n        // this feature has been added in pg module v6.0.0, check pg/CHANGELOG.md\n        'keepAlive', // Times out queries after a set time in milliseconds. Added in pg v7.3\n        'statement_timeout']));\n      }\n\n      return new Promise(function (resolve, reject) {\n        var responded = false;\n        var connection = new _this3.lib.Client(connectionConfig);\n\n        var parameterHandler = function parameterHandler(message) {\n          switch (message.parameterName) {\n            case 'server_version':\n              if (_this3.sequelize.options.databaseVersion === 0) {\n                var version = semver.coerce(message.parameterValue).version;\n                _this3.sequelize.options.databaseVersion = semver.valid(version) ? version : _this3.defaultVersion;\n              }\n\n              break;\n\n            case 'standard_conforming_strings':\n              connection['standard_conforming_strings'] = message.parameterValue;\n              break;\n          }\n        };\n\n        var endHandler = function endHandler() {\n          debug('connection timeout');\n\n          if (!responded) {\n            reject(new sequelizeErrors.ConnectionTimedOutError(new Error('Connection timed out')));\n          }\n        }; // If we didn't ever hear from the client.connect() callback the connection timeout\n        // node-postgres does not treat this as an error since no active query was ever emitted\n\n\n        connection.once('end', endHandler);\n\n        if (!_this3.sequelize.config.native) {\n          // Receive various server parameters for further configuration\n          connection.connection.on('parameterStatus', parameterHandler);\n        }\n\n        connection.connect(function (err) {\n          responded = true;\n\n          if (!_this3.sequelize.config.native) {\n            // remove parameter handler\n            connection.connection.removeListener('parameterStatus', parameterHandler);\n          }\n\n          if (err) {\n            if (err.code) {\n              switch (err.code) {\n                case 'ECONNREFUSED':\n                  reject(new sequelizeErrors.ConnectionRefusedError(err));\n                  break;\n\n                case 'ENOTFOUND':\n                  reject(new sequelizeErrors.HostNotFoundError(err));\n                  break;\n\n                case 'EHOSTUNREACH':\n                  reject(new sequelizeErrors.HostNotReachableError(err));\n                  break;\n\n                case 'EINVAL':\n                  reject(new sequelizeErrors.InvalidConnectionError(err));\n                  break;\n\n                default:\n                  reject(new sequelizeErrors.ConnectionError(err));\n                  break;\n              }\n            } else {\n              reject(new sequelizeErrors.ConnectionError(err));\n            }\n          } else {\n            debug('connection acquired');\n            connection.removeListener('end', endHandler);\n            resolve(connection);\n          }\n        });\n      }).tap(function (connection) {\n        var query = '';\n\n        if (_this3.sequelize.options.standardConformingStrings !== false && connection['standard_conforming_strings'] !== 'on') {\n          // Disable escape characters in strings\n          // see https://github.com/sequelize/sequelize/issues/3545 (security issue)\n          // see https://www.postgresql.org/docs/current/static/runtime-config-compatible.html#GUC-STANDARD-CONFORMING-STRINGS\n          query += 'SET standard_conforming_strings=on;';\n        }\n\n        if (_this3.sequelize.options.clientMinMessages !== false) {\n          query += \"SET client_min_messages TO \".concat(_this3.sequelize.options.clientMinMessages, \";\");\n        }\n\n        if (!_this3.sequelize.config.keepDefaultTimezone) {\n          var isZone = !!moment.tz.zone(_this3.sequelize.options.timezone);\n\n          if (isZone) {\n            query += \"SET TIME ZONE '\".concat(_this3.sequelize.options.timezone, \"';\");\n          } else {\n            query += \"SET TIME ZONE INTERVAL '\".concat(_this3.sequelize.options.timezone, \"' HOUR TO MINUTE;\");\n          }\n        }\n\n        if (query) {\n          return connection.query(query);\n        }\n      }).tap(function (connection) {\n        if (Object.keys(_this3.nameOidMap).length === 0 && _this3.enumOids.oids.length === 0 && _this3.enumOids.arrayOids.length === 0) {\n          return _this3._refreshDynamicOIDs(connection);\n        }\n      }).tap(function (connection) {\n        // Don't let a Postgres restart (or error) to take down the whole app\n        connection.on('error', function (error) {\n          connection._invalid = true;\n          debug(\"connection error \".concat(error.code || error.message));\n\n          _this3.pool.destroy(connection);\n        });\n      });\n    }\n  }, {\n    key: \"disconnect\",\n    value: function disconnect(connection) {\n      if (connection._ending) {\n        debug('connection tried to disconnect but was already at ENDING state');\n        return Promise.resolve();\n      }\n\n      return Promise.fromCallback(function (callback) {\n        return connection.end(callback);\n      });\n    }\n  }, {\n    key: \"validate\",\n    value: function validate(connection) {\n      return !connection._invalid && !connection._ending;\n    }\n  }, {\n    key: \"_refreshDynamicOIDs\",\n    value: function _refreshDynamicOIDs(connection) {\n      var _this4 = this;\n\n      var databaseVersion = this.sequelize.options.databaseVersion;\n      var supportedVersion = '8.3.0'; // Check for supported version\n\n      if ((databaseVersion && semver.gte(databaseVersion, supportedVersion)) === false) {\n        return Promise.resolve();\n      } // Refresh dynamic OIDs for some types\n      // These include Geometry / Geography / HStore / Enum / Citext / Range\n\n\n      return (connection || this.sequelize).query('WITH ranges AS (' + '  SELECT pg_range.rngtypid, pg_type.typname AS rngtypname,' + '         pg_type.typarray AS rngtyparray, pg_range.rngsubtype' + '    FROM pg_range LEFT OUTER JOIN pg_type ON pg_type.oid = pg_range.rngtypid' + ')' + 'SELECT pg_type.typname, pg_type.typtype, pg_type.oid, pg_type.typarray,' + '       ranges.rngtypname, ranges.rngtypid, ranges.rngtyparray' + '  FROM pg_type LEFT OUTER JOIN ranges ON pg_type.oid = ranges.rngsubtype' + ' WHERE (pg_type.typtype IN(\\'b\\', \\'e\\'));').then(function (results) {\n        var result = Array.isArray(results) ? results.pop() : results; // When searchPath is prepended then two statements are executed and the result is\n        // an array of those two statements. First one is the SET search_path and second is\n        // the SELECT query result.\n\n        if (Array.isArray(result)) {\n          if (result[0].command === 'SET') {\n            result = result.pop();\n          }\n        }\n\n        var newNameOidMap = {};\n        var newEnumOids = {\n          oids: [],\n          arrayOids: []\n        };\n\n        var _iterator = _createForOfIteratorHelper(result.rows),\n            _step;\n\n        try {\n          for (_iterator.s(); !(_step = _iterator.n()).done;) {\n            var row = _step.value;\n\n            // Mapping enums, handled separatedly\n            if (row.typtype === 'e') {\n              newEnumOids.oids.push(row.oid);\n              if (row.typarray) newEnumOids.arrayOids.push(row.typarray);\n              continue;\n            } // Mapping base types and their arrays\n\n\n            newNameOidMap[row.typname] = {\n              oid: row.oid\n            };\n            if (row.typarray) newNameOidMap[row.typname].arrayOid = row.typarray; // Mapping ranges(of base types) and their arrays\n\n            if (row.rngtypid) {\n              newNameOidMap[row.typname].rangeOid = row.rngtypid;\n              if (row.rngtyparray) newNameOidMap[row.typname].arrayRangeOid = row.rngtyparray;\n            }\n          } // Replace all OID mappings. Avoids temporary empty OID mappings.\n\n        } catch (err) {\n          _iterator.e(err);\n        } finally {\n          _iterator.f();\n        }\n\n        _this4.nameOidMap = newNameOidMap;\n        _this4.enumOids = newEnumOids;\n\n        _this4.refreshTypeParser(dataTypes.postgres);\n      });\n    }\n  }, {\n    key: \"_clearDynamicOIDs\",\n    value: function _clearDynamicOIDs() {\n      this.nameOidMap = {};\n      this.enumOids = {\n        oids: [],\n        arrayOids: []\n      };\n    }\n  }]);\n\n  return ConnectionManager;\n}(AbstractConnectionManager);\n\nmodule.exports = ConnectionManager;\nmodule.exports.ConnectionManager = ConnectionManager;\nmodule.exports.default = ConnectionManager;","map":null,"metadata":{},"sourceType":"script"}