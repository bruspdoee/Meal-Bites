{"ast":null,"code":"'use strict';\n\nvar _classCallCheck = require(\"/Users/jervisbay/project-tres/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/Users/jervisbay/project-tres/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\n\nvar _possibleConstructorReturn = require(\"/Users/jervisbay/project-tres/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/possibleConstructorReturn\");\n\nvar _getPrototypeOf = require(\"/Users/jervisbay/project-tres/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/getPrototypeOf\");\n\nvar _inherits = require(\"/Users/jervisbay/project-tres/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/inherits\");\n\nvar AbstractConnectionManager = require('../abstract/connection-manager');\n\nvar SequelizeErrors = require('../../errors');\n\nvar Promise = require('../../promise');\n\nvar _require = require('../../utils/logger'),\n    logger = _require.logger;\n\nvar DataTypes = require('../../data-types').mysql;\n\nvar momentTz = require('moment-timezone');\n\nvar debug = logger.debugContext('connection:mysql');\n\nvar parserStore = require('../parserStore')('mysql');\n/**\n * MySQL Connection Manager\n *\n * Get connections, validate and disconnect them.\n * AbstractConnectionManager pooling use it to handle MySQL specific connections\n * Use https://github.com/sidorares/node-mysql2 to connect with MySQL server\n *\n * @extends AbstractConnectionManager\n * @returns Class<ConnectionManager>\n * @private\n */\n\n\nvar ConnectionManager = /*#__PURE__*/function (_AbstractConnectionMa) {\n  _inherits(ConnectionManager, _AbstractConnectionMa);\n\n  function ConnectionManager(dialect, sequelize) {\n    var _this;\n\n    _classCallCheck(this, ConnectionManager);\n\n    sequelize.config.port = sequelize.config.port || 3306;\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(ConnectionManager).call(this, dialect, sequelize));\n    _this.lib = _this._loadDialectModule('mysql2');\n\n    _this.refreshTypeParser(DataTypes);\n\n    return _this;\n  }\n\n  _createClass(ConnectionManager, [{\n    key: \"_refreshTypeParser\",\n    value: function _refreshTypeParser(dataType) {\n      parserStore.refresh(dataType);\n    }\n  }, {\n    key: \"_clearTypeParser\",\n    value: function _clearTypeParser() {\n      parserStore.clear();\n    }\n  }, {\n    key: \"connect\",\n\n    /**\n     * Connect with MySQL database based on config, Handle any errors in connection\n     * Set the pool handlers on connection.error\n     * Also set proper timezone once connection is connected.\n     *\n     * @param {Object} config\n     * @returns {Promise<Connection>}\n     * @private\n     */\n    value: function connect(config) {\n      var _this2 = this;\n\n      var connectionConfig = Object.assign({\n        host: config.host,\n        port: config.port,\n        user: config.username,\n        flags: '-FOUND_ROWS',\n        password: config.password,\n        database: config.database,\n        timezone: this.sequelize.options.timezone,\n        typeCast: ConnectionManager._typecast.bind(this),\n        bigNumberStrings: false,\n        supportBigNumbers: true\n      }, config.dialectOptions);\n      return new Promise(function (resolve, reject) {\n        var connection = _this2.lib.createConnection(connectionConfig);\n\n        var errorHandler = function errorHandler(e) {\n          // clean up connect & error event if there is error\n          connection.removeListener('connect', connectHandler);\n          connection.removeListener('error', connectHandler);\n          reject(e);\n        };\n\n        var connectHandler = function connectHandler() {\n          // clean up error event if connected\n          connection.removeListener('error', errorHandler);\n          resolve(connection);\n        }; // don't use connection.once for error event handling here\n        // mysql2 emit error two times in case handshake was failed\n        // first error is protocol_lost and second is timeout\n        // if we will use `once.error` node process will crash on 2nd error emit\n\n\n        connection.on('error', errorHandler);\n        connection.once('connect', connectHandler);\n      }).tap(function () {\n        debug('connection acquired');\n      }).then(function (connection) {\n        connection.on('error', function (error) {\n          switch (error.code) {\n            case 'ESOCKET':\n            case 'ECONNRESET':\n            case 'EPIPE':\n            case 'PROTOCOL_CONNECTION_LOST':\n              _this2.pool.destroy(connection);\n\n          }\n        });\n        return new Promise(function (resolve, reject) {\n          if (!_this2.sequelize.config.keepDefaultTimezone) {\n            // set timezone for this connection\n            // but named timezone are not directly supported in mysql, so get its offset first\n            var tzOffset = _this2.sequelize.options.timezone;\n            tzOffset = /\\//.test(tzOffset) ? momentTz.tz(tzOffset).format('Z') : tzOffset;\n            return connection.query(\"SET time_zone = '\".concat(tzOffset, \"'\"), function (err) {\n              if (err) {\n                reject(err);\n              } else {\n                resolve(connection);\n              }\n            });\n          } // return connection without executing SET time_zone query\n\n\n          resolve(connection);\n        });\n      }).catch(function (err) {\n        switch (err.code) {\n          case 'ECONNREFUSED':\n            throw new SequelizeErrors.ConnectionRefusedError(err);\n\n          case 'ER_ACCESS_DENIED_ERROR':\n            throw new SequelizeErrors.AccessDeniedError(err);\n\n          case 'ENOTFOUND':\n            throw new SequelizeErrors.HostNotFoundError(err);\n\n          case 'EHOSTUNREACH':\n            throw new SequelizeErrors.HostNotReachableError(err);\n\n          case 'EINVAL':\n            throw new SequelizeErrors.InvalidConnectionError(err);\n\n          default:\n            throw new SequelizeErrors.ConnectionError(err);\n        }\n      });\n    }\n  }, {\n    key: \"disconnect\",\n    value: function disconnect(connection) {\n      // Don't disconnect connections with CLOSED state\n      if (connection._closing) {\n        debug('connection tried to disconnect but was already at CLOSED state');\n        return Promise.resolve();\n      }\n\n      return Promise.fromCallback(function (callback) {\n        return connection.end(callback);\n      });\n    }\n  }, {\n    key: \"validate\",\n    value: function validate(connection) {\n      return connection && !connection._fatalError && !connection._protocolError && !connection._closing && !connection.stream.destroyed;\n    }\n  }], [{\n    key: \"_typecast\",\n    value: function _typecast(field, next) {\n      if (parserStore.get(field.type)) {\n        return parserStore.get(field.type)(field, this.sequelize.options, next);\n      }\n\n      return next();\n    }\n  }]);\n\n  return ConnectionManager;\n}(AbstractConnectionManager);\n\nmodule.exports = ConnectionManager;\nmodule.exports.ConnectionManager = ConnectionManager;\nmodule.exports.default = ConnectionManager;","map":null,"metadata":{},"sourceType":"script"}