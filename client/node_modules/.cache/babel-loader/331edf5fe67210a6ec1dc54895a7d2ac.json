{"ast":null,"code":"'use strict';\n\nvar _classCallCheck = require(\"/Users/jervisbay/project-tres/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/Users/jervisbay/project-tres/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\n\nvar _possibleConstructorReturn = require(\"/Users/jervisbay/project-tres/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/possibleConstructorReturn\");\n\nvar _getPrototypeOf = require(\"/Users/jervisbay/project-tres/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/getPrototypeOf\");\n\nvar _inherits = require(\"/Users/jervisbay/project-tres/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/inherits\");\n\nvar CommandCode = require('../constants/commands.js');\n\nvar Errors = require('../constants/errors.js');\n\nvar Command = require('./command.js');\n\nvar Packets = require('../packets/index.js');\n\nvar ServerHandshake = /*#__PURE__*/function (_Command) {\n  _inherits(ServerHandshake, _Command);\n\n  function ServerHandshake(args) {\n    var _this;\n\n    _classCallCheck(this, ServerHandshake);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(ServerHandshake).call(this));\n    _this.args = args;\n    /*\n    this.protocolVersion = args.protocolVersion || 10;\n    this.serverVersion   = args.serverVersion;\n    this.connectionId    = args.connectionId,\n    this.statusFlags     = args.statusFlags,\n    this.characterSet    = args.characterSet,\n    this.capabilityFlags = args.capabilityFlags || 512;\n    */\n\n    return _this;\n  }\n\n  _createClass(ServerHandshake, [{\n    key: \"start\",\n    value: function start(packet, connection) {\n      var serverHelloPacket = new Packets.Handshake(this.args);\n      this.serverHello = serverHelloPacket;\n      serverHelloPacket.setScrambleData(function (err) {\n        if (err) {\n          connection.emit('error', new Error('Error generating random bytes'));\n          return;\n        }\n\n        connection.writePacket(serverHelloPacket.toPacket(0));\n      });\n      return ServerHandshake.prototype.readClientReply;\n    }\n  }, {\n    key: \"readClientReply\",\n    value: function readClientReply(packet, connection) {\n      // check auth here\n      var clientHelloReply = Packets.HandshakeResponse.fromPacket(packet); // TODO check we don't have something similar already\n\n      connection.clientHelloReply = clientHelloReply;\n\n      if (this.args.authCallback) {\n        this.args.authCallback({\n          user: clientHelloReply.user,\n          database: clientHelloReply.database,\n          address: connection.stream.remoteAddress,\n          authPluginData1: this.serverHello.authPluginData1,\n          authPluginData2: this.serverHello.authPluginData2,\n          authToken: clientHelloReply.authToken\n        }, function (err, mysqlError) {\n          // if (err)\n          if (!mysqlError) {\n            connection.writeOk();\n          } else {\n            // TODO create constants / errorToCode\n            // 1045 = ER_ACCESS_DENIED_ERROR\n            connection.writeError({\n              message: mysqlError.message || '',\n              code: mysqlError.code || 1045\n            });\n            connection.close();\n          }\n        });\n      } else {\n        connection.writeOk();\n      }\n\n      return ServerHandshake.prototype.dispatchCommands;\n    }\n  }, {\n    key: \"dispatchCommands\",\n    value: function dispatchCommands(packet, connection) {\n      // command from client to server\n      var knownCommand = true;\n      var encoding = connection.clientHelloReply.encoding;\n      var commandCode = packet.readInt8();\n\n      switch (commandCode) {\n        case CommandCode.QUIT:\n          if (connection.listeners('quit').length) {\n            connection.emit('quit');\n          } else {\n            connection.stream.end();\n          }\n\n          break;\n\n        case CommandCode.INIT_DB:\n          if (connection.listeners('init_db').length) {\n            var schemaName = packet.readString(undefined, encoding);\n            connection.emit('init_db', schemaName);\n          } else {\n            connection.writeOk();\n          }\n\n          break;\n\n        case CommandCode.QUERY:\n          if (connection.listeners('query').length) {\n            var query = packet.readString(undefined, encoding);\n            connection.emit('query', query);\n          } else {\n            connection.writeError({\n              code: Errors.HA_ERR_INTERNAL_ERROR,\n              message: 'No query handler'\n            });\n          }\n\n          break;\n\n        case CommandCode.FIELD_LIST:\n          if (connection.listeners('field_list').length) {\n            var table = packet.readNullTerminatedString();\n            var fields = packet.readString(undefined, encoding);\n            connection.emit('field_list', table, fields);\n          } else {\n            connection.writeError({\n              code: Errors.ER_WARN_DEPRECATED_SYNTAX,\n              message: 'As of MySQL 5.7.11, COM_FIELD_LIST is deprecated and will be removed in a future version of MySQL.'\n            });\n          }\n\n          break;\n\n        case CommandCode.PING:\n          if (connection.listeners('ping').length) {\n            connection.emit('ping');\n          } else {\n            connection.writeOk();\n          }\n\n          break;\n\n        default:\n          knownCommand = false;\n      }\n\n      if (connection.listeners('packet').length) {\n        connection.emit('packet', packet.clone(), knownCommand, commandCode);\n      } else if (!knownCommand) {\n        // eslint-disable-next-line no-console\n        console.log('Unknown command:', commandCode);\n      }\n\n      return ServerHandshake.prototype.dispatchCommands;\n    }\n  }]);\n\n  return ServerHandshake;\n}(Command);\n\nmodule.exports = ServerHandshake; // TODO: implement server-side 4.1 authentication\n\n/*\n4.1 authentication: (http://bazaar.launchpad.net/~mysql/mysql-server/5.5/view/head:/sql/password.c)\n\n  SERVER:  public_seed=create_random_string()\n           send(public_seed)\n\n  CLIENT:  recv(public_seed)\n           hash_stage1=sha1(\"password\")\n           hash_stage2=sha1(hash_stage1)\n           reply=xor(hash_stage1, sha1(public_seed,hash_stage2)\n\n           // this three steps are done in scramble()\n\n           send(reply)\n\n\n  SERVER:  recv(reply)\n           hash_stage1=xor(reply, sha1(public_seed,hash_stage2))\n           candidate_hash2=sha1(hash_stage1)\n           check(candidate_hash2==hash_stage2)\n\nserver stores sha1(sha1(password)) ( hash_stag2)\n*/","map":null,"metadata":{},"sourceType":"script"}