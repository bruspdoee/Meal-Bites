{"ast":null,"code":"'use strict';\n\nvar _defineProperty = require(\"/Users/jervisbay/project-tres/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/defineProperty\");\n\nvar _classCallCheck = require(\"/Users/jervisbay/project-tres/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/Users/jervisbay/project-tres/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\n\nvar _possibleConstructorReturn = require(\"/Users/jervisbay/project-tres/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/possibleConstructorReturn\");\n\nvar _getPrototypeOf = require(\"/Users/jervisbay/project-tres/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/getPrototypeOf\");\n\nvar _inherits = require(\"/Users/jervisbay/project-tres/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/inherits\");\n\nfunction _createForOfIteratorHelper(o, allowArrayLike) { var it; if (typeof Symbol === \"undefined\" || o[Symbol.iterator] == null) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = o[Symbol.iterator](); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nvar Utils = require('../../utils');\n\nvar AbstractQuery = require('../abstract/query');\n\nvar sequelizeErrors = require('../../errors');\n\nvar _ = require('lodash');\n\nvar _require = require('../../utils/logger'),\n    logger = _require.logger;\n\nvar debug = logger.debugContext('sql:mysql');\n\nvar Query = /*#__PURE__*/function (_AbstractQuery) {\n  _inherits(Query, _AbstractQuery);\n\n  function Query(connection, sequelize, options) {\n    _classCallCheck(this, Query);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(Query).call(this, connection, sequelize, Object.assign({\n      showWarnings: false\n    }, options)));\n  }\n\n  _createClass(Query, [{\n    key: \"run\",\n    value: function run(sql, parameters) {\n      var _this = this;\n\n      this.sql = sql;\n      var connection = this.connection,\n          options = this.options; //do we need benchmark for this query execution\n\n      var showWarnings = this.sequelize.options.showWarnings || options.showWarnings;\n\n      var complete = this._logQuery(sql, debug, parameters);\n\n      return new Utils.Promise(function (resolve, reject) {\n        var handler = function handler(err, results) {\n          complete();\n\n          if (err) {\n            // MySQL automatically rolls-back transactions in the event of a deadlock\n            if (options.transaction && err.errno === 1213) {\n              options.transaction.finished = 'rollback';\n            }\n\n            err.sql = sql;\n            err.parameters = parameters;\n            reject(_this.formatError(err));\n          } else {\n            resolve(results);\n          }\n        };\n\n        if (parameters) {\n          debug('parameters(%j)', parameters);\n          connection.execute(sql, parameters, handler).setMaxListeners(100);\n        } else {\n          connection.query({\n            sql: sql\n          }, handler).setMaxListeners(100);\n        }\n      }) // Log warnings if we've got them.\n      .then(function (results) {\n        if (showWarnings && results && results.warningStatus > 0) {\n          return _this.logWarnings(results);\n        }\n\n        return results;\n      }) // Return formatted results...\n      .then(function (results) {\n        return _this.formatResults(results);\n      });\n    }\n    /**\n     * High level function that handles the results of a query execution.\n     *\n     *\n     * Example:\n     *  query.formatResults([\n     *    {\n     *      id: 1,              // this is from the main table\n     *      attr2: 'snafu',     // this is from the main table\n     *      Tasks.id: 1,        // this is from the associated table\n     *      Tasks.title: 'task' // this is from the associated table\n     *    }\n     *  ])\n     *\n     * @param {Array} data - The result of the query execution.\n     * @private\n     */\n\n  }, {\n    key: \"formatResults\",\n    value: function formatResults(data) {\n      var result = this.instance;\n\n      if (this.isInsertQuery(data)) {\n        this.handleInsertQuery(data);\n\n        if (!this.instance) {\n          // handle bulkCreate AI primiary key\n          if (data.constructor.name === 'ResultSetHeader' && this.model && this.model.autoIncrementAttribute && this.model.autoIncrementAttribute === this.model.primaryKeyAttribute && this.model.rawAttributes[this.model.primaryKeyAttribute]) {\n            var startId = data[this.getInsertIdField()];\n            result = [];\n\n            for (var i = startId; i < startId + data.affectedRows; i++) {\n              result.push(_defineProperty({}, this.model.rawAttributes[this.model.primaryKeyAttribute].field, i));\n            }\n          } else {\n            result = data[this.getInsertIdField()];\n          }\n        }\n      }\n\n      if (this.isSelectQuery()) {\n        return this.handleSelectQuery(data);\n      }\n\n      if (this.isShowTablesQuery()) {\n        return this.handleShowTablesQuery(data);\n      }\n\n      if (this.isDescribeQuery()) {\n        result = {};\n\n        var _iterator = _createForOfIteratorHelper(data),\n            _step;\n\n        try {\n          for (_iterator.s(); !(_step = _iterator.n()).done;) {\n            var _result = _step.value;\n            var enumRegex = /^enum/i;\n            result[_result.Field] = {\n              type: enumRegex.test(_result.Type) ? _result.Type.replace(enumRegex, 'ENUM') : _result.Type.toUpperCase(),\n              allowNull: _result.Null === 'YES',\n              defaultValue: _result.Default,\n              primaryKey: _result.Key === 'PRI',\n              autoIncrement: Object.prototype.hasOwnProperty.call(_result, 'Extra') && _result.Extra.toLowerCase() === 'auto_increment',\n              comment: _result.Comment ? _result.Comment : null\n            };\n          }\n        } catch (err) {\n          _iterator.e(err);\n        } finally {\n          _iterator.f();\n        }\n\n        return result;\n      }\n\n      if (this.isShowIndexesQuery()) {\n        return this.handleShowIndexesQuery(data);\n      }\n\n      if (this.isCallQuery()) {\n        return data[0];\n      }\n\n      if (this.isBulkUpdateQuery() || this.isBulkDeleteQuery() || this.isUpsertQuery()) {\n        return data.affectedRows;\n      }\n\n      if (this.isVersionQuery()) {\n        return data[0].version;\n      }\n\n      if (this.isForeignKeysQuery()) {\n        return data;\n      }\n\n      if (this.isInsertQuery() || this.isUpdateQuery()) {\n        return [result, data.affectedRows];\n      }\n\n      if (this.isShowConstraintsQuery()) {\n        return data;\n      }\n\n      if (this.isRawQuery()) {\n        // MySQL returns row data and metadata (affected rows etc) in a single object - let's standarize it, sorta\n        return [data, data];\n      }\n\n      return result;\n    }\n  }, {\n    key: \"logWarnings\",\n    value: function logWarnings(results) {\n      var _this2 = this;\n\n      return this.run('SHOW WARNINGS').then(function (warningResults) {\n        var warningMessage = \"MySQL Warnings (\".concat(_this2.connection.uuid || 'default', \"): \");\n        var messages = [];\n\n        var _iterator2 = _createForOfIteratorHelper(warningResults),\n            _step2;\n\n        try {\n          for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n            var _warningRow = _step2.value;\n            if (_warningRow === undefined || typeof _warningRow[Symbol.iterator] !== 'function') continue;\n\n            var _iterator3 = _createForOfIteratorHelper(_warningRow),\n                _step3;\n\n            try {\n              for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {\n                var _warningResult = _step3.value;\n\n                if (Object.prototype.hasOwnProperty.call(_warningResult, 'Message')) {\n                  messages.push(_warningResult.Message);\n                } else {\n                  var _iterator4 = _createForOfIteratorHelper(_warningResult.keys()),\n                      _step4;\n\n                  try {\n                    for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {\n                      var _objectKey = _step4.value;\n                      messages.push([_objectKey, _warningResult[_objectKey]].join(': '));\n                    }\n                  } catch (err) {\n                    _iterator4.e(err);\n                  } finally {\n                    _iterator4.f();\n                  }\n                }\n              }\n            } catch (err) {\n              _iterator3.e(err);\n            } finally {\n              _iterator3.f();\n            }\n          }\n        } catch (err) {\n          _iterator2.e(err);\n        } finally {\n          _iterator2.f();\n        }\n\n        _this2.sequelize.log(warningMessage + messages.join('; '), _this2.options);\n\n        return results;\n      });\n    }\n  }, {\n    key: \"formatError\",\n    value: function formatError(err) {\n      var _this3 = this;\n\n      var errCode = err.errno || err.code;\n\n      switch (errCode) {\n        case 1062:\n          {\n            var match = err.message.match(/Duplicate entry '([\\s\\S]*)' for key '?((.|\\s)*?)'?$/);\n            var fields = {};\n            var message = 'Validation error';\n            var values = match ? match[1].split('-') : undefined;\n            var fieldKey = match ? match[2] : undefined;\n            var fieldVal = match ? match[1] : undefined;\n            var uniqueKey = this.model && this.model.uniqueKeys[fieldKey];\n\n            if (uniqueKey) {\n              if (uniqueKey.msg) message = uniqueKey.msg;\n              fields = _.zipObject(uniqueKey.fields, values);\n            } else {\n              fields[fieldKey] = fieldVal;\n            }\n\n            var errors = [];\n\n            _.forOwn(fields, function (value, field) {\n              errors.push(new sequelizeErrors.ValidationErrorItem(_this3.getUniqueConstraintErrorMessage(field), 'unique violation', // sequelizeErrors.ValidationErrorItem.Origins.DB,\n              field, value, _this3.instance, 'not_unique'));\n            });\n\n            return new sequelizeErrors.UniqueConstraintError({\n              message: message,\n              errors: errors,\n              parent: err,\n              fields: fields\n            });\n          }\n\n        case 1451:\n        case 1452:\n          {\n            // e.g. CONSTRAINT `example_constraint_name` FOREIGN KEY (`example_id`) REFERENCES `examples` (`id`)\n            var _match = err.message.match(/CONSTRAINT ([`\"])(.*)\\1 FOREIGN KEY \\(\\1(.*)\\1\\) REFERENCES \\1(.*)\\1 \\(\\1(.*)\\1\\)/);\n\n            var quoteChar = _match ? _match[1] : '`';\n\n            var _fields = _match ? _match[3].split(new RegExp(\"\".concat(quoteChar, \", *\").concat(quoteChar))) : undefined;\n\n            return new sequelizeErrors.ForeignKeyConstraintError({\n              reltype: String(errCode) === '1451' ? 'parent' : 'child',\n              table: _match ? _match[4] : undefined,\n              fields: _fields,\n              value: _fields && _fields.length && this.instance && this.instance[_fields[0]] || undefined,\n              index: _match ? _match[2] : undefined,\n              parent: err\n            });\n          }\n\n        default:\n          return new sequelizeErrors.DatabaseError(err);\n      }\n    }\n  }, {\n    key: \"handleShowIndexesQuery\",\n    value: function handleShowIndexesQuery(data) {\n      // Group by index name, and collect all fields\n      data = data.reduce(function (acc, item) {\n        if (!(item.Key_name in acc)) {\n          acc[item.Key_name] = item;\n          item.fields = [];\n        }\n\n        acc[item.Key_name].fields[item.Seq_in_index - 1] = {\n          attribute: item.Column_name,\n          length: item.Sub_part || undefined,\n          order: item.Collation === 'A' ? 'ASC' : undefined\n        };\n        delete item.column_name;\n        return acc;\n      }, {});\n      return _.map(data, function (item) {\n        return {\n          primary: item.Key_name === 'PRIMARY',\n          fields: item.fields,\n          name: item.Key_name,\n          tableName: item.Table,\n          unique: item.Non_unique !== 1,\n          type: item.Index_type\n        };\n      });\n    }\n  }], [{\n    key: \"formatBindParameters\",\n    value: function formatBindParameters(sql, values, dialect) {\n      var bindParam = [];\n\n      var replacementFunc = function replacementFunc(match, key, values) {\n        if (values[key] !== undefined) {\n          bindParam.push(values[key]);\n          return '?';\n        }\n\n        return undefined;\n      };\n\n      sql = AbstractQuery.formatBindParameters(sql, values, dialect, replacementFunc)[0];\n      return [sql, bindParam.length > 0 ? bindParam : undefined];\n    }\n  }]);\n\n  return Query;\n}(AbstractQuery);\n\nmodule.exports = Query;\nmodule.exports.Query = Query;\nmodule.exports.default = Query;","map":null,"metadata":{},"sourceType":"script"}