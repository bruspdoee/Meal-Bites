{"ast":null,"code":"'use strict';\n/**\n Returns an object that treats MSSQL's inabilities to do certain queries.\n\n @class QueryInterface\n @static\n @private\n */\n\n/**\n  A wrapper that fixes MSSQL's inability to cleanly remove columns from existing tables if they have a default constraint.\n\n\n  @param  {QueryInterface} qi\n  @param  {string} tableName     The name of the table.\n  @param  {string} attributeName The name of the attribute that we want to remove.\n  @param  {Object} options\n  @param  {boolean|Function} [options.logging] A function that logs the sql queries, or false for explicitly not logging these queries\n\n  @private\n */\n\nvar _slicedToArray = require(\"/Users/jervisbay/project-tres/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/slicedToArray\");\n\nvar removeColumn = function removeColumn(qi, tableName, attributeName, options) {\n  options = Object.assign({\n    raw: true\n  }, options || {});\n  var findConstraintSql = qi.QueryGenerator.getDefaultConstraintQuery(tableName, attributeName);\n  return qi.sequelize.query(findConstraintSql, options).then(function (_ref) {\n    var _ref2 = _slicedToArray(_ref, 1),\n        results = _ref2[0];\n\n    if (!results.length) {\n      // No default constraint found -- we can cleanly remove the column\n      return;\n    }\n\n    var dropConstraintSql = qi.QueryGenerator.dropConstraintQuery(tableName, results[0].name);\n    return qi.sequelize.query(dropConstraintSql, options);\n  }).then(function () {\n    var findForeignKeySql = qi.QueryGenerator.getForeignKeyQuery(tableName, attributeName);\n    return qi.sequelize.query(findForeignKeySql, options);\n  }).then(function (_ref3) {\n    var _ref4 = _slicedToArray(_ref3, 1),\n        results = _ref4[0];\n\n    if (!results.length) {\n      // No foreign key constraints found, so we can remove the column\n      return;\n    }\n\n    var dropForeignKeySql = qi.QueryGenerator.dropForeignKeyQuery(tableName, results[0].constraint_name);\n    return qi.sequelize.query(dropForeignKeySql, options);\n  }).then(function () {\n    //Check if the current column is a primaryKey\n    var primaryKeyConstraintSql = qi.QueryGenerator.getPrimaryKeyConstraintQuery(tableName, attributeName);\n    return qi.sequelize.query(primaryKeyConstraintSql, options);\n  }).then(function (_ref5) {\n    var _ref6 = _slicedToArray(_ref5, 1),\n        result = _ref6[0];\n\n    if (!result.length) {\n      return;\n    }\n\n    var dropConstraintSql = qi.QueryGenerator.dropConstraintQuery(tableName, result[0].constraintName);\n    return qi.sequelize.query(dropConstraintSql, options);\n  }).then(function () {\n    var removeSql = qi.QueryGenerator.removeColumnQuery(tableName, attributeName);\n    return qi.sequelize.query(removeSql, options);\n  });\n};\n\nmodule.exports = {\n  removeColumn: removeColumn\n};","map":null,"metadata":{},"sourceType":"script"}