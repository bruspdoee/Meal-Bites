{"ast":null,"code":"'use strict';\n\nvar _classCallCheck = require(\"/Users/jervisbay/project-tres/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/Users/jervisbay/project-tres/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\n\nvar _possibleConstructorReturn = require(\"/Users/jervisbay/project-tres/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/possibleConstructorReturn\");\n\nvar _get = require(\"/Users/jervisbay/project-tres/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/get\");\n\nvar _getPrototypeOf = require(\"/Users/jervisbay/project-tres/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/getPrototypeOf\");\n\nvar _inherits = require(\"/Users/jervisbay/project-tres/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/inherits\");\n\nvar wkx = require('wkx');\n\nvar _ = require('lodash');\n\nvar moment = require('moment-timezone');\n\nmodule.exports = function (BaseTypes) {\n  BaseTypes.ABSTRACT.prototype.dialectTypes = 'https://dev.mysql.com/doc/refman/5.7/en/data-types.html';\n  /**\n   * types: [buffer_type, ...]\n   *\n   * @see buffer_type here https://dev.mysql.com/doc/refman/5.7/en/c-api-prepared-statement-type-codes.html\n   * @see hex here https://github.com/sidorares/node-mysql2/blob/master/lib/constants/types.js\n   */\n\n  BaseTypes.DATE.types.mysql = ['DATETIME'];\n  BaseTypes.STRING.types.mysql = ['VAR_STRING'];\n  BaseTypes.CHAR.types.mysql = ['STRING'];\n  BaseTypes.TEXT.types.mysql = ['BLOB'];\n  BaseTypes.TINYINT.types.mysql = ['TINY'];\n  BaseTypes.SMALLINT.types.mysql = ['SHORT'];\n  BaseTypes.MEDIUMINT.types.mysql = ['INT24'];\n  BaseTypes.INTEGER.types.mysql = ['LONG'];\n  BaseTypes.BIGINT.types.mysql = ['LONGLONG'];\n  BaseTypes.FLOAT.types.mysql = ['FLOAT'];\n  BaseTypes.TIME.types.mysql = ['TIME'];\n  BaseTypes.DATEONLY.types.mysql = ['DATE'];\n  BaseTypes.BOOLEAN.types.mysql = ['TINY'];\n  BaseTypes.BLOB.types.mysql = ['TINYBLOB', 'BLOB', 'LONGBLOB'];\n  BaseTypes.DECIMAL.types.mysql = ['NEWDECIMAL'];\n  BaseTypes.UUID.types.mysql = false;\n  BaseTypes.ENUM.types.mysql = false;\n  BaseTypes.REAL.types.mysql = ['DOUBLE'];\n  BaseTypes.DOUBLE.types.mysql = ['DOUBLE'];\n  BaseTypes.GEOMETRY.types.mysql = ['GEOMETRY'];\n  BaseTypes.JSON.types.mysql = ['JSON'];\n\n  var DECIMAL = /*#__PURE__*/function (_BaseTypes$DECIMAL) {\n    _inherits(DECIMAL, _BaseTypes$DECIMAL);\n\n    function DECIMAL() {\n      _classCallCheck(this, DECIMAL);\n\n      return _possibleConstructorReturn(this, _getPrototypeOf(DECIMAL).apply(this, arguments));\n    }\n\n    _createClass(DECIMAL, [{\n      key: \"toSql\",\n      value: function toSql() {\n        var definition = _get(_getPrototypeOf(DECIMAL.prototype), \"toSql\", this).call(this);\n\n        if (this._unsigned) {\n          definition += ' UNSIGNED';\n        }\n\n        if (this._zerofill) {\n          definition += ' ZEROFILL';\n        }\n\n        return definition;\n      }\n    }]);\n\n    return DECIMAL;\n  }(BaseTypes.DECIMAL);\n\n  var DATE = /*#__PURE__*/function (_BaseTypes$DATE) {\n    _inherits(DATE, _BaseTypes$DATE);\n\n    function DATE() {\n      _classCallCheck(this, DATE);\n\n      return _possibleConstructorReturn(this, _getPrototypeOf(DATE).apply(this, arguments));\n    }\n\n    _createClass(DATE, [{\n      key: \"toSql\",\n      value: function toSql() {\n        return this._length ? \"DATETIME(\".concat(this._length, \")\") : 'DATETIME';\n      }\n    }, {\n      key: \"_stringify\",\n      value: function _stringify(date, options) {\n        date = this._applyTimezone(date, options); // Fractional DATETIMEs only supported on MySQL 5.6.4+\n\n        if (this._length) {\n          return date.format('YYYY-MM-DD HH:mm:ss.SSS');\n        }\n\n        return date.format('YYYY-MM-DD HH:mm:ss');\n      }\n    }], [{\n      key: \"parse\",\n      value: function parse(value, options) {\n        value = value.string();\n\n        if (value === null) {\n          return value;\n        }\n\n        if (moment.tz.zone(options.timezone)) {\n          value = moment.tz(value, options.timezone).toDate();\n        } else {\n          value = new Date(\"\".concat(value, \" \").concat(options.timezone));\n        }\n\n        return value;\n      }\n    }]);\n\n    return DATE;\n  }(BaseTypes.DATE);\n\n  var DATEONLY = /*#__PURE__*/function (_BaseTypes$DATEONLY) {\n    _inherits(DATEONLY, _BaseTypes$DATEONLY);\n\n    function DATEONLY() {\n      _classCallCheck(this, DATEONLY);\n\n      return _possibleConstructorReturn(this, _getPrototypeOf(DATEONLY).apply(this, arguments));\n    }\n\n    _createClass(DATEONLY, null, [{\n      key: \"parse\",\n      value: function parse(value) {\n        return value.string();\n      }\n    }]);\n\n    return DATEONLY;\n  }(BaseTypes.DATEONLY);\n\n  var UUID = /*#__PURE__*/function (_BaseTypes$UUID) {\n    _inherits(UUID, _BaseTypes$UUID);\n\n    function UUID() {\n      _classCallCheck(this, UUID);\n\n      return _possibleConstructorReturn(this, _getPrototypeOf(UUID).apply(this, arguments));\n    }\n\n    _createClass(UUID, [{\n      key: \"toSql\",\n      value: function toSql() {\n        return 'CHAR(36) BINARY';\n      }\n    }]);\n\n    return UUID;\n  }(BaseTypes.UUID);\n\n  var SUPPORTED_GEOMETRY_TYPES = ['POINT', 'LINESTRING', 'POLYGON'];\n\n  var GEOMETRY = /*#__PURE__*/function (_BaseTypes$GEOMETRY) {\n    _inherits(GEOMETRY, _BaseTypes$GEOMETRY);\n\n    function GEOMETRY(type, srid) {\n      var _this;\n\n      _classCallCheck(this, GEOMETRY);\n\n      _this = _possibleConstructorReturn(this, _getPrototypeOf(GEOMETRY).call(this, type, srid));\n\n      if (_.isEmpty(_this.type)) {\n        _this.sqlType = _this.key;\n        return _possibleConstructorReturn(_this);\n      }\n\n      if (SUPPORTED_GEOMETRY_TYPES.includes(_this.type)) {\n        _this.sqlType = _this.type;\n        return _possibleConstructorReturn(_this);\n      }\n\n      throw new Error(\"Supported geometry types are: \".concat(SUPPORTED_GEOMETRY_TYPES.join(', ')));\n      return _this;\n    }\n\n    _createClass(GEOMETRY, [{\n      key: \"toSql\",\n      value: function toSql() {\n        return this.sqlType;\n      }\n    }], [{\n      key: \"parse\",\n      value: function parse(value) {\n        value = value.buffer(); // Empty buffer, MySQL doesn't support POINT EMPTY\n        // check, https://dev.mysql.com/worklog/task/?id=2381\n\n        if (!value || value.length === 0) {\n          return null;\n        } // For some reason, discard the first 4 bytes\n\n\n        value = value.slice(4);\n        return wkx.Geometry.parse(value).toGeoJSON({\n          shortCrs: true\n        });\n      }\n    }]);\n\n    return GEOMETRY;\n  }(BaseTypes.GEOMETRY);\n\n  var ENUM = /*#__PURE__*/function (_BaseTypes$ENUM) {\n    _inherits(ENUM, _BaseTypes$ENUM);\n\n    function ENUM() {\n      _classCallCheck(this, ENUM);\n\n      return _possibleConstructorReturn(this, _getPrototypeOf(ENUM).apply(this, arguments));\n    }\n\n    _createClass(ENUM, [{\n      key: \"toSql\",\n      value: function toSql(options) {\n        return \"ENUM(\".concat(this.values.map(function (value) {\n          return options.escape(value);\n        }).join(', '), \")\");\n      }\n    }]);\n\n    return ENUM;\n  }(BaseTypes.ENUM);\n\n  var JSONTYPE = /*#__PURE__*/function (_BaseTypes$JSON) {\n    _inherits(JSONTYPE, _BaseTypes$JSON);\n\n    function JSONTYPE() {\n      _classCallCheck(this, JSONTYPE);\n\n      return _possibleConstructorReturn(this, _getPrototypeOf(JSONTYPE).apply(this, arguments));\n    }\n\n    _createClass(JSONTYPE, [{\n      key: \"_stringify\",\n      value: function _stringify(value, options) {\n        return options.operation === 'where' && typeof value === 'string' ? value : JSON.stringify(value);\n      }\n    }]);\n\n    return JSONTYPE;\n  }(BaseTypes.JSON);\n\n  return {\n    ENUM: ENUM,\n    DATE: DATE,\n    DATEONLY: DATEONLY,\n    UUID: UUID,\n    GEOMETRY: GEOMETRY,\n    DECIMAL: DECIMAL,\n    JSON: JSONTYPE\n  };\n};","map":null,"metadata":{},"sourceType":"script"}