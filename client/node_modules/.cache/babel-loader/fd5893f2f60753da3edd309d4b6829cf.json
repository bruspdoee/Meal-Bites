{"ast":null,"code":"'use strict';\n/**\n * The transaction object is used to identify a running transaction.\n * It is created by calling `Sequelize.transaction()`.\n * To run a query under a transaction, you should pass the transaction in the options object.\n *\n * @class Transaction\n * @see {@link Sequelize.transaction}\n */\n\nvar _regeneratorRuntime = require(\"/Users/jervisbay/project-tres/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\");\n\nvar _asyncToGenerator = require(\"/Users/jervisbay/project-tres/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/asyncToGenerator\");\n\nvar _objectSpread = require(\"/Users/jervisbay/project-tres/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/objectSpread\");\n\nvar _classCallCheck = require(\"/Users/jervisbay/project-tres/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/Users/jervisbay/project-tres/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\n\nfunction _createForOfIteratorHelper(o, allowArrayLike) { var it; if (typeof Symbol === \"undefined\" || o[Symbol.iterator] == null) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = o[Symbol.iterator](); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nvar Transaction = /*#__PURE__*/function () {\n  /**\n   * Creates a new transaction instance\n   *\n   * @param {Sequelize} sequelize A configured sequelize Instance\n   * @param {object} options An object with options\n   * @param {string} [options.type] Sets the type of the transaction. Sqlite only\n   * @param {string} [options.isolationLevel] Sets the isolation level of the transaction.\n   * @param {string} [options.deferrable] Sets the constraints to be deferred or immediately checked. PostgreSQL only\n   */\n  function Transaction(sequelize, options) {\n    _classCallCheck(this, Transaction);\n\n    this.sequelize = sequelize;\n    this.savepoints = [];\n    this._afterCommitHooks = []; // get dialect specific transaction options\n\n    var generateTransactionId = this.sequelize.dialect.queryGenerator.generateTransactionId;\n    this.options = _objectSpread({\n      type: sequelize.options.transactionType,\n      isolationLevel: sequelize.options.isolationLevel,\n      readOnly: false\n    }, options);\n    this.parent = this.options.transaction;\n\n    if (this.parent) {\n      this.id = this.parent.id;\n      this.parent.savepoints.push(this);\n      this.name = \"\".concat(this.id, \"-sp-\").concat(this.parent.savepoints.length);\n    } else {\n      this.id = this.name = generateTransactionId();\n    }\n\n    delete this.options.transaction;\n  }\n  /**\n   * Commit the transaction\n   *\n   * @returns {Promise}\n   */\n\n\n  _createClass(Transaction, [{\n    key: \"commit\",\n    value: function () {\n      var _commit = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n        var _iterator, _step, hook;\n\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                if (!this.finished) {\n                  _context.next = 2;\n                  break;\n                }\n\n                throw new Error(\"Transaction cannot be committed because it has been finished with state: \".concat(this.finished));\n\n              case 2:\n                this._clearCls();\n\n                _context.prev = 3;\n                _context.next = 6;\n                return this.sequelize.getQueryInterface().commitTransaction(this, this.options);\n\n              case 6:\n                return _context.abrupt(\"return\", _context.sent);\n\n              case 7:\n                _context.prev = 7;\n                this.finished = 'commit';\n\n                if (!this.parent) {\n                  this.cleanup();\n                }\n\n                _iterator = _createForOfIteratorHelper(this._afterCommitHooks);\n                _context.prev = 11;\n\n                _iterator.s();\n\n              case 13:\n                if ((_step = _iterator.n()).done) {\n                  _context.next = 19;\n                  break;\n                }\n\n                hook = _step.value;\n                _context.next = 17;\n                return hook.apply(this, [this]);\n\n              case 17:\n                _context.next = 13;\n                break;\n\n              case 19:\n                _context.next = 24;\n                break;\n\n              case 21:\n                _context.prev = 21;\n                _context.t0 = _context[\"catch\"](11);\n\n                _iterator.e(_context.t0);\n\n              case 24:\n                _context.prev = 24;\n\n                _iterator.f();\n\n                return _context.finish(24);\n\n              case 27:\n                return _context.finish(7);\n\n              case 28:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this, [[3,, 7, 28], [11, 21, 24, 27]]);\n      }));\n\n      function commit() {\n        return _commit.apply(this, arguments);\n      }\n\n      return commit;\n    }()\n    /**\n     * Rollback (abort) the transaction\n     *\n     * @returns {Promise}\n     */\n\n  }, {\n    key: \"rollback\",\n    value: function () {\n      var _rollback = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                if (!this.finished) {\n                  _context2.next = 2;\n                  break;\n                }\n\n                throw new Error(\"Transaction cannot be rolled back because it has been finished with state: \".concat(this.finished));\n\n              case 2:\n                if (this.connection) {\n                  _context2.next = 4;\n                  break;\n                }\n\n                throw new Error('Transaction cannot be rolled back because it never started');\n\n              case 4:\n                this._clearCls();\n\n                _context2.prev = 5;\n                _context2.next = 8;\n                return this.sequelize.getQueryInterface().rollbackTransaction(this, this.options);\n\n              case 8:\n                return _context2.abrupt(\"return\", _context2.sent);\n\n              case 9:\n                _context2.prev = 9;\n\n                if (!this.parent) {\n                  this.cleanup();\n                }\n\n                return _context2.finish(9);\n\n              case 12:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this, [[5,, 9, 12]]);\n      }));\n\n      function rollback() {\n        return _rollback.apply(this, arguments);\n      }\n\n      return rollback;\n    }()\n  }, {\n    key: \"prepareEnvironment\",\n    value: function () {\n      var _prepareEnvironment = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3(useCLS) {\n        var connectionPromise, acquireOptions, result, connection;\n        return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                if (useCLS === undefined) {\n                  useCLS = true;\n                }\n\n                if (this.parent) {\n                  connectionPromise = Promise.resolve(this.parent.connection);\n                } else {\n                  acquireOptions = {\n                    uuid: this.id\n                  };\n\n                  if (this.options.readOnly) {\n                    acquireOptions.type = 'SELECT';\n                  }\n\n                  connectionPromise = this.sequelize.connectionManager.getConnection(acquireOptions);\n                }\n\n                _context3.next = 4;\n                return connectionPromise;\n\n              case 4:\n                connection = _context3.sent;\n                this.connection = connection;\n                this.connection.uuid = this.id;\n                _context3.prev = 7;\n                _context3.next = 10;\n                return this.begin();\n\n              case 10:\n                _context3.next = 12;\n                return this.setDeferrable();\n\n              case 12:\n                result = _context3.sent;\n                _context3.next = 24;\n                break;\n\n              case 15:\n                _context3.prev = 15;\n                _context3.t0 = _context3[\"catch\"](7);\n                _context3.prev = 17;\n                _context3.next = 20;\n                return this.rollback();\n\n              case 20:\n                result = _context3.sent;\n\n              case 21:\n                _context3.prev = 21;\n                throw _context3.t0;\n\n              case 24:\n                if (useCLS && this.sequelize.constructor._cls) {\n                  this.sequelize.constructor._cls.set('transaction', this);\n                }\n\n                return _context3.abrupt(\"return\", result);\n\n              case 26:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this, [[7, 15], [17,, 21, 24]]);\n      }));\n\n      function prepareEnvironment(_x) {\n        return _prepareEnvironment.apply(this, arguments);\n      }\n\n      return prepareEnvironment;\n    }()\n  }, {\n    key: \"setDeferrable\",\n    value: function () {\n      var _setDeferrable = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee4() {\n        return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                if (!this.options.deferrable) {\n                  _context4.next = 4;\n                  break;\n                }\n\n                _context4.next = 3;\n                return this.sequelize.getQueryInterface().deferConstraints(this, this.options);\n\n              case 3:\n                return _context4.abrupt(\"return\", _context4.sent);\n\n              case 4:\n              case \"end\":\n                return _context4.stop();\n            }\n          }\n        }, _callee4, this);\n      }));\n\n      function setDeferrable() {\n        return _setDeferrable.apply(this, arguments);\n      }\n\n      return setDeferrable;\n    }()\n  }, {\n    key: \"begin\",\n    value: function () {\n      var _begin = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee5() {\n        var queryInterface;\n        return _regeneratorRuntime.wrap(function _callee5$(_context5) {\n          while (1) {\n            switch (_context5.prev = _context5.next) {\n              case 0:\n                queryInterface = this.sequelize.getQueryInterface();\n\n                if (!this.sequelize.dialect.supports.settingIsolationLevelDuringTransaction) {\n                  _context5.next = 5;\n                  break;\n                }\n\n                _context5.next = 4;\n                return queryInterface.startTransaction(this, this.options);\n\n              case 4:\n                return _context5.abrupt(\"return\", queryInterface.setIsolationLevel(this, this.options.isolationLevel, this.options));\n\n              case 5:\n                _context5.next = 7;\n                return queryInterface.setIsolationLevel(this, this.options.isolationLevel, this.options);\n\n              case 7:\n                return _context5.abrupt(\"return\", queryInterface.startTransaction(this, this.options));\n\n              case 8:\n              case \"end\":\n                return _context5.stop();\n            }\n          }\n        }, _callee5, this);\n      }));\n\n      function begin() {\n        return _begin.apply(this, arguments);\n      }\n\n      return begin;\n    }()\n  }, {\n    key: \"cleanup\",\n    value: function cleanup() {\n      var res = this.sequelize.connectionManager.releaseConnection(this.connection);\n      this.connection.uuid = undefined;\n      return res;\n    }\n  }, {\n    key: \"_clearCls\",\n    value: function _clearCls() {\n      var cls = this.sequelize.constructor._cls;\n\n      if (cls) {\n        if (cls.get('transaction') === this) {\n          cls.set('transaction', null);\n        }\n      }\n    }\n    /**\n     * A hook that is run after a transaction is committed\n     *\n     * @param {Function} fn   A callback function that is called with the committed transaction\n     * @name afterCommit\n     * @memberof Sequelize.Transaction\n     */\n\n  }, {\n    key: \"afterCommit\",\n    value: function afterCommit(fn) {\n      if (!fn || typeof fn !== 'function') {\n        throw new Error('\"fn\" must be a function');\n      }\n\n      this._afterCommitHooks.push(fn);\n    }\n    /**\n     * Types can be set per-transaction by passing `options.type` to `sequelize.transaction`.\n     * Default to `DEFERRED` but you can override the default type by passing `options.transactionType` in `new Sequelize`.\n     * Sqlite only.\n     *\n     * Pass in the desired level as the first argument:\n     *\n     * @example\n     * try {\n     *   await sequelize.transaction({ type: Sequelize.Transaction.TYPES.EXCLUSIVE }, transaction => {\n     *      // your transactions\n     *   });\n     *   // transaction has been committed. Do something after the commit if required.\n     * } catch(err) {\n     *   // do something with the err.\n     * }\n     *\n     * @property DEFERRED\n     * @property IMMEDIATE\n     * @property EXCLUSIVE\n     */\n\n  }, {\n    key: \"LOCK\",\n\n    /**\n     * Please see {@link Transaction.LOCK}\n     */\n    get: function get() {\n      return Transaction.LOCK;\n    }\n  }], [{\n    key: \"TYPES\",\n    get: function get() {\n      return {\n        DEFERRED: 'DEFERRED',\n        IMMEDIATE: 'IMMEDIATE',\n        EXCLUSIVE: 'EXCLUSIVE'\n      };\n    }\n    /**\n     * Isolation levels can be set per-transaction by passing `options.isolationLevel` to `sequelize.transaction`.\n     * Sequelize uses the default isolation level of the database, you can override this by passing `options.isolationLevel` in Sequelize constructor options.\n     *\n     * Pass in the desired level as the first argument:\n     *\n     * @example\n     * try {\n     *   const result = await sequelize.transaction({isolationLevel: Sequelize.Transaction.ISOLATION_LEVELS.SERIALIZABLE}, transaction => {\n     *     // your transactions\n     *   });\n     *   // transaction has been committed. Do something after the commit if required.\n     * } catch(err) {\n     *   // do something with the err.\n     * }\n     *\n     * @property READ_UNCOMMITTED\n     * @property READ_COMMITTED\n     * @property REPEATABLE_READ\n     * @property SERIALIZABLE\n     */\n\n  }, {\n    key: \"ISOLATION_LEVELS\",\n    get: function get() {\n      return {\n        READ_UNCOMMITTED: 'READ UNCOMMITTED',\n        READ_COMMITTED: 'READ COMMITTED',\n        REPEATABLE_READ: 'REPEATABLE READ',\n        SERIALIZABLE: 'SERIALIZABLE'\n      };\n    }\n    /**\n     * Possible options for row locking. Used in conjunction with `find` calls:\n     *\n     * @example\n     * // t1 is a transaction\n     * Model.findAll({\n     *   where: ...,\n     *   transaction: t1,\n     *   lock: t1.LOCK...\n     * });\n     *\n     * @example <caption>Postgres also supports specific locks while eager loading by using OF:</caption>\n     * UserModel.findAll({\n     *   where: ...,\n     *   include: [TaskModel, ...],\n     *   transaction: t1,\n     *   lock: {\n     *     level: t1.LOCK...,\n     *     of: UserModel\n     *   }\n     * });\n     *\n     * # UserModel will be locked but TaskModel won't!\n     *\n     * @example <caption>You can also skip locked rows:</caption>\n     * // t1 is a transaction\n     * Model.findAll({\n     *   where: ...,\n     *   transaction: t1,\n     *   lock: true,\n     *   skipLocked: true\n     * });\n     * # The query will now return any rows that aren't locked by another transaction\n     *\n     * @returns {object}\n     * @property UPDATE\n     * @property SHARE\n     * @property KEY_SHARE Postgres 9.3+ only\n     * @property NO_KEY_UPDATE Postgres 9.3+ only\n     */\n\n  }, {\n    key: \"LOCK\",\n    get: function get() {\n      return {\n        UPDATE: 'UPDATE',\n        SHARE: 'SHARE',\n        KEY_SHARE: 'KEY SHARE',\n        NO_KEY_UPDATE: 'NO KEY UPDATE'\n      };\n    }\n  }]);\n\n  return Transaction;\n}();\n\nmodule.exports = Transaction;\nmodule.exports.Transaction = Transaction;\nmodule.exports.default = Transaction;","map":null,"metadata":{},"sourceType":"script"}