{"ast":null,"code":"'use strict';\n\nvar _regeneratorRuntime = require(\"/Users/jervisbay/project-tres/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\");\n\nvar _asyncToGenerator = require(\"/Users/jervisbay/project-tres/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/asyncToGenerator\");\n\nvar _defineProperty = require(\"/Users/jervisbay/project-tres/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/defineProperty\");\n\nvar _objectSpread = require(\"/Users/jervisbay/project-tres/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/objectSpread\");\n\nvar _classCallCheck = require(\"/Users/jervisbay/project-tres/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/Users/jervisbay/project-tres/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\n\nvar _possibleConstructorReturn = require(\"/Users/jervisbay/project-tres/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/possibleConstructorReturn\");\n\nvar _getPrototypeOf = require(\"/Users/jervisbay/project-tres/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/getPrototypeOf\");\n\nvar _inherits = require(\"/Users/jervisbay/project-tres/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/inherits\");\n\nfunction _createForOfIteratorHelper(o, allowArrayLike) { var it; if (typeof Symbol === \"undefined\" || o[Symbol.iterator] == null) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = o[Symbol.iterator](); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nvar Utils = require('./../utils');\n\nvar Helpers = require('./helpers');\n\nvar _ = require('lodash');\n\nvar Association = require('./base');\n\nvar Op = require('../operators');\n/**\n * One-to-one association\n *\n * In the API reference below, add the name of the association to the method, e.g. for `User.hasOne(Project)` the getter will be `user.getProject()`.\n * This is almost the same as `belongsTo` with one exception - The foreign key will be defined on the target model.\n *\n * @see {@link Model.hasOne}\n */\n\n\nvar HasOne = /*#__PURE__*/function (_Association) {\n  _inherits(HasOne, _Association);\n\n  function HasOne(source, target, options) {\n    var _this;\n\n    _classCallCheck(this, HasOne);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(HasOne).call(this, source, target, options));\n    _this.associationType = 'HasOne';\n    _this.isSingleAssociation = true;\n    _this.foreignKeyAttribute = {};\n\n    if (_this.as) {\n      _this.isAliased = true;\n      _this.options.name = {\n        singular: _this.as\n      };\n    } else {\n      _this.as = _this.target.options.name.singular;\n      _this.options.name = _this.target.options.name;\n    }\n\n    if (_.isObject(_this.options.foreignKey)) {\n      _this.foreignKeyAttribute = _this.options.foreignKey;\n      _this.foreignKey = _this.foreignKeyAttribute.name || _this.foreignKeyAttribute.fieldName;\n    } else if (_this.options.foreignKey) {\n      _this.foreignKey = _this.options.foreignKey;\n    }\n\n    if (!_this.foreignKey) {\n      _this.foreignKey = Utils.camelize([Utils.singularize(_this.options.as || _this.source.name), _this.source.primaryKeyAttribute].join('_'));\n    }\n\n    if (_this.options.sourceKey && !_this.source.rawAttributes[_this.options.sourceKey]) {\n      throw new Error(\"Unknown attribute \\\"\".concat(_this.options.sourceKey, \"\\\" passed as sourceKey, define this attribute on model \\\"\").concat(_this.source.name, \"\\\" first\"));\n    }\n\n    _this.sourceKey = _this.sourceKeyAttribute = _this.options.sourceKey || _this.source.primaryKeyAttribute;\n    _this.sourceKeyField = _this.source.rawAttributes[_this.sourceKey].field || _this.sourceKey;\n    _this.sourceKeyIsPrimary = _this.sourceKey === _this.source.primaryKeyAttribute;\n    _this.associationAccessor = _this.as;\n    _this.options.useHooks = options.useHooks;\n\n    if (_this.target.rawAttributes[_this.foreignKey]) {\n      _this.identifierField = _this.target.rawAttributes[_this.foreignKey].field || _this.foreignKey;\n    } // Get singular name, trying to uppercase the first letter, unless the model forbids it\n\n\n    var singular = _.upperFirst(_this.options.name.singular);\n\n    _this.accessors = {\n      get: \"get\".concat(singular),\n      set: \"set\".concat(singular),\n      create: \"create\".concat(singular)\n    };\n    return _this;\n  } // the id is in the target table\n\n\n  _createClass(HasOne, [{\n    key: \"_injectAttributes\",\n    value: function _injectAttributes() {\n      var newAttributes = _defineProperty({}, this.foreignKey, _objectSpread({\n        type: this.options.keyType || this.source.rawAttributes[this.sourceKey].type,\n        allowNull: true\n      }, this.foreignKeyAttribute));\n\n      if (this.options.constraints !== false) {\n        var target = this.target.rawAttributes[this.foreignKey] || newAttributes[this.foreignKey];\n        this.options.onDelete = this.options.onDelete || (target.allowNull ? 'SET NULL' : 'CASCADE');\n        this.options.onUpdate = this.options.onUpdate || 'CASCADE';\n      }\n\n      Helpers.addForeignKeyConstraints(newAttributes[this.foreignKey], this.source, this.target, this.options, this.sourceKeyField);\n      Utils.mergeDefaults(this.target.rawAttributes, newAttributes);\n      this.target.refreshAttributes();\n      this.identifierField = this.target.rawAttributes[this.foreignKey].field || this.foreignKey;\n      Helpers.checkNamingCollision(this);\n      return this;\n    }\n  }, {\n    key: \"mixin\",\n    value: function mixin(obj) {\n      var methods = ['get', 'set', 'create'];\n      Helpers.mixinMethods(this, obj, methods);\n    }\n    /**\n     * Get the associated instance.\n     *\n     * @param {Model|Array<Model>} instances source instances\n     * @param {object}         [options] find options\n     * @param {string|boolean} [options.scope] Apply a scope on the related model, or remove its default scope by passing false\n     * @param {string} [options.schema] Apply a schema on the related model\n     *\n     * @see\n     * {@link Model.findOne} for a full explanation of options\n     *\n     * @returns {Promise<Model>}\n     */\n\n  }, {\n    key: \"get\",\n    value: function () {\n      var _get = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(instances, options) {\n        var _this2 = this;\n\n        var where, Target, instance, results, result, _iterator, _step, _instance, _iterator2, _step2, _instance2;\n\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                where = {};\n                Target = this.target;\n                options = Utils.cloneDeep(options);\n\n                if (Object.prototype.hasOwnProperty.call(options, 'scope')) {\n                  if (!options.scope) {\n                    Target = Target.unscoped();\n                  } else {\n                    Target = Target.scope(options.scope);\n                  }\n                }\n\n                if (Object.prototype.hasOwnProperty.call(options, 'schema')) {\n                  Target = Target.schema(options.schema, options.schemaDelimiter);\n                }\n\n                if (!Array.isArray(instances)) {\n                  instance = instances;\n                  instances = undefined;\n                }\n\n                if (instances) {\n                  where[this.foreignKey] = _defineProperty({}, Op.in, instances.map(function (_instance) {\n                    return _instance.get(_this2.sourceKey);\n                  }));\n                } else {\n                  where[this.foreignKey] = instance.get(this.sourceKey);\n                }\n\n                if (this.scope) {\n                  Object.assign(where, this.scope);\n                }\n\n                options.where = options.where ? _defineProperty({}, Op.and, [where, options.where]) : where;\n\n                if (!instances) {\n                  _context.next = 19;\n                  break;\n                }\n\n                _context.next = 12;\n                return Target.findAll(options);\n\n              case 12:\n                results = _context.sent;\n                result = {};\n                _iterator = _createForOfIteratorHelper(instances);\n\n                try {\n                  for (_iterator.s(); !(_step = _iterator.n()).done;) {\n                    _instance = _step.value;\n                    result[_instance.get(this.sourceKey, {\n                      raw: true\n                    })] = null;\n                  }\n                } catch (err) {\n                  _iterator.e(err);\n                } finally {\n                  _iterator.f();\n                }\n\n                _iterator2 = _createForOfIteratorHelper(results);\n\n                try {\n                  for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n                    _instance2 = _step2.value;\n                    result[_instance2.get(this.foreignKey, {\n                      raw: true\n                    })] = _instance2;\n                  }\n                } catch (err) {\n                  _iterator2.e(err);\n                } finally {\n                  _iterator2.f();\n                }\n\n                return _context.abrupt(\"return\", result);\n\n              case 19:\n                return _context.abrupt(\"return\", Target.findOne(options));\n\n              case 20:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function get(_x, _x2) {\n        return _get.apply(this, arguments);\n      }\n\n      return get;\n    }()\n    /**\n     * Set the associated model.\n     *\n     * @param {Model} sourceInstance the source instance\n     * @param {?<Model>|string|number} [associatedInstance] An persisted instance or the primary key of an instance to associate with this. Pass `null` or `undefined` to remove the association.\n     * @param {object} [options] Options passed to getAssociation and `target.save`\n     *\n     * @returns {Promise}\n     */\n\n  }, {\n    key: \"set\",\n    value: function () {\n      var _set = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(sourceInstance, associatedInstance, options) {\n        var oldInstance, alreadyAssociated, tmpInstance;\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                options = _objectSpread({}, options, {\n                  scope: false\n                });\n                _context2.next = 3;\n                return sourceInstance[this.accessors.get](options);\n\n              case 3:\n                oldInstance = _context2.sent;\n                // TODO Use equals method once #5605 is resolved\n                alreadyAssociated = oldInstance && associatedInstance && this.target.primaryKeyAttributes.every(function (attribute) {\n                  return oldInstance.get(attribute, {\n                    raw: true\n                  }) === (associatedInstance.get ? associatedInstance.get(attribute, {\n                    raw: true\n                  }) : associatedInstance);\n                });\n\n                if (!(oldInstance && !alreadyAssociated)) {\n                  _context2.next = 9;\n                  break;\n                }\n\n                oldInstance[this.foreignKey] = null;\n                _context2.next = 9;\n                return oldInstance.save(_objectSpread({}, options, {\n                  fields: [this.foreignKey],\n                  allowNull: [this.foreignKey],\n                  association: true\n                }));\n\n              case 9:\n                if (!(associatedInstance && !alreadyAssociated)) {\n                  _context2.next = 14;\n                  break;\n                }\n\n                if (!(associatedInstance instanceof this.target)) {\n                  tmpInstance = {};\n                  tmpInstance[this.target.primaryKeyAttribute] = associatedInstance;\n                  associatedInstance = this.target.build(tmpInstance, {\n                    isNewRecord: false\n                  });\n                }\n\n                Object.assign(associatedInstance, this.scope);\n                associatedInstance.set(this.foreignKey, sourceInstance.get(this.sourceKeyAttribute));\n                return _context2.abrupt(\"return\", associatedInstance.save(options));\n\n              case 14:\n                return _context2.abrupt(\"return\", null);\n\n              case 15:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n\n      function set(_x3, _x4, _x5) {\n        return _set.apply(this, arguments);\n      }\n\n      return set;\n    }()\n    /**\n     * Create a new instance of the associated model and associate it with this.\n     *\n     * @param {Model} sourceInstance the source instance\n     * @param {object} [values={}] values to create associated model instance with\n     * @param {object} [options] Options passed to `target.create` and setAssociation.\n     *\n     * @see\n     * {@link Model#create} for a full explanation of options\n     *\n     * @returns {Promise<Model>} The created target model\n     */\n\n  }, {\n    key: \"create\",\n    value: function () {\n      var _create = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3(sourceInstance, values, options) {\n        var _i, _Object$keys, attribute;\n\n        return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                values = values || {};\n                options = options || {};\n\n                if (this.scope) {\n                  for (_i = 0, _Object$keys = Object.keys(this.scope); _i < _Object$keys.length; _i++) {\n                    attribute = _Object$keys[_i];\n                    values[attribute] = this.scope[attribute];\n\n                    if (options.fields) {\n                      options.fields.push(attribute);\n                    }\n                  }\n                }\n\n                values[this.foreignKey] = sourceInstance.get(this.sourceKeyAttribute);\n\n                if (options.fields) {\n                  options.fields.push(this.foreignKey);\n                }\n\n                _context3.next = 7;\n                return this.target.create(values, options);\n\n              case 7:\n                return _context3.abrupt(\"return\", _context3.sent);\n\n              case 8:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this);\n      }));\n\n      function create(_x6, _x7, _x8) {\n        return _create.apply(this, arguments);\n      }\n\n      return create;\n    }()\n  }, {\n    key: \"verifyAssociationAlias\",\n    value: function verifyAssociationAlias(alias) {\n      if (typeof alias === 'string') {\n        return this.as === alias;\n      }\n\n      if (alias && alias.singular) {\n        return this.as === alias.singular;\n      }\n\n      return !this.isAliased;\n    }\n  }]);\n\n  return HasOne;\n}(Association);\n\nmodule.exports = HasOne;","map":null,"metadata":{},"sourceType":"script"}