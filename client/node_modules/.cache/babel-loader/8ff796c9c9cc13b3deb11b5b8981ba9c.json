{"ast":null,"code":"'use strict';\n\nvar _regeneratorRuntime = require(\"/Users/jervisbay/project-tres/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\");\n\nvar _asyncToGenerator = require(\"/Users/jervisbay/project-tres/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/asyncToGenerator\");\n\nvar _classCallCheck = require(\"/Users/jervisbay/project-tres/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/Users/jervisbay/project-tres/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\n\nvar _possibleConstructorReturn = require(\"/Users/jervisbay/project-tres/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/possibleConstructorReturn\");\n\nvar _getPrototypeOf = require(\"/Users/jervisbay/project-tres/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/getPrototypeOf\");\n\nvar _inherits = require(\"/Users/jervisbay/project-tres/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/inherits\");\n\nfunction _createForOfIteratorHelper(o, allowArrayLike) { var it; if (typeof Symbol === \"undefined\" || o[Symbol.iterator] == null) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = o[Symbol.iterator](); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nvar _ = require('lodash');\n\nvar AbstractConnectionManager = require('../abstract/connection-manager');\n\nvar _require = require('../../utils/logger'),\n    logger = _require.logger;\n\nvar debug = logger.debugContext('connection:pg');\n\nvar sequelizeErrors = require('../../errors');\n\nvar semver = require('semver');\n\nvar dataTypes = require('../../data-types');\n\nvar moment = require('moment-timezone');\n\nvar _require2 = require('util'),\n    promisify = _require2.promisify;\n\nvar ConnectionManager = /*#__PURE__*/function (_AbstractConnectionMa) {\n  _inherits(ConnectionManager, _AbstractConnectionMa);\n\n  function ConnectionManager(dialect, sequelize) {\n    var _this;\n\n    _classCallCheck(this, ConnectionManager);\n\n    sequelize.config.port = sequelize.config.port || 5432;\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(ConnectionManager).call(this, dialect, sequelize));\n\n    var pgLib = _this._loadDialectModule('pg');\n\n    _this.lib = _this.sequelize.config.native ? pgLib.native : pgLib;\n\n    _this._clearDynamicOIDs();\n\n    _this._clearTypeParser();\n\n    _this.refreshTypeParser(dataTypes.postgres);\n\n    return _this;\n  } // Expose this as a method so that the parsing may be updated when the user has added additional, custom types\n\n\n  _createClass(ConnectionManager, [{\n    key: \"_refreshTypeParser\",\n    value: function _refreshTypeParser(dataType) {\n      var _this2 = this;\n\n      var arrayParserBuilder = function arrayParserBuilder(parser) {\n        return function (value) {\n          return _this2.lib.types.arrayParser.create(value, parser).parse();\n        };\n      };\n\n      var rangeParserBuilder = function rangeParserBuilder(parser) {\n        return function (value) {\n          return dataType.parse(value, {\n            parser: parser\n          });\n        };\n      }; // Set range parsers\n\n\n      if (dataType.key.toLowerCase() === 'range') {\n        for (var name in this.nameOidMap) {\n          var entry = this.nameOidMap[name];\n          if (!entry.rangeOid) continue;\n          var rangeParser = rangeParserBuilder(this.getTypeParser(entry.oid));\n          var arrayRangeParser = arrayParserBuilder(rangeParser);\n          this.oidParserMap.set(entry.rangeOid, rangeParser);\n          if (!entry.arrayRangeOid) continue;\n          this.oidParserMap.set(entry.arrayRangeOid, arrayRangeParser);\n        }\n\n        return;\n      } // Create parsers for normal or enum data types\n\n\n      var parser = function parser(value) {\n        return dataType.parse(value);\n      };\n\n      var arrayParser = arrayParserBuilder(parser); // Set enum parsers\n\n      if (dataType.key.toLowerCase() === 'enum') {\n        this.enumOids.oids.forEach(function (oid) {\n          _this2.oidParserMap.set(oid, parser);\n        });\n        this.enumOids.arrayOids.forEach(function (arrayOid) {\n          _this2.oidParserMap.set(arrayOid, arrayParser);\n        });\n        return;\n      } // Set parsers for normal data types\n\n\n      dataType.types.postgres.forEach(function (name) {\n        if (!_this2.nameOidMap[name]) return;\n\n        _this2.oidParserMap.set(_this2.nameOidMap[name].oid, parser);\n\n        if (!_this2.nameOidMap[name].arrayOid) return;\n\n        _this2.oidParserMap.set(_this2.nameOidMap[name].arrayOid, arrayParser);\n      });\n    }\n  }, {\n    key: \"_clearTypeParser\",\n    value: function _clearTypeParser() {\n      this.oidParserMap = new Map();\n    }\n  }, {\n    key: \"getTypeParser\",\n    value: function getTypeParser(oid) {\n      var _this$lib$types;\n\n      if (this.oidParserMap.get(oid)) return this.oidParserMap.get(oid);\n\n      for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n        args[_key - 1] = arguments[_key];\n      }\n\n      return (_this$lib$types = this.lib.types).getTypeParser.apply(_this$lib$types, [oid].concat(args));\n    }\n  }, {\n    key: \"connect\",\n    value: function () {\n      var _connect = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(config) {\n        var _this3 = this;\n\n        var connectionConfig, connection, query, isZone;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                config.user = config.username;\n                connectionConfig = _.pick(config, ['user', 'password', 'host', 'database', 'port']);\n                connectionConfig.types = {\n                  getTypeParser: ConnectionManager.prototype.getTypeParser.bind(this)\n                };\n\n                if (config.dialectOptions) {\n                  _.merge(connectionConfig, _.pick(config.dialectOptions, [// see [http://www.postgresql.org/docs/9.3/static/runtime-config-logging.html#GUC-APPLICATION-NAME]\n                  'application_name', // choose the SSL mode with the PGSSLMODE environment variable\n                  // object format: [https://github.com/brianc/node-postgres/blob/master/lib/connection.js#L79]\n                  // see also [http://www.postgresql.org/docs/9.3/static/libpq-ssl.html]\n                  'ssl', // In addition to the values accepted by the corresponding server,\n                  // you can use \"auto\" to determine the right encoding from the\n                  // current locale in the client (LC_CTYPE environment variable on Unix systems)\n                  'client_encoding', // !! DO NOT SET THIS TO TRUE !!\n                  // (unless you know what you're doing)\n                  // see [http://www.postgresql.org/message-id/flat/bc9549a50706040852u27633f41ib1e6b09f8339d845@mail.gmail.com#bc9549a50706040852u27633f41ib1e6b09f8339d845@mail.gmail.com]\n                  'binary', // This should help with backends incorrectly considering idle clients to be dead and prematurely disconnecting them.\n                  // this feature has been added in pg module v6.0.0, check pg/CHANGELOG.md\n                  'keepAlive', // Times out queries after a set time in milliseconds. Added in pg v7.3\n                  'statement_timeout', // Terminate any session with an open transaction that has been idle for longer than the specified duration in milliseconds. Added in pg v7.17.0 only supported in postgres >= 10\n                  'idle_in_transaction_session_timeout']));\n                }\n\n                _context.next = 6;\n                return new Promise(function (resolve, reject) {\n                  var responded = false;\n                  var connection = new _this3.lib.Client(connectionConfig);\n\n                  var parameterHandler = function parameterHandler(message) {\n                    switch (message.parameterName) {\n                      case 'server_version':\n                        if (_this3.sequelize.options.databaseVersion === 0) {\n                          var version = semver.coerce(message.parameterValue).version;\n                          _this3.sequelize.options.databaseVersion = semver.valid(version) ? version : _this3.dialect.defaultVersion;\n                        }\n\n                        break;\n\n                      case 'standard_conforming_strings':\n                        connection['standard_conforming_strings'] = message.parameterValue;\n                        break;\n                    }\n                  };\n\n                  var endHandler = function endHandler() {\n                    debug('connection timeout');\n\n                    if (!responded) {\n                      reject(new sequelizeErrors.ConnectionTimedOutError(new Error('Connection timed out')));\n                    }\n                  }; // If we didn't ever hear from the client.connect() callback the connection timeout\n                  // node-postgres does not treat this as an error since no active query was ever emitted\n\n\n                  connection.once('end', endHandler);\n\n                  if (!_this3.sequelize.config.native) {\n                    // Receive various server parameters for further configuration\n                    connection.connection.on('parameterStatus', parameterHandler);\n                  }\n\n                  connection.connect(function (err) {\n                    responded = true;\n\n                    if (!_this3.sequelize.config.native) {\n                      // remove parameter handler\n                      connection.connection.removeListener('parameterStatus', parameterHandler);\n                    }\n\n                    if (err) {\n                      if (err.code) {\n                        switch (err.code) {\n                          case 'ECONNREFUSED':\n                            reject(new sequelizeErrors.ConnectionRefusedError(err));\n                            break;\n\n                          case 'ENOTFOUND':\n                            reject(new sequelizeErrors.HostNotFoundError(err));\n                            break;\n\n                          case 'EHOSTUNREACH':\n                            reject(new sequelizeErrors.HostNotReachableError(err));\n                            break;\n\n                          case 'EINVAL':\n                            reject(new sequelizeErrors.InvalidConnectionError(err));\n                            break;\n\n                          default:\n                            reject(new sequelizeErrors.ConnectionError(err));\n                            break;\n                        }\n                      } else {\n                        reject(new sequelizeErrors.ConnectionError(err));\n                      }\n                    } else {\n                      debug('connection acquired');\n                      connection.removeListener('end', endHandler);\n                      resolve(connection);\n                    }\n                  });\n                });\n\n              case 6:\n                connection = _context.sent;\n                query = '';\n\n                if (this.sequelize.options.standardConformingStrings !== false && connection['standard_conforming_strings'] !== 'on') {\n                  // Disable escape characters in strings\n                  // see https://github.com/sequelize/sequelize/issues/3545 (security issue)\n                  // see https://www.postgresql.org/docs/current/static/runtime-config-compatible.html#GUC-STANDARD-CONFORMING-STRINGS\n                  query += 'SET standard_conforming_strings=on;';\n                }\n\n                if (this.sequelize.options.clientMinMessages !== false) {\n                  query += \"SET client_min_messages TO \".concat(this.sequelize.options.clientMinMessages, \";\");\n                }\n\n                if (!this.sequelize.config.keepDefaultTimezone) {\n                  isZone = !!moment.tz.zone(this.sequelize.options.timezone);\n\n                  if (isZone) {\n                    query += \"SET TIME ZONE '\".concat(this.sequelize.options.timezone, \"';\");\n                  } else {\n                    query += \"SET TIME ZONE INTERVAL '\".concat(this.sequelize.options.timezone, \"' HOUR TO MINUTE;\");\n                  }\n                }\n\n                if (!query) {\n                  _context.next = 14;\n                  break;\n                }\n\n                _context.next = 14;\n                return connection.query(query);\n\n              case 14:\n                if (!(Object.keys(this.nameOidMap).length === 0 && this.enumOids.oids.length === 0 && this.enumOids.arrayOids.length === 0)) {\n                  _context.next = 17;\n                  break;\n                }\n\n                _context.next = 17;\n                return this._refreshDynamicOIDs(connection);\n\n              case 17:\n                // Don't let a Postgres restart (or error) to take down the whole app\n                connection.on('error', function (error) {\n                  connection._invalid = true;\n                  debug(\"connection error \".concat(error.code || error.message));\n\n                  _this3.pool.destroy(connection);\n                });\n                return _context.abrupt(\"return\", connection);\n\n              case 19:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function connect(_x) {\n        return _connect.apply(this, arguments);\n      }\n\n      return connect;\n    }()\n  }, {\n    key: \"disconnect\",\n    value: function () {\n      var _disconnect = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(connection) {\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                if (!connection._ending) {\n                  _context2.next = 3;\n                  break;\n                }\n\n                debug('connection tried to disconnect but was already at ENDING state');\n                return _context2.abrupt(\"return\");\n\n              case 3:\n                _context2.next = 5;\n                return promisify(function (callback) {\n                  return connection.end(callback);\n                })();\n\n              case 5:\n                return _context2.abrupt(\"return\", _context2.sent);\n\n              case 6:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2);\n      }));\n\n      function disconnect(_x2) {\n        return _disconnect.apply(this, arguments);\n      }\n\n      return disconnect;\n    }()\n  }, {\n    key: \"validate\",\n    value: function validate(connection) {\n      return !connection._invalid && !connection._ending;\n    }\n  }, {\n    key: \"_refreshDynamicOIDs\",\n    value: function () {\n      var _refreshDynamicOIDs2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3(connection) {\n        var databaseVersion, supportedVersion, results, result, newNameOidMap, newEnumOids, _iterator, _step, row;\n\n        return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                databaseVersion = this.sequelize.options.databaseVersion;\n                supportedVersion = '8.3.0'; // Check for supported version\n\n                if (!((databaseVersion && semver.gte(databaseVersion, supportedVersion)) === false)) {\n                  _context3.next = 4;\n                  break;\n                }\n\n                return _context3.abrupt(\"return\");\n\n              case 4:\n                _context3.next = 6;\n                return (connection || this.sequelize).query('WITH ranges AS (' + '  SELECT pg_range.rngtypid, pg_type.typname AS rngtypname,' + '         pg_type.typarray AS rngtyparray, pg_range.rngsubtype' + '    FROM pg_range LEFT OUTER JOIN pg_type ON pg_type.oid = pg_range.rngtypid' + ')' + 'SELECT pg_type.typname, pg_type.typtype, pg_type.oid, pg_type.typarray,' + '       ranges.rngtypname, ranges.rngtypid, ranges.rngtyparray' + '  FROM pg_type LEFT OUTER JOIN ranges ON pg_type.oid = ranges.rngsubtype' + ' WHERE (pg_type.typtype IN(\\'b\\', \\'e\\'));');\n\n              case 6:\n                results = _context3.sent;\n                result = Array.isArray(results) ? results.pop() : results; // When searchPath is prepended then two statements are executed and the result is\n                // an array of those two statements. First one is the SET search_path and second is\n                // the SELECT query result.\n\n                if (Array.isArray(result)) {\n                  if (result[0].command === 'SET') {\n                    result = result.pop();\n                  }\n                }\n\n                newNameOidMap = {};\n                newEnumOids = {\n                  oids: [],\n                  arrayOids: []\n                };\n                _iterator = _createForOfIteratorHelper(result.rows);\n                _context3.prev = 12;\n\n                _iterator.s();\n\n              case 14:\n                if ((_step = _iterator.n()).done) {\n                  _context3.next = 25;\n                  break;\n                }\n\n                row = _step.value;\n\n                if (!(row.typtype === 'e')) {\n                  _context3.next = 20;\n                  break;\n                }\n\n                newEnumOids.oids.push(row.oid);\n                if (row.typarray) newEnumOids.arrayOids.push(row.typarray);\n                return _context3.abrupt(\"continue\", 23);\n\n              case 20:\n                // Mapping base types and their arrays\n                newNameOidMap[row.typname] = {\n                  oid: row.oid\n                };\n                if (row.typarray) newNameOidMap[row.typname].arrayOid = row.typarray; // Mapping ranges(of base types) and their arrays\n\n                if (row.rngtypid) {\n                  newNameOidMap[row.typname].rangeOid = row.rngtypid;\n                  if (row.rngtyparray) newNameOidMap[row.typname].arrayRangeOid = row.rngtyparray;\n                }\n\n              case 23:\n                _context3.next = 14;\n                break;\n\n              case 25:\n                _context3.next = 30;\n                break;\n\n              case 27:\n                _context3.prev = 27;\n                _context3.t0 = _context3[\"catch\"](12);\n\n                _iterator.e(_context3.t0);\n\n              case 30:\n                _context3.prev = 30;\n\n                _iterator.f();\n\n                return _context3.finish(30);\n\n              case 33:\n                // Replace all OID mappings. Avoids temporary empty OID mappings.\n                this.nameOidMap = newNameOidMap;\n                this.enumOids = newEnumOids;\n                this.refreshTypeParser(dataTypes.postgres);\n\n              case 36:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this, [[12, 27, 30, 33]]);\n      }));\n\n      function _refreshDynamicOIDs(_x3) {\n        return _refreshDynamicOIDs2.apply(this, arguments);\n      }\n\n      return _refreshDynamicOIDs;\n    }()\n  }, {\n    key: \"_clearDynamicOIDs\",\n    value: function _clearDynamicOIDs() {\n      this.nameOidMap = {};\n      this.enumOids = {\n        oids: [],\n        arrayOids: []\n      };\n    }\n  }]);\n\n  return ConnectionManager;\n}(AbstractConnectionManager);\n\nmodule.exports = ConnectionManager;\nmodule.exports.ConnectionManager = ConnectionManager;\nmodule.exports.default = ConnectionManager;","map":null,"metadata":{},"sourceType":"script"}