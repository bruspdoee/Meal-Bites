{"ast":null,"code":"'use strict';\n\nvar path = require('path');\n\nvar fs = require('graceful-fs');\n\nvar nal = require('now-and-later');\n\nvar File = require('vinyl');\n\nvar convert = require('convert-source-map');\n\nvar removeBOM = require('remove-bom-buffer');\n\nvar appendBuffer = require('append-buffer');\n\nvar normalizePath = require('normalize-path');\n\nvar urlRegex = /^(https?|webpack(-[^:]+)?):\\/\\//;\n\nfunction isRemoteSource(source) {\n  return source.match(urlRegex);\n}\n\nfunction parse(data) {\n  try {\n    return JSON.parse(removeBOM(data));\n  } catch (err) {// TODO: should this log a debug?\n  }\n}\n\nfunction loadSourceMap(file, state, callback) {\n  // Try to read inline source map\n  state.map = convert.fromSource(state.content);\n\n  if (state.map) {\n    state.map = state.map.toObject(); // Sources in map are relative to the source file\n\n    state.path = file.dirname;\n    state.content = convert.removeComments(state.content); // Remove source map comment from source\n\n    file.contents = new Buffer(state.content, 'utf8');\n    return callback();\n  } // Look for source map comment referencing a source map file\n\n\n  var mapComment = convert.mapFileCommentRegex.exec(state.content);\n  var mapFile;\n\n  if (mapComment) {\n    mapFile = path.resolve(file.dirname, mapComment[1] || mapComment[2]);\n    state.content = convert.removeMapFileComments(state.content); // Remove source map comment from source\n\n    file.contents = new Buffer(state.content, 'utf8');\n  } else {\n    // If no comment try map file with same name as source file\n    mapFile = file.path + '.map';\n  } // Sources in external map are relative to map file\n\n\n  state.path = path.dirname(mapFile);\n  fs.readFile(mapFile, onRead);\n\n  function onRead(err, data) {\n    if (err) {\n      return callback();\n    }\n\n    state.map = parse(data);\n    callback();\n  }\n} // Fix source paths and sourceContent for imported source map\n\n\nfunction fixImportedSourceMap(file, state, callback) {\n  if (!state.map) {\n    return callback();\n  }\n\n  state.map.sourcesContent = state.map.sourcesContent || [];\n  nal.map(state.map.sources, normalizeSourcesAndContent, callback);\n\n  function assignSourcesContent(sourceContent, idx) {\n    state.map.sourcesContent[idx] = sourceContent;\n  }\n\n  function normalizeSourcesAndContent(sourcePath, idx, cb) {\n    var sourceRoot = state.map.sourceRoot || '';\n    var sourceContent = state.map.sourcesContent[idx] || null;\n\n    if (isRemoteSource(sourcePath)) {\n      assignSourcesContent(sourceContent, idx);\n      return cb();\n    }\n\n    if (state.map.sourcesContent[idx]) {\n      return cb();\n    }\n\n    if (sourceRoot && isRemoteSource(sourceRoot)) {\n      assignSourcesContent(sourceContent, idx);\n      return cb();\n    }\n\n    var basePath = path.resolve(file.base, sourceRoot);\n    var absPath = path.resolve(state.path, sourceRoot, sourcePath);\n    var relPath = path.relative(basePath, absPath);\n    var unixRelPath = normalizePath(relPath);\n    state.map.sources[idx] = unixRelPath;\n\n    if (absPath !== file.path) {\n      // Load content from file async\n      return fs.readFile(absPath, onRead);\n    } // If current file: use content\n\n\n    assignSourcesContent(state.content, idx);\n    cb();\n\n    function onRead(err, data) {\n      if (err) {\n        assignSourcesContent(null, idx);\n        return cb();\n      }\n\n      assignSourcesContent(removeBOM(data).toString('utf8'), idx);\n      cb();\n    }\n  }\n}\n\nfunction mapsLoaded(file, state, callback) {\n  if (!state.map) {\n    state.map = {\n      version: 3,\n      names: [],\n      mappings: '',\n      sources: [normalizePath(file.relative)],\n      sourcesContent: [state.content]\n    };\n  }\n\n  state.map.file = normalizePath(file.relative);\n  file.sourceMap = state.map;\n  callback();\n}\n\nfunction addSourceMaps(file, state, callback) {\n  var tasks = [loadSourceMap, fixImportedSourceMap, mapsLoaded];\n\n  function apply(fn, key, cb) {\n    fn(file, state, cb);\n  }\n\n  nal.mapSeries(tasks, apply, done);\n\n  function done() {\n    callback(null, file);\n  }\n}\n/* Write Helpers */\n\n\nfunction createSourceMapFile(opts) {\n  return new File({\n    cwd: opts.cwd,\n    base: opts.base,\n    path: opts.path,\n    contents: new Buffer(JSON.stringify(opts.content)),\n    stat: {\n      isFile: function isFile() {\n        return true;\n      },\n      isDirectory: function isDirectory() {\n        return false;\n      },\n      isBlockDevice: function isBlockDevice() {\n        return false;\n      },\n      isCharacterDevice: function isCharacterDevice() {\n        return false;\n      },\n      isSymbolicLink: function isSymbolicLink() {\n        return false;\n      },\n      isFIFO: function isFIFO() {\n        return false;\n      },\n      isSocket: function isSocket() {\n        return false;\n      }\n    }\n  });\n}\n\nvar needsMultiline = ['.css'];\n\nfunction getCommentOptions(extname) {\n  var opts = {\n    multiline: needsMultiline.indexOf(extname) !== -1\n  };\n  return opts;\n}\n\nfunction writeSourceMaps(file, destPath, callback) {\n  var sourceMapFile;\n  var commentOpts = getCommentOptions(file.extname);\n  var comment;\n\n  if (destPath == null) {\n    // Encode source map into comment\n    comment = convert.fromObject(file.sourceMap).toComment(commentOpts);\n  } else {\n    var mapFile = path.join(destPath, file.relative) + '.map';\n    var sourceMapPath = path.join(file.base, mapFile); // Create new sourcemap File\n\n    sourceMapFile = createSourceMapFile({\n      cwd: file.cwd,\n      base: file.base,\n      path: sourceMapPath,\n      content: file.sourceMap\n    });\n    var sourcemapLocation = path.relative(file.dirname, sourceMapPath);\n    sourcemapLocation = normalizePath(sourcemapLocation);\n    comment = convert.generateMapFileComment(sourcemapLocation, commentOpts);\n  } // Append source map comment\n\n\n  file.contents = appendBuffer(file.contents, comment);\n  callback(null, file, sourceMapFile);\n}\n\nmodule.exports = {\n  addSourceMaps: addSourceMaps,\n  writeSourceMaps: writeSourceMaps\n};","map":null,"metadata":{},"sourceType":"script"}