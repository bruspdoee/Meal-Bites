{"ast":null,"code":"'use strict';\n\nvar _classCallCheck = require(\"/Users/jervisbay/project-tres/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _possibleConstructorReturn = require(\"/Users/jervisbay/project-tres/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/possibleConstructorReturn\");\n\nvar _getPrototypeOf = require(\"/Users/jervisbay/project-tres/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/getPrototypeOf\");\n\nvar _inherits = require(\"/Users/jervisbay/project-tres/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/inherits\");\n\nvar _assertThisInitialized = require(\"/Users/jervisbay/project-tres/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/assertThisInitialized\");\n\nvar _ = require('lodash');\n\nvar AbstractDialect = require('../abstract');\n\nvar ConnectionManager = require('./connection-manager');\n\nvar Query = require('./query');\n\nvar QueryGenerator = require('./query-generator');\n\nvar DataTypes = require('../../data-types').postgres;\n\nvar _require = require('./query-interface'),\n    PostgresQueryInterface = _require.PostgresQueryInterface;\n\nvar PostgresDialect = /*#__PURE__*/function (_AbstractDialect) {\n  _inherits(PostgresDialect, _AbstractDialect);\n\n  function PostgresDialect(sequelize) {\n    var _this;\n\n    _classCallCheck(this, PostgresDialect);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(PostgresDialect).call(this));\n    _this.sequelize = sequelize;\n    _this.connectionManager = new ConnectionManager(_assertThisInitialized(_assertThisInitialized(_this)), sequelize);\n    _this.queryGenerator = new QueryGenerator({\n      _dialect: _assertThisInitialized(_assertThisInitialized(_this)),\n      sequelize: sequelize\n    });\n    _this.queryInterface = new PostgresQueryInterface(sequelize, _this.queryGenerator);\n    return _this;\n  }\n\n  return PostgresDialect;\n}(AbstractDialect);\n\nPostgresDialect.prototype.supports = _.merge(_.cloneDeep(AbstractDialect.prototype.supports), {\n  'DEFAULT VALUES': true,\n  'EXCEPTION': true,\n  'ON DUPLICATE KEY': false,\n  'ORDER NULLS': true,\n  returnValues: {\n    returning: true\n  },\n  bulkDefault: true,\n  schemas: true,\n  lock: true,\n  lockOf: true,\n  lockKey: true,\n  lockOuterJoinFailure: true,\n  skipLocked: true,\n  forShare: 'FOR SHARE',\n  index: {\n    concurrently: true,\n    using: 2,\n    where: true,\n    functionBased: true,\n    operator: true\n  },\n  inserts: {\n    onConflictDoNothing: ' ON CONFLICT DO NOTHING',\n    updateOnDuplicate: ' ON CONFLICT DO UPDATE SET'\n  },\n  NUMERIC: true,\n  ARRAY: true,\n  RANGE: true,\n  GEOMETRY: true,\n  REGEXP: true,\n  GEOGRAPHY: true,\n  JSON: true,\n  JSONB: true,\n  HSTORE: true,\n  deferrableConstraints: true,\n  searchPath: true\n});\nPostgresDialect.prototype.defaultVersion = '9.5.0';\nPostgresDialect.prototype.Query = Query;\nPostgresDialect.prototype.DataTypes = DataTypes;\nPostgresDialect.prototype.name = 'postgres';\nPostgresDialect.prototype.TICK_CHAR = '\"';\nPostgresDialect.prototype.TICK_CHAR_LEFT = PostgresDialect.prototype.TICK_CHAR;\nPostgresDialect.prototype.TICK_CHAR_RIGHT = PostgresDialect.prototype.TICK_CHAR;\nmodule.exports = PostgresDialect;\nmodule.exports.default = PostgresDialect;\nmodule.exports.PostgresDialect = PostgresDialect;","map":null,"metadata":{},"sourceType":"script"}