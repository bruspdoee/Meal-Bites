{"ast":null,"code":"'use strict';\n\nvar _classCallCheck = require(\"/Users/jervisbay/project-tres/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/Users/jervisbay/project-tres/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\n\nvar _possibleConstructorReturn = require(\"/Users/jervisbay/project-tres/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/possibleConstructorReturn\");\n\nvar _get = require(\"/Users/jervisbay/project-tres/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/get\");\n\nvar _getPrototypeOf = require(\"/Users/jervisbay/project-tres/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/getPrototypeOf\");\n\nvar _inherits = require(\"/Users/jervisbay/project-tres/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/inherits\");\n\nvar Connection = require('../index.js').Connection;\n\nvar PoolConnection = /*#__PURE__*/function (_Connection) {\n  _inherits(PoolConnection, _Connection);\n\n  function PoolConnection(pool, options) {\n    var _this;\n\n    _classCallCheck(this, PoolConnection);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(PoolConnection).call(this, options));\n    _this._pool = pool; // When a fatal error occurs the connection's protocol ends, which will cause\n    // the connection to end as well, thus we only need to watch for the end event\n    // and we will be notified of disconnects.\n    // REVIEW: Moved to `once`\n\n    _this.once('end', function () {\n      _this._removeFromPool();\n    });\n\n    _this.once('error', function () {\n      _this._removeFromPool();\n    });\n\n    return _this;\n  }\n\n  _createClass(PoolConnection, [{\n    key: \"release\",\n    value: function release() {\n      if (!this._pool || this._pool._closed) {\n        return;\n      }\n\n      this._pool.releaseConnection(this);\n    }\n  }, {\n    key: \"promise\",\n    value: function promise(promiseImpl) {\n      var PromisePoolConnection = require('../promise').PromisePoolConnection;\n\n      return new PromisePoolConnection(this, promiseImpl);\n    }\n  }, {\n    key: \"end\",\n    value: function end() {\n      var err = new Error('Calling conn.end() to release a pooled connection is ' + 'deprecated. In next version calling conn.end() will be ' + 'restored to default conn.end() behavior. Use ' + 'conn.release() instead.');\n      this.emit('warn', err); // eslint-disable-next-line no-console\n\n      console.warn(err.message);\n      this.release();\n    }\n  }, {\n    key: \"destroy\",\n    value: function destroy() {\n      this._removeFromPool();\n\n      _get(_getPrototypeOf(PoolConnection.prototype), \"destroy\", this).call(this);\n    }\n  }, {\n    key: \"_removeFromPool\",\n    value: function _removeFromPool() {\n      if (!this._pool || this._pool._closed) {\n        return;\n      }\n\n      var pool = this._pool;\n      this._pool = null;\n\n      pool._removeConnection(this);\n    }\n  }]);\n\n  return PoolConnection;\n}(Connection);\n\nPoolConnection.statementKey = Connection.statementKey;\nmodule.exports = PoolConnection; // TODO: Remove this when we are removing PoolConnection#end\n\nPoolConnection.prototype._realEnd = Connection.prototype.end;","map":null,"metadata":{},"sourceType":"script"}