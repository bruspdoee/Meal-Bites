{"ast":null,"code":"'use strict';\n\nvar _regeneratorRuntime = require(\"/Users/jervisbay/project-tres/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\");\n\nvar _objectSpread = require(\"/Users/jervisbay/project-tres/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/objectSpread\");\n\nvar _slicedToArray = require(\"/Users/jervisbay/project-tres/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/slicedToArray\");\n\nvar _asyncToGenerator = require(\"/Users/jervisbay/project-tres/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/asyncToGenerator\");\n\nvar _classCallCheck = require(\"/Users/jervisbay/project-tres/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/Users/jervisbay/project-tres/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\n\nvar _possibleConstructorReturn = require(\"/Users/jervisbay/project-tres/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/possibleConstructorReturn\");\n\nvar _getPrototypeOf = require(\"/Users/jervisbay/project-tres/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/getPrototypeOf\");\n\nvar _inherits = require(\"/Users/jervisbay/project-tres/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/inherits\");\n\nvar sequelizeErrors = require('../../errors');\n\nvar _require = require('../abstract/query-interface'),\n    QueryInterface = _require.QueryInterface;\n\nvar QueryTypes = require('../../query-types');\n/**\n * The interface that Sequelize uses to talk with MySQL/MariaDB database\n */\n\n\nvar MySQLQueryInterface = /*#__PURE__*/function (_QueryInterface) {\n  _inherits(MySQLQueryInterface, _QueryInterface);\n\n  function MySQLQueryInterface() {\n    _classCallCheck(this, MySQLQueryInterface);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(MySQLQueryInterface).apply(this, arguments));\n  }\n\n  _createClass(MySQLQueryInterface, [{\n    key: \"removeColumn\",\n\n    /**\n     * A wrapper that fixes MySQL's inability to cleanly remove columns from existing tables if they have a foreign key constraint.\n     *\n     * @override\n     */\n    value: function () {\n      var _removeColumn = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(tableName, columnName, options) {\n        var _this = this;\n\n        var _yield$this$sequelize, _yield$this$sequelize2, results;\n\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                options = options || {};\n                _context.next = 3;\n                return this.sequelize.query(this.queryGenerator.getForeignKeyQuery(tableName.tableName ? tableName : {\n                  tableName: tableName,\n                  schema: this.sequelize.config.database\n                }, columnName), _objectSpread({\n                  raw: true\n                }, options));\n\n              case 3:\n                _yield$this$sequelize = _context.sent;\n                _yield$this$sequelize2 = _slicedToArray(_yield$this$sequelize, 1);\n                results = _yield$this$sequelize2[0];\n\n                if (!(results.length && results[0].constraint_name !== 'PRIMARY')) {\n                  _context.next = 9;\n                  break;\n                }\n\n                _context.next = 9;\n                return Promise.all(results.map(function (constraint) {\n                  return _this.sequelize.query(_this.queryGenerator.dropForeignKeyQuery(tableName, constraint.constraint_name), _objectSpread({\n                    raw: true\n                  }, options));\n                }));\n\n              case 9:\n                _context.next = 11;\n                return this.sequelize.query(this.queryGenerator.removeColumnQuery(tableName, columnName), _objectSpread({\n                  raw: true\n                }, options));\n\n              case 11:\n                return _context.abrupt(\"return\", _context.sent);\n\n              case 12:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function removeColumn(_x, _x2, _x3) {\n        return _removeColumn.apply(this, arguments);\n      }\n\n      return removeColumn;\n    }()\n    /**\n     * @override\n     */\n\n  }, {\n    key: \"upsert\",\n    value: function () {\n      var _upsert = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(tableName, insertValues, updateValues, where, options) {\n        var model, sql;\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                options = _objectSpread({}, options);\n                options.type = QueryTypes.UPSERT;\n                options.updateOnDuplicate = Object.keys(updateValues);\n                model = options.model;\n                sql = this.queryGenerator.insertQuery(tableName, insertValues, model.rawAttributes, options);\n                _context2.next = 7;\n                return this.sequelize.query(sql, options);\n\n              case 7:\n                return _context2.abrupt(\"return\", _context2.sent);\n\n              case 8:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n\n      function upsert(_x4, _x5, _x6, _x7, _x8) {\n        return _upsert.apply(this, arguments);\n      }\n\n      return upsert;\n    }()\n    /**\n     * @override\n     */\n\n  }, {\n    key: \"removeConstraint\",\n    value: function () {\n      var _removeConstraint = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3(tableName, constraintName, options) {\n        var sql, constraints, constraint, query;\n        return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                sql = this.queryGenerator.showConstraintsQuery(tableName.tableName ? tableName : {\n                  tableName: tableName,\n                  schema: this.sequelize.config.database\n                }, constraintName);\n                _context3.next = 3;\n                return this.sequelize.query(sql, _objectSpread({}, options, {\n                  type: this.sequelize.QueryTypes.SHOWCONSTRAINTS\n                }));\n\n              case 3:\n                constraints = _context3.sent;\n                constraint = constraints[0];\n\n                if (!(!constraint || !constraint.constraintType)) {\n                  _context3.next = 7;\n                  break;\n                }\n\n                throw new sequelizeErrors.UnknownConstraintError({\n                  message: \"Constraint \".concat(constraintName, \" on table \").concat(tableName, \" does not exist\"),\n                  constraint: constraintName,\n                  table: tableName\n                });\n\n              case 7:\n                if (constraint.constraintType === 'FOREIGN KEY') {\n                  query = this.queryGenerator.dropForeignKeyQuery(tableName, constraintName);\n                } else {\n                  query = this.queryGenerator.removeIndexQuery(constraint.tableName, constraint.constraintName);\n                }\n\n                _context3.next = 10;\n                return this.sequelize.query(query, options);\n\n              case 10:\n                return _context3.abrupt(\"return\", _context3.sent);\n\n              case 11:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this);\n      }));\n\n      function removeConstraint(_x9, _x10, _x11) {\n        return _removeConstraint.apply(this, arguments);\n      }\n\n      return removeConstraint;\n    }()\n  }]);\n\n  return MySQLQueryInterface;\n}(QueryInterface);\n\nexports.MySQLQueryInterface = MySQLQueryInterface;","map":null,"metadata":{},"sourceType":"script"}