{"ast":null,"code":"'use strict'; // TODO: rename to OK packet\n// https://dev.mysql.com/doc/internals/en/packet-OK_Packet.html\n\nvar _classCallCheck = require(\"/Users/jervisbay/project-tres/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/Users/jervisbay/project-tres/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\n\nvar Packet = require('./packet.js');\n\nvar ClientConstants = require('../constants/client.js');\n\nvar ServerSatusFlags = require('../constants/server_status.js');\n\nvar EncodingToCharset = require('../constants/encoding_charset.js');\n\nvar ResultSetHeader = /*#__PURE__*/function () {\n  function ResultSetHeader(packet, connection) {\n    _classCallCheck(this, ResultSetHeader);\n\n    var bigNumberStrings = connection.config.bigNumberStrings;\n    var encoding = connection.serverEncoding;\n    var flags = connection._handshakePacket.capabilityFlags;\n\n    var isSet = function isSet(flag) {\n      return flags & ClientConstants[flag];\n    };\n\n    if (packet.buffer[packet.offset] !== 0) {\n      this.fieldCount = packet.readLengthCodedNumber();\n\n      if (this.fieldCount === null) {\n        this.infileName = packet.readString(undefined, encoding);\n      }\n\n      return;\n    }\n\n    this.fieldCount = packet.readInt8(); // skip OK byte\n\n    this.affectedRows = packet.readLengthCodedNumber(bigNumberStrings);\n    this.insertId = packet.readLengthCodedNumberSigned(bigNumberStrings);\n    this.info = '';\n\n    if (isSet('PROTOCOL_41')) {\n      this.serverStatus = packet.readInt16();\n      this.warningStatus = packet.readInt16();\n    } else if (isSet('TRANSACTIONS')) {\n      this.serverStatus = packet.readInt16();\n    }\n\n    var stateChanges = null;\n\n    if (isSet('SESSION_TRACK') && packet.offset < packet.end) {\n      var sessionInfoTypes = require('../constants/session_track.js');\n\n      this.info = packet.readLengthCodedString(encoding);\n\n      if (this.serverStatus && ServerSatusFlags.SERVER_SESSION_STATE_CHANGED) {\n        // session change info record - see\n        // https://dev.mysql.com/doc/internals/en/packet-OK_Packet.html#cs-sect-packet-ok-sessioninfo\n        var len = packet.offset < packet.end ? packet.readLengthCodedNumber() : 0;\n        var end = packet.offset + len;\n        var type, key, stateEnd;\n\n        if (len > 0) {\n          stateChanges = {\n            systemVariables: {},\n            schema: null,\n            trackStateChange: null\n          };\n        }\n\n        while (packet.offset < end) {\n          type = packet.readInt8();\n          len = packet.readLengthCodedNumber();\n          stateEnd = packet.offset + len;\n\n          if (type === sessionInfoTypes.SYSTEM_VARIABLES) {\n            key = packet.readLengthCodedString(encoding);\n            var val = packet.readLengthCodedString(encoding);\n            stateChanges.systemVariables[key] = val;\n\n            if (key === 'character_set_client') {\n              var charsetNumber = EncodingToCharset[val];\n              connection.config.charsetNumber = charsetNumber;\n            }\n          } else if (type === sessionInfoTypes.SCHEMA) {\n            key = packet.readLengthCodedString(encoding);\n            stateChanges.schema = key;\n          } else if (type === sessionInfoTypes.STATE_CHANGE) {\n            stateChanges.trackStateChange = packet.readLengthCodedString(encoding);\n          } else {// unsupported session track type. For now just ignore\n          }\n\n          packet.offset = stateEnd;\n        }\n      }\n    } else {\n      this.info = packet.readString(undefined, encoding);\n    }\n\n    if (stateChanges) {\n      this.stateChanges = stateChanges;\n    }\n\n    var m = this.info.match(/\\schanged:\\s*(\\d+)/i);\n\n    if (m !== null) {\n      this.changedRows = parseInt(m[1], 10);\n    }\n  } // TODO: should be consistent instance member, but it's just easier here to have just function\n\n\n  _createClass(ResultSetHeader, null, [{\n    key: \"toPacket\",\n    value: function toPacket(fieldCount, insertId) {\n      var length = 4 + Packet.lengthCodedNumberLength(fieldCount);\n\n      if (typeof insertId !== 'undefined') {\n        length += Packet.lengthCodedNumberLength(insertId);\n      }\n\n      var buffer = Buffer.allocUnsafe(length);\n      var packet = new Packet(0, buffer, 0, length);\n      packet.offset = 4;\n      packet.writeLengthCodedNumber(fieldCount);\n\n      if (typeof insertId !== 'undefined') {\n        packet.writeLengthCodedNumber(insertId);\n      }\n\n      return packet;\n    }\n  }]);\n\n  return ResultSetHeader;\n}();\n\nmodule.exports = ResultSetHeader;","map":null,"metadata":{},"sourceType":"script"}