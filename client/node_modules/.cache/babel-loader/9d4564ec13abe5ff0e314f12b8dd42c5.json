{"ast":null,"code":"'use strict';\n\nvar _classCallCheck = require(\"/Users/jervisbay/project-tres/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/Users/jervisbay/project-tres/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\n\nvar CommandCode = require('../constants/commands.js');\n\nvar ClientConstants = require('../constants/client.js');\n\nvar Packet = require('../packets/packet.js');\n\nvar auth41 = require('../auth_41.js');\n\nvar CharsetToEncoding = require('../constants/charset_encodings.js'); // https://dev.mysql.com/doc/internals/en/com-change-user.html#packet-COM_CHANGE_USER\n\n\nvar ChangeUser = /*#__PURE__*/function () {\n  function ChangeUser(opts) {\n    _classCallCheck(this, ChangeUser);\n\n    this.flags = opts.flags;\n    this.user = opts.user || '';\n    this.database = opts.database || '';\n    this.password = opts.password || '';\n    this.passwordSha1 = opts.passwordSha1;\n    this.authPluginData1 = opts.authPluginData1;\n    this.authPluginData2 = opts.authPluginData2;\n    this.connectAttributes = opts.connectAttrinutes || {};\n    var authToken;\n\n    if (this.passwordSha1) {\n      authToken = auth41.calculateTokenFromPasswordSha(this.passwordSha1, this.authPluginData1, this.authPluginData2);\n    } else {\n      authToken = auth41.calculateToken(this.password, this.authPluginData1, this.authPluginData2);\n    }\n\n    this.authToken = authToken;\n    this.charsetNumber = opts.charsetNumber;\n  } // TODO\n  // ChangeUser.fromPacket = function(packet)\n  // };\n\n\n  _createClass(ChangeUser, [{\n    key: \"serializeToBuffer\",\n    value: function serializeToBuffer(buffer) {\n      var _this = this;\n\n      var isSet = function isSet(flag) {\n        return _this.flags & ClientConstants[flag];\n      };\n\n      var packet = new Packet(0, buffer, 0, buffer.length);\n      packet.offset = 4;\n      var encoding = CharsetToEncoding[this.charsetNumber];\n      packet.writeInt8(CommandCode.CHANGE_USER);\n      packet.writeNullTerminatedString(this.user, encoding);\n\n      if (isSet('SECURE_CONNECTION')) {\n        packet.writeInt8(this.authToken.length);\n        packet.writeBuffer(this.authToken);\n      } else {\n        packet.writeBuffer(this.authToken);\n        packet.writeInt8(0);\n      }\n\n      packet.writeNullTerminatedString(this.database, encoding);\n      packet.writeInt16(this.charsetNumber);\n\n      if (isSet('PLUGIN_AUTH')) {\n        // TODO: read this from parameters\n        packet.writeNullTerminatedString('mysql_native_password', 'latin1');\n      }\n\n      if (isSet('CONNECT_ATTRS')) {\n        var connectAttributes = this.connectAttributes;\n        var attrNames = Object.keys(connectAttributes);\n        var keysLength = 0;\n\n        for (var k = 0; k < attrNames.length; ++k) {\n          keysLength += Packet.lengthCodedStringLength(attrNames[k], encoding);\n          keysLength += Packet.lengthCodedStringLength(connectAttributes[attrNames[k]], encoding);\n        }\n\n        packet.writeLengthCodedNumber(keysLength);\n\n        for (var _k = 0; _k < attrNames.length; ++_k) {\n          packet.writeLengthCodedString(attrNames[_k], encoding);\n          packet.writeLengthCodedString(connectAttributes[attrNames[_k]], encoding);\n        }\n      }\n\n      return packet;\n    }\n  }, {\n    key: \"toPacket\",\n    value: function toPacket() {\n      if (typeof this.user !== 'string') {\n        throw new Error('\"user\" connection config property must be a string');\n      }\n\n      if (typeof this.database !== 'string') {\n        throw new Error('\"database\" connection config property must be a string');\n      } // dry run: calculate resulting packet length\n\n\n      var p = this.serializeToBuffer(Packet.MockBuffer());\n      return this.serializeToBuffer(Buffer.allocUnsafe(p.offset));\n    }\n  }]);\n\n  return ChangeUser;\n}();\n\nmodule.exports = ChangeUser;","map":null,"metadata":{},"sourceType":"script"}