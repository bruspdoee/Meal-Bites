{"ast":null,"code":"'use strict';\n\nvar _classCallCheck = require(\"/Users/jervisbay/project-tres/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/Users/jervisbay/project-tres/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\n\nfunction _createForOfIteratorHelper(o, allowArrayLike) { var it; if (typeof Symbol === \"undefined\" || o[Symbol.iterator] == null) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = o[Symbol.iterator](); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nvar Toposort = require('toposort-class');\n\nvar _ = require('lodash');\n\nvar ModelManager = /*#__PURE__*/function () {\n  function ModelManager(sequelize) {\n    _classCallCheck(this, ModelManager);\n\n    this.models = [];\n    this.sequelize = sequelize;\n  }\n\n  _createClass(ModelManager, [{\n    key: \"addModel\",\n    value: function addModel(model) {\n      this.models.push(model);\n      this.sequelize.models[model.name] = model;\n      return model;\n    }\n  }, {\n    key: \"removeModel\",\n    value: function removeModel(modelToRemove) {\n      this.models = this.models.filter(function (model) {\n        return model.name !== modelToRemove.name;\n      });\n      delete this.sequelize.models[modelToRemove.name];\n    }\n  }, {\n    key: \"getModel\",\n    value: function getModel(against, options) {\n      options = _.defaults(options || {}, {\n        attribute: 'name'\n      });\n      return this.models.find(function (model) {\n        return model[options.attribute] === against;\n      });\n    }\n  }, {\n    key: \"forEachModel\",\n\n    /**\n     * Iterate over Models in an order suitable for e.g. creating tables.\n     * Will take foreign key constraints into account so that dependencies are visited before dependents.\n     *\n     * @param {Function} iterator method to execute on each model\n     * @param {object} [options] iterator options\n     * @private\n     */\n    value: function forEachModel(iterator, options) {\n      var models = {};\n      var sorter = new Toposort();\n      var sorted;\n      var dep;\n      options = _.defaults(options || {}, {\n        reverse: true\n      });\n\n      var _iterator = _createForOfIteratorHelper(this.models),\n          _step;\n\n      try {\n        var _loop = function _loop() {\n          var model = _step.value;\n          var deps = [];\n          var tableName = model.getTableName();\n\n          if (_.isObject(tableName)) {\n            tableName = \"\".concat(tableName.schema, \".\").concat(tableName.tableName);\n          }\n\n          models[tableName] = model;\n\n          for (var attrName in model.rawAttributes) {\n            if (Object.prototype.hasOwnProperty.call(model.rawAttributes, attrName)) {\n              var attribute = model.rawAttributes[attrName];\n\n              if (attribute.references) {\n                dep = attribute.references.model;\n\n                if (_.isObject(dep)) {\n                  dep = \"\".concat(dep.schema, \".\").concat(dep.tableName);\n                }\n\n                deps.push(dep);\n              }\n            }\n          }\n\n          deps = deps.filter(function (dep) {\n            return tableName !== dep;\n          });\n          sorter.add(tableName, deps);\n        };\n\n        for (_iterator.s(); !(_step = _iterator.n()).done;) {\n          _loop();\n        }\n      } catch (err) {\n        _iterator.e(err);\n      } finally {\n        _iterator.f();\n      }\n\n      sorted = sorter.sort();\n\n      if (options.reverse) {\n        sorted = sorted.reverse();\n      }\n\n      var _iterator2 = _createForOfIteratorHelper(sorted),\n          _step2;\n\n      try {\n        for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n          var name = _step2.value;\n          iterator(models[name], name);\n        }\n      } catch (err) {\n        _iterator2.e(err);\n      } finally {\n        _iterator2.f();\n      }\n    }\n  }, {\n    key: \"all\",\n    get: function get() {\n      return this.models;\n    }\n  }]);\n\n  return ModelManager;\n}();\n\nmodule.exports = ModelManager;\nmodule.exports.ModelManager = ModelManager;\nmodule.exports.default = ModelManager;","map":null,"metadata":{},"sourceType":"script"}