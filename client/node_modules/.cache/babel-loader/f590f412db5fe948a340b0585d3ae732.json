{"ast":null,"code":"'use strict';\n\nvar _defineProperty = require(\"/Users/jervisbay/project-tres/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/defineProperty\");\n\nvar _objectSpread = require(\"/Users/jervisbay/project-tres/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/objectSpread\");\n\nvar _regeneratorRuntime = require(\"/Users/jervisbay/project-tres/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\");\n\nvar _asyncToGenerator = require(\"/Users/jervisbay/project-tres/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/asyncToGenerator\");\n\nvar _classCallCheck = require(\"/Users/jervisbay/project-tres/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/Users/jervisbay/project-tres/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\n\nfunction _createForOfIteratorHelper(o, allowArrayLike) { var it; if (typeof Symbol === \"undefined\" || o[Symbol.iterator] == null) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = o[Symbol.iterator](); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nvar _ = require('lodash');\n\nvar Utils = require('../../utils');\n\nvar DataTypes = require('../../data-types');\n\nvar Transaction = require('../../transaction');\n\nvar QueryTypes = require('../../query-types');\n/**\n * The interface that Sequelize uses to talk to all databases\n */\n\n\nvar QueryInterface = /*#__PURE__*/function () {\n  function QueryInterface(sequelize, queryGenerator) {\n    _classCallCheck(this, QueryInterface);\n\n    this.sequelize = sequelize;\n    this.queryGenerator = queryGenerator;\n  }\n  /**\n   * Create a database\n   *\n   * @param {string} database  Database name to create\n   * @param {object} [options] Query options\n   * @param {string} [options.charset] Database default character set, MYSQL only\n   * @param {string} [options.collate] Database default collation\n   * @param {string} [options.encoding] Database default character set, PostgreSQL only\n   * @param {string} [options.ctype] Database character classification, PostgreSQL only\n   * @param {string} [options.template] The name of the template from which to create the new database, PostgreSQL only\n   *\n   * @returns {Promise}\n   */\n\n\n  _createClass(QueryInterface, [{\n    key: \"createDatabase\",\n    value: function () {\n      var _createDatabase = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(database, options) {\n        var sql;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                options = options || {};\n                sql = this.queryGenerator.createDatabaseQuery(database, options);\n                _context.next = 4;\n                return this.sequelize.query(sql, options);\n\n              case 4:\n                return _context.abrupt(\"return\", _context.sent);\n\n              case 5:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function createDatabase(_x, _x2) {\n        return _createDatabase.apply(this, arguments);\n      }\n\n      return createDatabase;\n    }()\n    /**\n     * Drop a database\n     *\n     * @param {string} database  Database name to drop\n     * @param {object} [options] Query options\n     *\n     * @returns {Promise}\n     */\n\n  }, {\n    key: \"dropDatabase\",\n    value: function () {\n      var _dropDatabase = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(database, options) {\n        var sql;\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                options = options || {};\n                sql = this.queryGenerator.dropDatabaseQuery(database);\n                _context2.next = 4;\n                return this.sequelize.query(sql, options);\n\n              case 4:\n                return _context2.abrupt(\"return\", _context2.sent);\n\n              case 5:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n\n      function dropDatabase(_x3, _x4) {\n        return _dropDatabase.apply(this, arguments);\n      }\n\n      return dropDatabase;\n    }()\n    /**\n     * Create a schema\n     *\n     * @param {string} schema    Schema name to create\n     * @param {object} [options] Query options\n     *\n     * @returns {Promise}\n     */\n\n  }, {\n    key: \"createSchema\",\n    value: function () {\n      var _createSchema = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3(schema, options) {\n        var sql;\n        return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                options = options || {};\n                sql = this.queryGenerator.createSchema(schema);\n                _context3.next = 4;\n                return this.sequelize.query(sql, options);\n\n              case 4:\n                return _context3.abrupt(\"return\", _context3.sent);\n\n              case 5:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this);\n      }));\n\n      function createSchema(_x5, _x6) {\n        return _createSchema.apply(this, arguments);\n      }\n\n      return createSchema;\n    }()\n    /**\n     * Drop a schema\n     *\n     * @param {string} schema    Schema name to drop\n     * @param {object} [options] Query options\n     *\n     * @returns {Promise}\n     */\n\n  }, {\n    key: \"dropSchema\",\n    value: function () {\n      var _dropSchema = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee4(schema, options) {\n        var sql;\n        return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                options = options || {};\n                sql = this.queryGenerator.dropSchema(schema);\n                _context4.next = 4;\n                return this.sequelize.query(sql, options);\n\n              case 4:\n                return _context4.abrupt(\"return\", _context4.sent);\n\n              case 5:\n              case \"end\":\n                return _context4.stop();\n            }\n          }\n        }, _callee4, this);\n      }));\n\n      function dropSchema(_x7, _x8) {\n        return _dropSchema.apply(this, arguments);\n      }\n\n      return dropSchema;\n    }()\n    /**\n     * Drop all schemas\n     *\n     * @param {object} [options] Query options\n     *\n     * @returns {Promise}\n     */\n\n  }, {\n    key: \"dropAllSchemas\",\n    value: function () {\n      var _dropAllSchemas = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee5(options) {\n        var _this = this;\n\n        var schemas;\n        return _regeneratorRuntime.wrap(function _callee5$(_context5) {\n          while (1) {\n            switch (_context5.prev = _context5.next) {\n              case 0:\n                options = options || {};\n\n                if (this.queryGenerator._dialect.supports.schemas) {\n                  _context5.next = 3;\n                  break;\n                }\n\n                return _context5.abrupt(\"return\", this.sequelize.drop(options));\n\n              case 3:\n                _context5.next = 5;\n                return this.showAllSchemas(options);\n\n              case 5:\n                schemas = _context5.sent;\n                return _context5.abrupt(\"return\", Promise.all(schemas.map(function (schemaName) {\n                  return _this.dropSchema(schemaName, options);\n                })));\n\n              case 7:\n              case \"end\":\n                return _context5.stop();\n            }\n          }\n        }, _callee5, this);\n      }));\n\n      function dropAllSchemas(_x9) {\n        return _dropAllSchemas.apply(this, arguments);\n      }\n\n      return dropAllSchemas;\n    }()\n    /**\n     * Show all schemas\n     *\n     * @param {object} [options] Query options\n     *\n     * @returns {Promise<Array>}\n     */\n\n  }, {\n    key: \"showAllSchemas\",\n    value: function () {\n      var _showAllSchemas = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee6(options) {\n        var showSchemasSql, schemaNames;\n        return _regeneratorRuntime.wrap(function _callee6$(_context6) {\n          while (1) {\n            switch (_context6.prev = _context6.next) {\n              case 0:\n                options = _objectSpread({}, options, {\n                  raw: true,\n                  type: this.sequelize.QueryTypes.SELECT\n                });\n                showSchemasSql = this.queryGenerator.showSchemasQuery(options);\n                _context6.next = 4;\n                return this.sequelize.query(showSchemasSql, options);\n\n              case 4:\n                schemaNames = _context6.sent;\n                return _context6.abrupt(\"return\", _.flatten(schemaNames.map(function (value) {\n                  return value.schema_name ? value.schema_name : value;\n                })));\n\n              case 6:\n              case \"end\":\n                return _context6.stop();\n            }\n          }\n        }, _callee6, this);\n      }));\n\n      function showAllSchemas(_x10) {\n        return _showAllSchemas.apply(this, arguments);\n      }\n\n      return showAllSchemas;\n    }()\n    /**\n     * Return database version\n     *\n     * @param {object}    [options]      Query options\n     * @param {QueryType} [options.type] Query type\n     *\n     * @returns {Promise}\n     * @private\n     */\n\n  }, {\n    key: \"databaseVersion\",\n    value: function () {\n      var _databaseVersion = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee7(options) {\n        return _regeneratorRuntime.wrap(function _callee7$(_context7) {\n          while (1) {\n            switch (_context7.prev = _context7.next) {\n              case 0:\n                _context7.next = 2;\n                return this.sequelize.query(this.queryGenerator.versionQuery(), _objectSpread({}, options, {\n                  type: QueryTypes.VERSION\n                }));\n\n              case 2:\n                return _context7.abrupt(\"return\", _context7.sent);\n\n              case 3:\n              case \"end\":\n                return _context7.stop();\n            }\n          }\n        }, _callee7, this);\n      }));\n\n      function databaseVersion(_x11) {\n        return _databaseVersion.apply(this, arguments);\n      }\n\n      return databaseVersion;\n    }()\n    /**\n     * Create a table with given set of attributes\n     *\n     * ```js\n     * queryInterface.createTable(\n     *   'nameOfTheNewTable',\n     *   {\n     *     id: {\n     *       type: Sequelize.INTEGER,\n     *       primaryKey: true,\n     *       autoIncrement: true\n     *     },\n     *     createdAt: {\n     *       type: Sequelize.DATE\n     *     },\n     *     updatedAt: {\n     *       type: Sequelize.DATE\n     *     },\n     *     attr1: Sequelize.STRING,\n     *     attr2: Sequelize.INTEGER,\n     *     attr3: {\n     *       type: Sequelize.BOOLEAN,\n     *       defaultValue: false,\n     *       allowNull: false\n     *     },\n     *     //foreign key usage\n     *     attr4: {\n     *       type: Sequelize.INTEGER,\n     *       references: {\n     *         model: 'another_table_name',\n     *         key: 'id'\n     *       },\n     *       onUpdate: 'cascade',\n     *       onDelete: 'cascade'\n     *     }\n     *   },\n     *   {\n     *     engine: 'MYISAM',    // default: 'InnoDB'\n     *     charset: 'latin1',   // default: null\n     *     schema: 'public',    // default: public, PostgreSQL only.\n     *     comment: 'my table', // comment for table\n     *     collate: 'latin1_danish_ci' // collation, MYSQL only\n     *   }\n     * )\n     * ```\n     *\n     * @param {string} tableName  Name of table to create\n     * @param {object} attributes Object representing a list of table attributes to create\n     * @param {object} [options] create table and query options\n     * @param {Model}  [model] model class\n     *\n     * @returns {Promise}\n     */\n\n  }, {\n    key: \"createTable\",\n    value: function () {\n      var _createTable = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee8(tableName, attributes, options, model) {\n        var _this2 = this;\n\n        var sql;\n        return _regeneratorRuntime.wrap(function _callee8$(_context8) {\n          while (1) {\n            switch (_context8.prev = _context8.next) {\n              case 0:\n                sql = '';\n                options = _objectSpread({}, options);\n\n                if (options && options.uniqueKeys) {\n                  _.forOwn(options.uniqueKeys, function (uniqueKey) {\n                    if (uniqueKey.customIndex === undefined) {\n                      uniqueKey.customIndex = true;\n                    }\n                  });\n                }\n\n                if (model) {\n                  options.uniqueKeys = options.uniqueKeys || model.uniqueKeys;\n                }\n\n                attributes = _.mapValues(attributes, function (attribute) {\n                  return _this2.sequelize.normalizeAttribute(attribute);\n                }); // Postgres requires special SQL commands for ENUM/ENUM[]\n\n                _context8.next = 7;\n                return this.ensureEnums(tableName, attributes, options, model);\n\n              case 7:\n                if (!tableName.schema && (options.schema || !!model && model._schema)) {\n                  tableName = this.queryGenerator.addSchema({\n                    tableName: tableName,\n                    _schema: !!model && model._schema || options.schema\n                  });\n                }\n\n                attributes = this.queryGenerator.attributesToSQL(attributes, {\n                  table: tableName,\n                  context: 'createTable'\n                });\n                sql = this.queryGenerator.createTableQuery(tableName, attributes, options);\n                _context8.next = 12;\n                return this.sequelize.query(sql, options);\n\n              case 12:\n                return _context8.abrupt(\"return\", _context8.sent);\n\n              case 13:\n              case \"end\":\n                return _context8.stop();\n            }\n          }\n        }, _callee8, this);\n      }));\n\n      function createTable(_x12, _x13, _x14, _x15) {\n        return _createTable.apply(this, arguments);\n      }\n\n      return createTable;\n    }()\n    /**\n     * Drop a table from database\n     *\n     * @param {string} tableName Table name to drop\n     * @param {object} options   Query options\n     *\n     * @returns {Promise}\n     */\n\n  }, {\n    key: \"dropTable\",\n    value: function () {\n      var _dropTable = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee9(tableName, options) {\n        var sql;\n        return _regeneratorRuntime.wrap(function _callee9$(_context9) {\n          while (1) {\n            switch (_context9.prev = _context9.next) {\n              case 0:\n                // if we're forcing we should be cascading unless explicitly stated otherwise\n                options = _objectSpread({}, options);\n                options.cascade = options.cascade || options.force || false;\n                sql = this.queryGenerator.dropTableQuery(tableName, options);\n                _context9.next = 5;\n                return this.sequelize.query(sql, options);\n\n              case 5:\n              case \"end\":\n                return _context9.stop();\n            }\n          }\n        }, _callee9, this);\n      }));\n\n      function dropTable(_x16, _x17) {\n        return _dropTable.apply(this, arguments);\n      }\n\n      return dropTable;\n    }()\n  }, {\n    key: \"_dropAllTables\",\n    value: function () {\n      var _dropAllTables2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee10(tableNames, skip, options) {\n        var _iterator, _step, tableName;\n\n        return _regeneratorRuntime.wrap(function _callee10$(_context10) {\n          while (1) {\n            switch (_context10.prev = _context10.next) {\n              case 0:\n                _iterator = _createForOfIteratorHelper(tableNames);\n                _context10.prev = 1;\n\n                _iterator.s();\n\n              case 3:\n                if ((_step = _iterator.n()).done) {\n                  _context10.next = 10;\n                  break;\n                }\n\n                tableName = _step.value;\n\n                if (skip.includes(tableName.tableName || tableName)) {\n                  _context10.next = 8;\n                  break;\n                }\n\n                _context10.next = 8;\n                return this.dropTable(tableName, _objectSpread({}, options, {\n                  cascade: true\n                }));\n\n              case 8:\n                _context10.next = 3;\n                break;\n\n              case 10:\n                _context10.next = 15;\n                break;\n\n              case 12:\n                _context10.prev = 12;\n                _context10.t0 = _context10[\"catch\"](1);\n\n                _iterator.e(_context10.t0);\n\n              case 15:\n                _context10.prev = 15;\n\n                _iterator.f();\n\n                return _context10.finish(15);\n\n              case 18:\n              case \"end\":\n                return _context10.stop();\n            }\n          }\n        }, _callee10, this, [[1, 12, 15, 18]]);\n      }));\n\n      function _dropAllTables(_x18, _x19, _x20) {\n        return _dropAllTables2.apply(this, arguments);\n      }\n\n      return _dropAllTables;\n    }()\n    /**\n     * Drop all tables from database\n     *\n     * @param {object} [options] query options\n     * @param {Array}  [options.skip] List of table to skip\n     *\n     * @returns {Promise}\n     */\n\n  }, {\n    key: \"dropAllTables\",\n    value: function () {\n      var _dropAllTables3 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee11(options) {\n        var skip, tableNames, foreignKeys, _iterator2, _step2, tableName, normalizedTableName, _iterator3, _step3, foreignKey;\n\n        return _regeneratorRuntime.wrap(function _callee11$(_context11) {\n          while (1) {\n            switch (_context11.prev = _context11.next) {\n              case 0:\n                options = options || {};\n                skip = options.skip || [];\n                _context11.next = 4;\n                return this.showAllTables(options);\n\n              case 4:\n                tableNames = _context11.sent;\n                _context11.next = 7;\n                return this.getForeignKeysForTables(tableNames, options);\n\n              case 7:\n                foreignKeys = _context11.sent;\n                _iterator2 = _createForOfIteratorHelper(tableNames);\n                _context11.prev = 9;\n\n                _iterator2.s();\n\n              case 11:\n                if ((_step2 = _iterator2.n()).done) {\n                  _context11.next = 34;\n                  break;\n                }\n\n                tableName = _step2.value;\n                normalizedTableName = tableName;\n\n                if (_.isObject(tableName)) {\n                  normalizedTableName = \"\".concat(tableName.schema, \".\").concat(tableName.tableName);\n                }\n\n                _iterator3 = _createForOfIteratorHelper(foreignKeys[normalizedTableName]);\n                _context11.prev = 16;\n\n                _iterator3.s();\n\n              case 18:\n                if ((_step3 = _iterator3.n()).done) {\n                  _context11.next = 24;\n                  break;\n                }\n\n                foreignKey = _step3.value;\n                _context11.next = 22;\n                return this.sequelize.query(this.queryGenerator.dropForeignKeyQuery(tableName, foreignKey));\n\n              case 22:\n                _context11.next = 18;\n                break;\n\n              case 24:\n                _context11.next = 29;\n                break;\n\n              case 26:\n                _context11.prev = 26;\n                _context11.t0 = _context11[\"catch\"](16);\n\n                _iterator3.e(_context11.t0);\n\n              case 29:\n                _context11.prev = 29;\n\n                _iterator3.f();\n\n                return _context11.finish(29);\n\n              case 32:\n                _context11.next = 11;\n                break;\n\n              case 34:\n                _context11.next = 39;\n                break;\n\n              case 36:\n                _context11.prev = 36;\n                _context11.t1 = _context11[\"catch\"](9);\n\n                _iterator2.e(_context11.t1);\n\n              case 39:\n                _context11.prev = 39;\n\n                _iterator2.f();\n\n                return _context11.finish(39);\n\n              case 42:\n                _context11.next = 44;\n                return this._dropAllTables(tableNames, skip, options);\n\n              case 44:\n              case \"end\":\n                return _context11.stop();\n            }\n          }\n        }, _callee11, this, [[9, 36, 39, 42], [16, 26, 29, 32]]);\n      }));\n\n      function dropAllTables(_x21) {\n        return _dropAllTables3.apply(this, arguments);\n      }\n\n      return dropAllTables;\n    }()\n    /**\n     * Rename a table\n     *\n     * @param {string} before    Current name of table\n     * @param {string} after     New name from table\n     * @param {object} [options] Query options\n     *\n     * @returns {Promise}\n     */\n\n  }, {\n    key: \"renameTable\",\n    value: function () {\n      var _renameTable = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee12(before, after, options) {\n        var sql;\n        return _regeneratorRuntime.wrap(function _callee12$(_context12) {\n          while (1) {\n            switch (_context12.prev = _context12.next) {\n              case 0:\n                options = options || {};\n                sql = this.queryGenerator.renameTableQuery(before, after);\n                _context12.next = 4;\n                return this.sequelize.query(sql, options);\n\n              case 4:\n                return _context12.abrupt(\"return\", _context12.sent);\n\n              case 5:\n              case \"end\":\n                return _context12.stop();\n            }\n          }\n        }, _callee12, this);\n      }));\n\n      function renameTable(_x22, _x23, _x24) {\n        return _renameTable.apply(this, arguments);\n      }\n\n      return renameTable;\n    }()\n    /**\n     * Get all tables in current database\n     *\n     * @param {object}    [options] Query options\n     * @param {boolean}   [options.raw=true] Run query in raw mode\n     * @param {QueryType} [options.type=QueryType.SHOWTABLE] query type\n     *\n     * @returns {Promise<Array>}\n     * @private\n     */\n\n  }, {\n    key: \"showAllTables\",\n    value: function () {\n      var _showAllTables = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee13(options) {\n        var showTablesSql, tableNames;\n        return _regeneratorRuntime.wrap(function _callee13$(_context13) {\n          while (1) {\n            switch (_context13.prev = _context13.next) {\n              case 0:\n                options = _objectSpread({}, options, {\n                  raw: true,\n                  type: QueryTypes.SHOWTABLES\n                });\n                showTablesSql = this.queryGenerator.showTablesQuery(this.sequelize.config.database);\n                _context13.next = 4;\n                return this.sequelize.query(showTablesSql, options);\n\n              case 4:\n                tableNames = _context13.sent;\n                return _context13.abrupt(\"return\", _.flatten(tableNames));\n\n              case 6:\n              case \"end\":\n                return _context13.stop();\n            }\n          }\n        }, _callee13, this);\n      }));\n\n      function showAllTables(_x25) {\n        return _showAllTables.apply(this, arguments);\n      }\n\n      return showAllTables;\n    }()\n    /**\n     * Describe a table structure\n     *\n     * This method returns an array of hashes containing information about all attributes in the table.\n     *\n     * ```js\n     * {\n     *    name: {\n     *      type:         'VARCHAR(255)', // this will be 'CHARACTER VARYING' for pg!\n     *      allowNull:    true,\n     *      defaultValue: null\n     *    },\n     *    isBetaMember: {\n     *      type:         'TINYINT(1)', // this will be 'BOOLEAN' for pg!\n     *      allowNull:    false,\n     *      defaultValue: false\n     *    }\n     * }\n     * ```\n     *\n     * @param {string} tableName table name\n     * @param {object} [options] Query options\n     *\n     * @returns {Promise<object>}\n     */\n\n  }, {\n    key: \"describeTable\",\n    value: function () {\n      var _describeTable = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee14(tableName, options) {\n        var schema, schemaDelimiter, sql, data;\n        return _regeneratorRuntime.wrap(function _callee14$(_context14) {\n          while (1) {\n            switch (_context14.prev = _context14.next) {\n              case 0:\n                schema = null;\n                schemaDelimiter = null;\n\n                if (typeof options === 'string') {\n                  schema = options;\n                } else if (typeof options === 'object' && options !== null) {\n                  schema = options.schema || null;\n                  schemaDelimiter = options.schemaDelimiter || null;\n                }\n\n                if (typeof tableName === 'object' && tableName !== null) {\n                  schema = tableName.schema;\n                  tableName = tableName.tableName;\n                }\n\n                sql = this.queryGenerator.describeTableQuery(tableName, schema, schemaDelimiter);\n                options = _objectSpread({}, options, {\n                  type: QueryTypes.DESCRIBE\n                });\n                _context14.prev = 6;\n                _context14.next = 9;\n                return this.sequelize.query(sql, options);\n\n              case 9:\n                data = _context14.sent;\n\n                if (!_.isEmpty(data)) {\n                  _context14.next = 12;\n                  break;\n                }\n\n                throw new Error(\"No description found for \\\"\".concat(tableName, \"\\\" table. Check the table name and schema; remember, they _are_ case sensitive.\"));\n\n              case 12:\n                return _context14.abrupt(\"return\", data);\n\n              case 15:\n                _context14.prev = 15;\n                _context14.t0 = _context14[\"catch\"](6);\n\n                if (!(_context14.t0.original && _context14.t0.original.code === 'ER_NO_SUCH_TABLE')) {\n                  _context14.next = 19;\n                  break;\n                }\n\n                throw new Error(\"No description found for \\\"\".concat(tableName, \"\\\" table. Check the table name and schema; remember, they _are_ case sensitive.\"));\n\n              case 19:\n                throw _context14.t0;\n\n              case 20:\n              case \"end\":\n                return _context14.stop();\n            }\n          }\n        }, _callee14, this, [[6, 15]]);\n      }));\n\n      function describeTable(_x26, _x27) {\n        return _describeTable.apply(this, arguments);\n      }\n\n      return describeTable;\n    }()\n    /**\n     * Add a new column to a table\n     *\n     * ```js\n     * queryInterface.addColumn('tableA', 'columnC', Sequelize.STRING, {\n     *    after: 'columnB' // after option is only supported by MySQL\n     * });\n     * ```\n     *\n     * @param {string} table     Table to add column to\n     * @param {string} key       Column name\n     * @param {object} attribute Attribute definition\n     * @param {object} [options] Query options\n     *\n     * @returns {Promise}\n     */\n\n  }, {\n    key: \"addColumn\",\n    value: function () {\n      var _addColumn = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee15(table, key, attribute, options) {\n        return _regeneratorRuntime.wrap(function _callee15$(_context15) {\n          while (1) {\n            switch (_context15.prev = _context15.next) {\n              case 0:\n                if (!(!table || !key || !attribute)) {\n                  _context15.next = 2;\n                  break;\n                }\n\n                throw new Error('addColumn takes at least 3 arguments (table, attribute name, attribute definition)');\n\n              case 2:\n                options = options || {};\n                attribute = this.sequelize.normalizeAttribute(attribute);\n                _context15.next = 6;\n                return this.sequelize.query(this.queryGenerator.addColumnQuery(table, key, attribute), options);\n\n              case 6:\n                return _context15.abrupt(\"return\", _context15.sent);\n\n              case 7:\n              case \"end\":\n                return _context15.stop();\n            }\n          }\n        }, _callee15, this);\n      }));\n\n      function addColumn(_x28, _x29, _x30, _x31) {\n        return _addColumn.apply(this, arguments);\n      }\n\n      return addColumn;\n    }()\n    /**\n     * Remove a column from a table\n     *\n     * @param {string} tableName      Table to remove column from\n     * @param {string} attributeName  Column name to remove\n     * @param {object} [options]      Query options\n     */\n\n  }, {\n    key: \"removeColumn\",\n    value: function () {\n      var _removeColumn = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee16(tableName, attributeName, options) {\n        return _regeneratorRuntime.wrap(function _callee16$(_context16) {\n          while (1) {\n            switch (_context16.prev = _context16.next) {\n              case 0:\n                return _context16.abrupt(\"return\", this.sequelize.query(this.queryGenerator.removeColumnQuery(tableName, attributeName), options));\n\n              case 1:\n              case \"end\":\n                return _context16.stop();\n            }\n          }\n        }, _callee16, this);\n      }));\n\n      function removeColumn(_x32, _x33, _x34) {\n        return _removeColumn.apply(this, arguments);\n      }\n\n      return removeColumn;\n    }()\n  }, {\n    key: \"normalizeAttribute\",\n    value: function normalizeAttribute(dataTypeOrOptions) {\n      var attribute;\n\n      if (Object.values(DataTypes).includes(dataTypeOrOptions)) {\n        attribute = {\n          type: dataTypeOrOptions,\n          allowNull: true\n        };\n      } else {\n        attribute = dataTypeOrOptions;\n      }\n\n      return this.sequelize.normalizeAttribute(attribute);\n    }\n    /**\n     * Change a column definition\n     *\n     * @param {string} tableName          Table name to change from\n     * @param {string} attributeName      Column name\n     * @param {object} dataTypeOrOptions  Attribute definition for new column\n     * @param {object} [options]          Query options\n     */\n\n  }, {\n    key: \"changeColumn\",\n    value: function () {\n      var _changeColumn = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee17(tableName, attributeName, dataTypeOrOptions, options) {\n        var query, sql;\n        return _regeneratorRuntime.wrap(function _callee17$(_context17) {\n          while (1) {\n            switch (_context17.prev = _context17.next) {\n              case 0:\n                options = options || {};\n                query = this.queryGenerator.attributesToSQL(_defineProperty({}, attributeName, this.normalizeAttribute(dataTypeOrOptions)), {\n                  context: 'changeColumn',\n                  table: tableName\n                });\n                sql = this.queryGenerator.changeColumnQuery(tableName, query);\n                return _context17.abrupt(\"return\", this.sequelize.query(sql, options));\n\n              case 4:\n              case \"end\":\n                return _context17.stop();\n            }\n          }\n        }, _callee17, this);\n      }));\n\n      function changeColumn(_x35, _x36, _x37, _x38) {\n        return _changeColumn.apply(this, arguments);\n      }\n\n      return changeColumn;\n    }()\n    /**\n     * Rejects if the table doesn't have the specified column, otherwise returns the column description.\n     *\n     * @param {string} tableName\n     * @param {string} columnName\n     * @param {object} options\n     * @private\n     */\n\n  }, {\n    key: \"assertTableHasColumn\",\n    value: function () {\n      var _assertTableHasColumn = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee18(tableName, columnName, options) {\n        var description;\n        return _regeneratorRuntime.wrap(function _callee18$(_context18) {\n          while (1) {\n            switch (_context18.prev = _context18.next) {\n              case 0:\n                _context18.next = 2;\n                return this.describeTable(tableName, options);\n\n              case 2:\n                description = _context18.sent;\n\n                if (!description[columnName]) {\n                  _context18.next = 5;\n                  break;\n                }\n\n                return _context18.abrupt(\"return\", description);\n\n              case 5:\n                throw new Error(\"Table \".concat(tableName, \" doesn't have the column \").concat(columnName));\n\n              case 6:\n              case \"end\":\n                return _context18.stop();\n            }\n          }\n        }, _callee18, this);\n      }));\n\n      function assertTableHasColumn(_x39, _x40, _x41) {\n        return _assertTableHasColumn.apply(this, arguments);\n      }\n\n      return assertTableHasColumn;\n    }()\n    /**\n     * Rename a column\n     *\n     * @param {string} tableName        Table name whose column to rename\n     * @param {string} attrNameBefore   Current column name\n     * @param {string} attrNameAfter    New column name\n     * @param {object} [options]        Query option\n     *\n     * @returns {Promise}\n     */\n\n  }, {\n    key: \"renameColumn\",\n    value: function () {\n      var _renameColumn = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee19(tableName, attrNameBefore, attrNameAfter, options) {\n        var data, _options, sql;\n\n        return _regeneratorRuntime.wrap(function _callee19$(_context19) {\n          while (1) {\n            switch (_context19.prev = _context19.next) {\n              case 0:\n                options = options || {};\n                _context19.next = 3;\n                return this.assertTableHasColumn(tableName, attrNameBefore, options);\n\n              case 3:\n                _context19.t0 = attrNameBefore;\n                data = _context19.sent[_context19.t0];\n                _options = {};\n                _options[attrNameAfter] = {\n                  attribute: attrNameAfter,\n                  type: data.type,\n                  allowNull: data.allowNull,\n                  defaultValue: data.defaultValue\n                }; // fix: a not-null column cannot have null as default value\n\n                if (data.defaultValue === null && !data.allowNull) {\n                  delete _options[attrNameAfter].defaultValue;\n                }\n\n                sql = this.queryGenerator.renameColumnQuery(tableName, attrNameBefore, this.queryGenerator.attributesToSQL(_options));\n                _context19.next = 11;\n                return this.sequelize.query(sql, options);\n\n              case 11:\n                return _context19.abrupt(\"return\", _context19.sent);\n\n              case 12:\n              case \"end\":\n                return _context19.stop();\n            }\n          }\n        }, _callee19, this);\n      }));\n\n      function renameColumn(_x42, _x43, _x44, _x45) {\n        return _renameColumn.apply(this, arguments);\n      }\n\n      return renameColumn;\n    }()\n    /**\n     * Add an index to a column\n     *\n     * @param {string|object}  tableName Table name to add index on, can be a object with schema\n     * @param {Array}   [attributes]     Use options.fields instead, List of attributes to add index on\n     * @param {object}  options          indexes options\n     * @param {Array}   options.fields   List of attributes to add index on\n     * @param {boolean} [options.concurrently] Pass CONCURRENT so other operations run while the index is created\n     * @param {boolean} [options.unique] Create a unique index\n     * @param {string}  [options.using]  Useful for GIN indexes\n     * @param {string}  [options.operator] Index operator\n     * @param {string}  [options.type]   Type of index, available options are UNIQUE|FULLTEXT|SPATIAL\n     * @param {string}  [options.name]   Name of the index. Default is <table>_<attr1>_<attr2>\n     * @param {object}  [options.where]  Where condition on index, for partial indexes\n     * @param {string}  [rawTablename]   table name, this is just for backward compatibiity\n     *\n     * @returns {Promise}\n     */\n\n  }, {\n    key: \"addIndex\",\n    value: function () {\n      var _addIndex = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee20(tableName, attributes, options, rawTablename) {\n        var sql;\n        return _regeneratorRuntime.wrap(function _callee20$(_context20) {\n          while (1) {\n            switch (_context20.prev = _context20.next) {\n              case 0:\n                // Support for passing tableName, attributes, options or tableName, options (with a fields param which is the attributes)\n                if (!Array.isArray(attributes)) {\n                  rawTablename = options;\n                  options = attributes;\n                  attributes = options.fields;\n                }\n\n                if (!rawTablename) {\n                  // Map for backwards compat\n                  rawTablename = tableName;\n                }\n\n                options = Utils.cloneDeep(options);\n                options.fields = attributes;\n                sql = this.queryGenerator.addIndexQuery(tableName, options, rawTablename);\n                _context20.next = 7;\n                return this.sequelize.query(sql, _objectSpread({}, options, {\n                  supportsSearchPath: false\n                }));\n\n              case 7:\n                return _context20.abrupt(\"return\", _context20.sent);\n\n              case 8:\n              case \"end\":\n                return _context20.stop();\n            }\n          }\n        }, _callee20, this);\n      }));\n\n      function addIndex(_x46, _x47, _x48, _x49) {\n        return _addIndex.apply(this, arguments);\n      }\n\n      return addIndex;\n    }()\n    /**\n     * Show indexes on a table\n     *\n     * @param {string} tableName table name\n     * @param {object} [options]   Query options\n     *\n     * @returns {Promise<Array>}\n     * @private\n     */\n\n  }, {\n    key: \"showIndex\",\n    value: function () {\n      var _showIndex = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee21(tableName, options) {\n        var sql;\n        return _regeneratorRuntime.wrap(function _callee21$(_context21) {\n          while (1) {\n            switch (_context21.prev = _context21.next) {\n              case 0:\n                sql = this.queryGenerator.showIndexesQuery(tableName, options);\n                _context21.next = 3;\n                return this.sequelize.query(sql, _objectSpread({}, options, {\n                  type: QueryTypes.SHOWINDEXES\n                }));\n\n              case 3:\n                return _context21.abrupt(\"return\", _context21.sent);\n\n              case 4:\n              case \"end\":\n                return _context21.stop();\n            }\n          }\n        }, _callee21, this);\n      }));\n\n      function showIndex(_x50, _x51) {\n        return _showIndex.apply(this, arguments);\n      }\n\n      return showIndex;\n    }()\n    /**\n     * Returns all foreign key constraints of requested tables\n     *\n     * @param {string[]} tableNames table names\n     * @param {object} [options] Query options\n     *\n     * @returns {Promise}\n     */\n\n  }, {\n    key: \"getForeignKeysForTables\",\n    value: function () {\n      var _getForeignKeysForTables = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee22(tableNames, options) {\n        var _this3 = this;\n\n        var results, result;\n        return _regeneratorRuntime.wrap(function _callee22$(_context22) {\n          while (1) {\n            switch (_context22.prev = _context22.next) {\n              case 0:\n                if (!(tableNames.length === 0)) {\n                  _context22.next = 2;\n                  break;\n                }\n\n                return _context22.abrupt(\"return\", {});\n\n              case 2:\n                options = _objectSpread({}, options, {\n                  type: QueryTypes.FOREIGNKEYS\n                });\n                _context22.next = 5;\n                return Promise.all(tableNames.map(function (tableName) {\n                  return _this3.sequelize.query(_this3.queryGenerator.getForeignKeysQuery(tableName, _this3.sequelize.config.database), options);\n                }));\n\n              case 5:\n                results = _context22.sent;\n                result = {};\n                tableNames.forEach(function (tableName, i) {\n                  if (_.isObject(tableName)) {\n                    tableName = \"\".concat(tableName.schema, \".\").concat(tableName.tableName);\n                  }\n\n                  result[tableName] = Array.isArray(results[i]) ? results[i].map(function (r) {\n                    return r.constraint_name;\n                  }) : [results[i] && results[i].constraint_name];\n                  result[tableName] = result[tableName].filter(_.identity);\n                });\n                return _context22.abrupt(\"return\", result);\n\n              case 9:\n              case \"end\":\n                return _context22.stop();\n            }\n          }\n        }, _callee22);\n      }));\n\n      function getForeignKeysForTables(_x52, _x53) {\n        return _getForeignKeysForTables.apply(this, arguments);\n      }\n\n      return getForeignKeysForTables;\n    }()\n    /**\n     * Get foreign key references details for the table\n     *\n     * Those details contains constraintSchema, constraintName, constraintCatalog\n     * tableCatalog, tableSchema, tableName, columnName,\n     * referencedTableCatalog, referencedTableCatalog, referencedTableSchema, referencedTableName, referencedColumnName.\n     * Remind: constraint informations won't return if it's sqlite.\n     *\n     * @param {string} tableName table name\n     * @param {object} [options]  Query options\n     */\n\n  }, {\n    key: \"getForeignKeyReferencesForTable\",\n    value: function () {\n      var _getForeignKeyReferencesForTable = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee23(tableName, options) {\n        var queryOptions, query;\n        return _regeneratorRuntime.wrap(function _callee23$(_context23) {\n          while (1) {\n            switch (_context23.prev = _context23.next) {\n              case 0:\n                queryOptions = _objectSpread({}, options, {\n                  type: QueryTypes.FOREIGNKEYS\n                });\n                query = this.queryGenerator.getForeignKeysQuery(tableName, this.sequelize.config.database);\n                return _context23.abrupt(\"return\", this.sequelize.query(query, queryOptions));\n\n              case 3:\n              case \"end\":\n                return _context23.stop();\n            }\n          }\n        }, _callee23, this);\n      }));\n\n      function getForeignKeyReferencesForTable(_x54, _x55) {\n        return _getForeignKeyReferencesForTable.apply(this, arguments);\n      }\n\n      return getForeignKeyReferencesForTable;\n    }()\n    /**\n     * Remove an already existing index from a table\n     *\n     * @param {string} tableName                    Table name to drop index from\n     * @param {string|string[]} indexNameOrAttributes  Index name or list of attributes that in the index\n     * @param {object} [options]                    Query options\n     *\n     * @returns {Promise}\n     */\n\n  }, {\n    key: \"removeIndex\",\n    value: function () {\n      var _removeIndex = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee24(tableName, indexNameOrAttributes, options) {\n        var sql;\n        return _regeneratorRuntime.wrap(function _callee24$(_context24) {\n          while (1) {\n            switch (_context24.prev = _context24.next) {\n              case 0:\n                options = options || {};\n                sql = this.queryGenerator.removeIndexQuery(tableName, indexNameOrAttributes);\n                _context24.next = 4;\n                return this.sequelize.query(sql, options);\n\n              case 4:\n                return _context24.abrupt(\"return\", _context24.sent);\n\n              case 5:\n              case \"end\":\n                return _context24.stop();\n            }\n          }\n        }, _callee24, this);\n      }));\n\n      function removeIndex(_x56, _x57, _x58) {\n        return _removeIndex.apply(this, arguments);\n      }\n\n      return removeIndex;\n    }()\n    /**\n     * Add a constraint to a table\n     *\n     * Available constraints:\n     * - UNIQUE\n     * - DEFAULT (MSSQL only)\n     * - CHECK (MySQL - Ignored by the database engine )\n     * - FOREIGN KEY\n     * - PRIMARY KEY\n     *\n     * @example <caption>UNIQUE</caption>\n     * queryInterface.addConstraint('Users', {\n     *   fields: ['email'],\n     *   type: 'unique',\n     *   name: 'custom_unique_constraint_name'\n     * });\n     *\n     * @example <caption>CHECK</caption>\n     * queryInterface.addConstraint('Users', {\n     *   fields: ['roles'],\n     *   type: 'check',\n     *   where: {\n     *      roles: ['user', 'admin', 'moderator', 'guest']\n     *   }\n     * });\n     *\n     * @example <caption>Default - MSSQL only</caption>\n     * queryInterface.addConstraint('Users', {\n     *    fields: ['roles'],\n     *    type: 'default',\n     *    defaultValue: 'guest'\n     * });\n     *\n     * @example <caption>Primary Key</caption>\n     * queryInterface.addConstraint('Users', {\n     *    fields: ['username'],\n     *    type: 'primary key',\n     *    name: 'custom_primary_constraint_name'\n     * });\n     *\n     * @example <caption>Foreign Key</caption>\n     * queryInterface.addConstraint('Posts', {\n     *   fields: ['username'],\n     *   type: 'foreign key',\n     *   name: 'custom_fkey_constraint_name',\n     *   references: { //Required field\n     *     table: 'target_table_name',\n     *     field: 'target_column_name'\n     *   },\n     *   onDelete: 'cascade',\n     *   onUpdate: 'cascade'\n     * });\n     *\n     * @param {string} tableName                  Table name where you want to add a constraint\n     * @param {object} options                    An object to define the constraint name, type etc\n     * @param {string} options.type               Type of constraint. One of the values in available constraints(case insensitive)\n     * @param {Array}  options.fields             Array of column names to apply the constraint over\n     * @param {string} [options.name]             Name of the constraint. If not specified, sequelize automatically creates a named constraint based on constraint type, table & column names\n     * @param {string} [options.defaultValue]     The value for the default constraint\n     * @param {object} [options.where]            Where clause/expression for the CHECK constraint\n     * @param {object} [options.references]       Object specifying target table, column name to create foreign key constraint\n     * @param {string} [options.references.table] Target table name\n     * @param {string} [options.references.field] Target column name\n     *\n     * @returns {Promise}\n     */\n\n  }, {\n    key: \"addConstraint\",\n    value: function () {\n      var _addConstraint = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee25(tableName, options) {\n        var sql;\n        return _regeneratorRuntime.wrap(function _callee25$(_context25) {\n          while (1) {\n            switch (_context25.prev = _context25.next) {\n              case 0:\n                if (options.fields) {\n                  _context25.next = 2;\n                  break;\n                }\n\n                throw new Error('Fields must be specified through options.fields');\n\n              case 2:\n                if (options.type) {\n                  _context25.next = 4;\n                  break;\n                }\n\n                throw new Error('Constraint type must be specified through options.type');\n\n              case 4:\n                options = Utils.cloneDeep(options);\n                sql = this.queryGenerator.addConstraintQuery(tableName, options);\n                _context25.next = 8;\n                return this.sequelize.query(sql, options);\n\n              case 8:\n                return _context25.abrupt(\"return\", _context25.sent);\n\n              case 9:\n              case \"end\":\n                return _context25.stop();\n            }\n          }\n        }, _callee25, this);\n      }));\n\n      function addConstraint(_x59, _x60) {\n        return _addConstraint.apply(this, arguments);\n      }\n\n      return addConstraint;\n    }()\n  }, {\n    key: \"showConstraint\",\n    value: function () {\n      var _showConstraint = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee26(tableName, constraintName, options) {\n        var sql;\n        return _regeneratorRuntime.wrap(function _callee26$(_context26) {\n          while (1) {\n            switch (_context26.prev = _context26.next) {\n              case 0:\n                sql = this.queryGenerator.showConstraintsQuery(tableName, constraintName);\n                _context26.next = 3;\n                return this.sequelize.query(sql, _objectSpread({}, options, {\n                  type: QueryTypes.SHOWCONSTRAINTS\n                }));\n\n              case 3:\n                return _context26.abrupt(\"return\", _context26.sent);\n\n              case 4:\n              case \"end\":\n                return _context26.stop();\n            }\n          }\n        }, _callee26, this);\n      }));\n\n      function showConstraint(_x61, _x62, _x63) {\n        return _showConstraint.apply(this, arguments);\n      }\n\n      return showConstraint;\n    }()\n    /**\n     * Remove a constraint from a table\n     *\n     * @param {string} tableName       Table name to drop constraint from\n     * @param {string} constraintName  Constraint name\n     * @param {object} options         Query options\n     */\n\n  }, {\n    key: \"removeConstraint\",\n    value: function () {\n      var _removeConstraint = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee27(tableName, constraintName, options) {\n        return _regeneratorRuntime.wrap(function _callee27$(_context27) {\n          while (1) {\n            switch (_context27.prev = _context27.next) {\n              case 0:\n                return _context27.abrupt(\"return\", this.sequelize.query(this.queryGenerator.removeConstraintQuery(tableName, constraintName), options));\n\n              case 1:\n              case \"end\":\n                return _context27.stop();\n            }\n          }\n        }, _callee27, this);\n      }));\n\n      function removeConstraint(_x64, _x65, _x66) {\n        return _removeConstraint.apply(this, arguments);\n      }\n\n      return removeConstraint;\n    }()\n  }, {\n    key: \"insert\",\n    value: function () {\n      var _insert = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee28(instance, tableName, values, options) {\n        var sql, results;\n        return _regeneratorRuntime.wrap(function _callee28$(_context28) {\n          while (1) {\n            switch (_context28.prev = _context28.next) {\n              case 0:\n                options = Utils.cloneDeep(options);\n                options.hasTrigger = instance && instance.constructor.options.hasTrigger;\n                sql = this.queryGenerator.insertQuery(tableName, values, instance && instance.constructor.rawAttributes, options);\n                options.type = QueryTypes.INSERT;\n                options.instance = instance;\n                _context28.next = 7;\n                return this.sequelize.query(sql, options);\n\n              case 7:\n                results = _context28.sent;\n                if (instance) results[0].isNewRecord = false;\n                return _context28.abrupt(\"return\", results);\n\n              case 10:\n              case \"end\":\n                return _context28.stop();\n            }\n          }\n        }, _callee28, this);\n      }));\n\n      function insert(_x67, _x68, _x69, _x70) {\n        return _insert.apply(this, arguments);\n      }\n\n      return insert;\n    }()\n    /**\n     * Upsert\n     *\n     * @param {string} tableName    table to upsert on\n     * @param {object} insertValues values to be inserted, mapped to field name\n     * @param {object} updateValues values to be updated, mapped to field name\n     * @param {object} where        where conditions, which can be used for UPDATE part when INSERT fails\n     * @param {object} options      query options\n     *\n     * @returns {Promise<boolean,?number>} Resolves an array with <created, primaryKey>\n     */\n\n  }, {\n    key: \"upsert\",\n    value: function () {\n      var _upsert = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee29(tableName, insertValues, updateValues, where, options) {\n        var model, primaryKeys, uniqueKeys, indexKeys, _iterator4, _step4, _loop, _ret, sql;\n\n        return _regeneratorRuntime.wrap(function _callee29$(_context29) {\n          while (1) {\n            switch (_context29.prev = _context29.next) {\n              case 0:\n                options = _objectSpread({}, options);\n                model = options.model;\n                primaryKeys = Object.values(model.primaryKeys).map(function (item) {\n                  return item.field;\n                });\n                uniqueKeys = Object.values(model.uniqueKeys).filter(function (c) {\n                  return c.fields.length >= 1;\n                }).map(function (c) {\n                  return c.fields;\n                });\n                indexKeys = Object.values(model._indexes).filter(function (c) {\n                  return c.unique && c.fields.length >= 1;\n                }).map(function (c) {\n                  return c.fields;\n                });\n                options.type = QueryTypes.UPSERT;\n                options.updateOnDuplicate = Object.keys(updateValues);\n                options.upsertKeys = []; // For fields in updateValues, try to find a constraint or unique index\n                // that includes given field. Only first matching upsert key is used.\n\n                _iterator4 = _createForOfIteratorHelper(options.updateOnDuplicate);\n                _context29.prev = 9;\n\n                _loop = function _loop() {\n                  var field = _step4.value;\n                  var uniqueKey = uniqueKeys.find(function (fields) {\n                    return fields.includes(field);\n                  });\n\n                  if (uniqueKey) {\n                    options.upsertKeys = uniqueKey;\n                    return \"break\";\n                  }\n\n                  var indexKey = indexKeys.find(function (fields) {\n                    return fields.includes(field);\n                  });\n\n                  if (indexKey) {\n                    options.upsertKeys = indexKey;\n                    return \"break\";\n                  }\n                };\n\n                _iterator4.s();\n\n              case 12:\n                if ((_step4 = _iterator4.n()).done) {\n                  _context29.next = 18;\n                  break;\n                }\n\n                _ret = _loop();\n\n                if (!(_ret === \"break\")) {\n                  _context29.next = 16;\n                  break;\n                }\n\n                return _context29.abrupt(\"break\", 18);\n\n              case 16:\n                _context29.next = 12;\n                break;\n\n              case 18:\n                _context29.next = 23;\n                break;\n\n              case 20:\n                _context29.prev = 20;\n                _context29.t0 = _context29[\"catch\"](9);\n\n                _iterator4.e(_context29.t0);\n\n              case 23:\n                _context29.prev = 23;\n\n                _iterator4.f();\n\n                return _context29.finish(23);\n\n              case 26:\n                // Always use PK, if no constraint available OR update data contains PK\n                if (options.upsertKeys.length === 0 || _.intersection(options.updateOnDuplicate, primaryKeys).length) {\n                  options.upsertKeys = primaryKeys;\n                }\n\n                options.upsertKeys = _.uniq(options.upsertKeys);\n                sql = this.queryGenerator.insertQuery(tableName, insertValues, model.rawAttributes, options);\n                _context29.next = 31;\n                return this.sequelize.query(sql, options);\n\n              case 31:\n                return _context29.abrupt(\"return\", _context29.sent);\n\n              case 32:\n              case \"end\":\n                return _context29.stop();\n            }\n          }\n        }, _callee29, this, [[9, 20, 23, 26]]);\n      }));\n\n      function upsert(_x71, _x72, _x73, _x74, _x75) {\n        return _upsert.apply(this, arguments);\n      }\n\n      return upsert;\n    }()\n    /**\n     * Insert multiple records into a table\n     *\n     * @example\n     * queryInterface.bulkInsert('roles', [{\n     *    label: 'user',\n     *    createdAt: new Date(),\n     *    updatedAt: new Date()\n     *  }, {\n     *    label: 'admin',\n     *    createdAt: new Date(),\n     *    updatedAt: new Date()\n     *  }]);\n     *\n     * @param {string} tableName   Table name to insert record to\n     * @param {Array}  records     List of records to insert\n     * @param {object} options     Various options, please see Model.bulkCreate options\n     * @param {object} attributes  Various attributes mapped by field name\n     *\n     * @returns {Promise}\n     */\n\n  }, {\n    key: \"bulkInsert\",\n    value: function () {\n      var _bulkInsert = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee30(tableName, records, options, attributes) {\n        var results;\n        return _regeneratorRuntime.wrap(function _callee30$(_context30) {\n          while (1) {\n            switch (_context30.prev = _context30.next) {\n              case 0:\n                options = _objectSpread({}, options);\n                options.type = QueryTypes.INSERT;\n                _context30.next = 4;\n                return this.sequelize.query(this.queryGenerator.bulkInsertQuery(tableName, records, options, attributes), options);\n\n              case 4:\n                results = _context30.sent;\n                return _context30.abrupt(\"return\", results[0]);\n\n              case 6:\n              case \"end\":\n                return _context30.stop();\n            }\n          }\n        }, _callee30, this);\n      }));\n\n      function bulkInsert(_x76, _x77, _x78, _x79) {\n        return _bulkInsert.apply(this, arguments);\n      }\n\n      return bulkInsert;\n    }()\n  }, {\n    key: \"update\",\n    value: function () {\n      var _update = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee31(instance, tableName, values, identifier, options) {\n        var sql;\n        return _regeneratorRuntime.wrap(function _callee31$(_context31) {\n          while (1) {\n            switch (_context31.prev = _context31.next) {\n              case 0:\n                options = _objectSpread({}, options);\n                options.hasTrigger = instance && instance.constructor.options.hasTrigger;\n                sql = this.queryGenerator.updateQuery(tableName, values, identifier, options, instance.constructor.rawAttributes);\n                options.type = QueryTypes.UPDATE;\n                options.instance = instance;\n                _context31.next = 7;\n                return this.sequelize.query(sql, options);\n\n              case 7:\n                return _context31.abrupt(\"return\", _context31.sent);\n\n              case 8:\n              case \"end\":\n                return _context31.stop();\n            }\n          }\n        }, _callee31, this);\n      }));\n\n      function update(_x80, _x81, _x82, _x83, _x84) {\n        return _update.apply(this, arguments);\n      }\n\n      return update;\n    }()\n    /**\n     * Update multiple records of a table\n     *\n     * @example\n     * queryInterface.bulkUpdate('roles', {\n     *     label: 'admin',\n     *   }, {\n     *     userType: 3,\n     *   },\n     * );\n     *\n     * @param {string} tableName     Table name to update\n     * @param {object} values        Values to be inserted, mapped to field name\n     * @param {object} identifier    A hash with conditions OR an ID as integer OR a string with conditions\n     * @param {object} [options]     Various options, please see Model.bulkCreate options\n     * @param {object} [attributes]  Attributes on return objects if supported by SQL dialect\n     *\n     * @returns {Promise}\n     */\n\n  }, {\n    key: \"bulkUpdate\",\n    value: function () {\n      var _bulkUpdate = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee32(tableName, values, identifier, options, attributes) {\n        var sql, table, model;\n        return _regeneratorRuntime.wrap(function _callee32$(_context32) {\n          while (1) {\n            switch (_context32.prev = _context32.next) {\n              case 0:\n                options = Utils.cloneDeep(options);\n                if (typeof identifier === 'object') identifier = Utils.cloneDeep(identifier);\n                sql = this.queryGenerator.updateQuery(tableName, values, identifier, options, attributes);\n                table = _.isObject(tableName) ? tableName : {\n                  tableName: tableName\n                };\n                model = _.find(this.sequelize.modelManager.models, {\n                  tableName: table.tableName\n                });\n                options.type = QueryTypes.BULKUPDATE;\n                options.model = model;\n                _context32.next = 9;\n                return this.sequelize.query(sql, options);\n\n              case 9:\n                return _context32.abrupt(\"return\", _context32.sent);\n\n              case 10:\n              case \"end\":\n                return _context32.stop();\n            }\n          }\n        }, _callee32, this);\n      }));\n\n      function bulkUpdate(_x85, _x86, _x87, _x88, _x89) {\n        return _bulkUpdate.apply(this, arguments);\n      }\n\n      return bulkUpdate;\n    }()\n  }, {\n    key: \"delete\",\n    value: function () {\n      var _delete2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee33(instance, tableName, identifier, options) {\n        var cascades, sql, keys, length, association, i, _i, _cascades, cascade, instances, _iterator5, _step5, _instance;\n\n        return _regeneratorRuntime.wrap(function _callee33$(_context33) {\n          while (1) {\n            switch (_context33.prev = _context33.next) {\n              case 0:\n                cascades = [];\n                sql = this.queryGenerator.deleteQuery(tableName, identifier, {}, instance.constructor);\n                options = _objectSpread({}, options); // Check for a restrict field\n\n                if (!!instance.constructor && !!instance.constructor.associations) {\n                  keys = Object.keys(instance.constructor.associations);\n                  length = keys.length;\n\n                  for (i = 0; i < length; i++) {\n                    association = instance.constructor.associations[keys[i]];\n\n                    if (association.options && association.options.onDelete && association.options.onDelete.toLowerCase() === 'cascade' && association.options.useHooks === true) {\n                      cascades.push(association.accessors.get);\n                    }\n                  }\n                }\n\n                _i = 0, _cascades = cascades;\n\n              case 5:\n                if (!(_i < _cascades.length)) {\n                  _context33.next = 33;\n                  break;\n                }\n\n                cascade = _cascades[_i];\n                _context33.next = 9;\n                return instance[cascade](options);\n\n              case 9:\n                instances = _context33.sent;\n\n                if (instances) {\n                  _context33.next = 12;\n                  break;\n                }\n\n                return _context33.abrupt(\"continue\", 30);\n\n              case 12:\n                if (!Array.isArray(instances)) instances = [instances];\n                _iterator5 = _createForOfIteratorHelper(instances);\n                _context33.prev = 14;\n\n                _iterator5.s();\n\n              case 16:\n                if ((_step5 = _iterator5.n()).done) {\n                  _context33.next = 22;\n                  break;\n                }\n\n                _instance = _step5.value;\n                _context33.next = 20;\n                return _instance.destroy(options);\n\n              case 20:\n                _context33.next = 16;\n                break;\n\n              case 22:\n                _context33.next = 27;\n                break;\n\n              case 24:\n                _context33.prev = 24;\n                _context33.t0 = _context33[\"catch\"](14);\n\n                _iterator5.e(_context33.t0);\n\n              case 27:\n                _context33.prev = 27;\n\n                _iterator5.f();\n\n                return _context33.finish(27);\n\n              case 30:\n                _i++;\n                _context33.next = 5;\n                break;\n\n              case 33:\n                options.instance = instance;\n                _context33.next = 36;\n                return this.sequelize.query(sql, options);\n\n              case 36:\n                return _context33.abrupt(\"return\", _context33.sent);\n\n              case 37:\n              case \"end\":\n                return _context33.stop();\n            }\n          }\n        }, _callee33, this, [[14, 24, 27, 30]]);\n      }));\n\n      function _delete(_x90, _x91, _x92, _x93) {\n        return _delete2.apply(this, arguments);\n      }\n\n      return _delete;\n    }()\n    /**\n     * Delete multiple records from a table\n     *\n     * @param {string}  tableName            table name from where to delete records\n     * @param {object}  where                where conditions to find records to delete\n     * @param {object}  [options]            options\n     * @param {boolean} [options.truncate]   Use truncate table command\n     * @param {boolean} [options.cascade=false]         Only used in conjunction with TRUNCATE. Truncates  all tables that have foreign-key references to the named table, or to any tables added to the group due to CASCADE.\n     * @param {boolean} [options.restartIdentity=false] Only used in conjunction with TRUNCATE. Automatically restart sequences owned by columns of the truncated table.\n     * @param {Model}   [model]              Model\n     *\n     * @returns {Promise}\n     */\n\n  }, {\n    key: \"bulkDelete\",\n    value: function () {\n      var _bulkDelete = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee34(tableName, where, options, model) {\n        return _regeneratorRuntime.wrap(function _callee34$(_context34) {\n          while (1) {\n            switch (_context34.prev = _context34.next) {\n              case 0:\n                options = Utils.cloneDeep(options);\n                options = _.defaults(options, {\n                  limit: null\n                });\n\n                if (!(options.truncate === true)) {\n                  _context34.next = 4;\n                  break;\n                }\n\n                return _context34.abrupt(\"return\", this.sequelize.query(this.queryGenerator.truncateTableQuery(tableName, options), options));\n\n              case 4:\n                if (typeof identifier === 'object') where = Utils.cloneDeep(where);\n                _context34.next = 7;\n                return this.sequelize.query(this.queryGenerator.deleteQuery(tableName, where, options, model), options);\n\n              case 7:\n                return _context34.abrupt(\"return\", _context34.sent);\n\n              case 8:\n              case \"end\":\n                return _context34.stop();\n            }\n          }\n        }, _callee34, this);\n      }));\n\n      function bulkDelete(_x94, _x95, _x96, _x97) {\n        return _bulkDelete.apply(this, arguments);\n      }\n\n      return bulkDelete;\n    }()\n  }, {\n    key: \"select\",\n    value: function () {\n      var _select = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee35(model, tableName, optionsArg) {\n        var options;\n        return _regeneratorRuntime.wrap(function _callee35$(_context35) {\n          while (1) {\n            switch (_context35.prev = _context35.next) {\n              case 0:\n                options = _objectSpread({}, optionsArg, {\n                  type: QueryTypes.SELECT,\n                  model: model\n                });\n                _context35.next = 3;\n                return this.sequelize.query(this.queryGenerator.selectQuery(tableName, options, model), options);\n\n              case 3:\n                return _context35.abrupt(\"return\", _context35.sent);\n\n              case 4:\n              case \"end\":\n                return _context35.stop();\n            }\n          }\n        }, _callee35, this);\n      }));\n\n      function select(_x98, _x99, _x100) {\n        return _select.apply(this, arguments);\n      }\n\n      return select;\n    }()\n  }, {\n    key: \"increment\",\n    value: function () {\n      var _increment = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee36(model, tableName, where, incrementAmountsByField, extraAttributesToBeUpdated, options) {\n        var sql;\n        return _regeneratorRuntime.wrap(function _callee36$(_context36) {\n          while (1) {\n            switch (_context36.prev = _context36.next) {\n              case 0:\n                options = Utils.cloneDeep(options);\n                sql = this.queryGenerator.arithmeticQuery('+', tableName, where, incrementAmountsByField, extraAttributesToBeUpdated, options);\n                options.type = QueryTypes.UPDATE;\n                options.model = model;\n                _context36.next = 6;\n                return this.sequelize.query(sql, options);\n\n              case 6:\n                return _context36.abrupt(\"return\", _context36.sent);\n\n              case 7:\n              case \"end\":\n                return _context36.stop();\n            }\n          }\n        }, _callee36, this);\n      }));\n\n      function increment(_x101, _x102, _x103, _x104, _x105, _x106) {\n        return _increment.apply(this, arguments);\n      }\n\n      return increment;\n    }()\n  }, {\n    key: \"decrement\",\n    value: function () {\n      var _decrement = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee37(model, tableName, where, incrementAmountsByField, extraAttributesToBeUpdated, options) {\n        var sql;\n        return _regeneratorRuntime.wrap(function _callee37$(_context37) {\n          while (1) {\n            switch (_context37.prev = _context37.next) {\n              case 0:\n                options = Utils.cloneDeep(options);\n                sql = this.queryGenerator.arithmeticQuery('-', tableName, where, incrementAmountsByField, extraAttributesToBeUpdated, options);\n                options.type = QueryTypes.UPDATE;\n                options.model = model;\n                _context37.next = 6;\n                return this.sequelize.query(sql, options);\n\n              case 6:\n                return _context37.abrupt(\"return\", _context37.sent);\n\n              case 7:\n              case \"end\":\n                return _context37.stop();\n            }\n          }\n        }, _callee37, this);\n      }));\n\n      function decrement(_x107, _x108, _x109, _x110, _x111, _x112) {\n        return _decrement.apply(this, arguments);\n      }\n\n      return decrement;\n    }()\n  }, {\n    key: \"rawSelect\",\n    value: function () {\n      var _rawSelect = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee38(tableName, options, attributeSelector, Model) {\n        var sql, data, result, dataType;\n        return _regeneratorRuntime.wrap(function _callee38$(_context38) {\n          while (1) {\n            switch (_context38.prev = _context38.next) {\n              case 0:\n                options = Utils.cloneDeep(options);\n                options = _.defaults(options, {\n                  raw: true,\n                  plain: true,\n                  type: QueryTypes.SELECT\n                });\n                sql = this.queryGenerator.selectQuery(tableName, options, Model);\n\n                if (!(attributeSelector === undefined)) {\n                  _context38.next = 5;\n                  break;\n                }\n\n                throw new Error('Please pass an attribute selector!');\n\n              case 5:\n                _context38.next = 7;\n                return this.sequelize.query(sql, options);\n\n              case 7:\n                data = _context38.sent;\n\n                if (options.plain) {\n                  _context38.next = 10;\n                  break;\n                }\n\n                return _context38.abrupt(\"return\", data);\n\n              case 10:\n                result = data ? data[attributeSelector] : null;\n\n                if (!(!options || !options.dataType)) {\n                  _context38.next = 13;\n                  break;\n                }\n\n                return _context38.abrupt(\"return\", result);\n\n              case 13:\n                dataType = options.dataType;\n\n                if (!(dataType instanceof DataTypes.DECIMAL || dataType instanceof DataTypes.FLOAT)) {\n                  _context38.next = 17;\n                  break;\n                }\n\n                if (!(result !== null)) {\n                  _context38.next = 17;\n                  break;\n                }\n\n                return _context38.abrupt(\"return\", parseFloat(result));\n\n              case 17:\n                if (!(dataType instanceof DataTypes.INTEGER || dataType instanceof DataTypes.BIGINT)) {\n                  _context38.next = 19;\n                  break;\n                }\n\n                return _context38.abrupt(\"return\", parseInt(result, 10));\n\n              case 19:\n                if (!(dataType instanceof DataTypes.DATE)) {\n                  _context38.next = 22;\n                  break;\n                }\n\n                if (!(result !== null && !(result instanceof Date))) {\n                  _context38.next = 22;\n                  break;\n                }\n\n                return _context38.abrupt(\"return\", new Date(result));\n\n              case 22:\n                return _context38.abrupt(\"return\", result);\n\n              case 23:\n              case \"end\":\n                return _context38.stop();\n            }\n          }\n        }, _callee38, this);\n      }));\n\n      function rawSelect(_x113, _x114, _x115, _x116) {\n        return _rawSelect.apply(this, arguments);\n      }\n\n      return rawSelect;\n    }()\n  }, {\n    key: \"createTrigger\",\n    value: function () {\n      var _createTrigger = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee39(tableName, triggerName, timingType, fireOnArray, functionName, functionParams, optionsArray, options) {\n        var sql;\n        return _regeneratorRuntime.wrap(function _callee39$(_context39) {\n          while (1) {\n            switch (_context39.prev = _context39.next) {\n              case 0:\n                sql = this.queryGenerator.createTrigger(tableName, triggerName, timingType, fireOnArray, functionName, functionParams, optionsArray);\n                options = options || {};\n\n                if (!sql) {\n                  _context39.next = 6;\n                  break;\n                }\n\n                _context39.next = 5;\n                return this.sequelize.query(sql, options);\n\n              case 5:\n                return _context39.abrupt(\"return\", _context39.sent);\n\n              case 6:\n              case \"end\":\n                return _context39.stop();\n            }\n          }\n        }, _callee39, this);\n      }));\n\n      function createTrigger(_x117, _x118, _x119, _x120, _x121, _x122, _x123, _x124) {\n        return _createTrigger.apply(this, arguments);\n      }\n\n      return createTrigger;\n    }()\n  }, {\n    key: \"dropTrigger\",\n    value: function () {\n      var _dropTrigger = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee40(tableName, triggerName, options) {\n        var sql;\n        return _regeneratorRuntime.wrap(function _callee40$(_context40) {\n          while (1) {\n            switch (_context40.prev = _context40.next) {\n              case 0:\n                sql = this.queryGenerator.dropTrigger(tableName, triggerName);\n                options = options || {};\n\n                if (!sql) {\n                  _context40.next = 6;\n                  break;\n                }\n\n                _context40.next = 5;\n                return this.sequelize.query(sql, options);\n\n              case 5:\n                return _context40.abrupt(\"return\", _context40.sent);\n\n              case 6:\n              case \"end\":\n                return _context40.stop();\n            }\n          }\n        }, _callee40, this);\n      }));\n\n      function dropTrigger(_x125, _x126, _x127) {\n        return _dropTrigger.apply(this, arguments);\n      }\n\n      return dropTrigger;\n    }()\n  }, {\n    key: \"renameTrigger\",\n    value: function () {\n      var _renameTrigger = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee41(tableName, oldTriggerName, newTriggerName, options) {\n        var sql;\n        return _regeneratorRuntime.wrap(function _callee41$(_context41) {\n          while (1) {\n            switch (_context41.prev = _context41.next) {\n              case 0:\n                sql = this.queryGenerator.renameTrigger(tableName, oldTriggerName, newTriggerName);\n                options = options || {};\n\n                if (!sql) {\n                  _context41.next = 6;\n                  break;\n                }\n\n                _context41.next = 5;\n                return this.sequelize.query(sql, options);\n\n              case 5:\n                return _context41.abrupt(\"return\", _context41.sent);\n\n              case 6:\n              case \"end\":\n                return _context41.stop();\n            }\n          }\n        }, _callee41, this);\n      }));\n\n      function renameTrigger(_x128, _x129, _x130, _x131) {\n        return _renameTrigger.apply(this, arguments);\n      }\n\n      return renameTrigger;\n    }()\n    /**\n     * Create an SQL function\n     *\n     * @example\n     * queryInterface.createFunction(\n     *   'someFunction',\n     *   [\n     *     {type: 'integer', name: 'param', direction: 'IN'}\n     *   ],\n     *   'integer',\n     *   'plpgsql',\n     *   'RETURN param + 1;',\n     *   [\n     *     'IMMUTABLE',\n     *     'LEAKPROOF'\n     *   ],\n     *   {\n     *    variables:\n     *      [\n     *        {type: 'integer', name: 'myVar', default: 100}\n     *      ],\n     *      force: true\n     *   };\n     * );\n     *\n     * @param {string}  functionName  Name of SQL function to create\n     * @param {Array}   params        List of parameters declared for SQL function\n     * @param {string}  returnType    SQL type of function returned value\n     * @param {string}  language      The name of the language that the function is implemented in\n     * @param {string}  body          Source code of function\n     * @param {Array}   optionsArray  Extra-options for creation\n     * @param {object}  [options]     query options\n     * @param {boolean} options.force If force is true, any existing functions with the same parameters will be replaced. For postgres, this means using `CREATE OR REPLACE FUNCTION` instead of `CREATE FUNCTION`. Default is false\n     * @param {Array<object>}   options.variables List of declared variables. Each variable should be an object with string fields `type` and `name`, and optionally having a `default` field as well.\n     *\n     * @returns {Promise}\n     */\n\n  }, {\n    key: \"createFunction\",\n    value: function () {\n      var _createFunction = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee42(functionName, params, returnType, language, body, optionsArray, options) {\n        var sql;\n        return _regeneratorRuntime.wrap(function _callee42$(_context42) {\n          while (1) {\n            switch (_context42.prev = _context42.next) {\n              case 0:\n                sql = this.queryGenerator.createFunction(functionName, params, returnType, language, body, optionsArray, options);\n                options = options || {};\n\n                if (!sql) {\n                  _context42.next = 6;\n                  break;\n                }\n\n                _context42.next = 5;\n                return this.sequelize.query(sql, options);\n\n              case 5:\n                return _context42.abrupt(\"return\", _context42.sent);\n\n              case 6:\n              case \"end\":\n                return _context42.stop();\n            }\n          }\n        }, _callee42, this);\n      }));\n\n      function createFunction(_x132, _x133, _x134, _x135, _x136, _x137, _x138) {\n        return _createFunction.apply(this, arguments);\n      }\n\n      return createFunction;\n    }()\n    /**\n     * Drop an SQL function\n     *\n     * @example\n     * queryInterface.dropFunction(\n     *   'someFunction',\n     *   [\n     *     {type: 'varchar', name: 'param1', direction: 'IN'},\n     *     {type: 'integer', name: 'param2', direction: 'INOUT'}\n     *   ]\n     * );\n     *\n     * @param {string} functionName Name of SQL function to drop\n     * @param {Array}  params       List of parameters declared for SQL function\n     * @param {object} [options]    query options\n     *\n     * @returns {Promise}\n     */\n\n  }, {\n    key: \"dropFunction\",\n    value: function () {\n      var _dropFunction = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee43(functionName, params, options) {\n        var sql;\n        return _regeneratorRuntime.wrap(function _callee43$(_context43) {\n          while (1) {\n            switch (_context43.prev = _context43.next) {\n              case 0:\n                sql = this.queryGenerator.dropFunction(functionName, params);\n                options = options || {};\n\n                if (!sql) {\n                  _context43.next = 6;\n                  break;\n                }\n\n                _context43.next = 5;\n                return this.sequelize.query(sql, options);\n\n              case 5:\n                return _context43.abrupt(\"return\", _context43.sent);\n\n              case 6:\n              case \"end\":\n                return _context43.stop();\n            }\n          }\n        }, _callee43, this);\n      }));\n\n      function dropFunction(_x139, _x140, _x141) {\n        return _dropFunction.apply(this, arguments);\n      }\n\n      return dropFunction;\n    }()\n    /**\n     * Rename an SQL function\n     *\n     * @example\n     * queryInterface.renameFunction(\n     *   'fooFunction',\n     *   [\n     *     {type: 'varchar', name: 'param1', direction: 'IN'},\n     *     {type: 'integer', name: 'param2', direction: 'INOUT'}\n     *   ],\n     *   'barFunction'\n     * );\n     *\n     * @param {string} oldFunctionName  Current name of function\n     * @param {Array}  params           List of parameters declared for SQL function\n     * @param {string} newFunctionName  New name of function\n     * @param {object} [options]        query options\n     *\n     * @returns {Promise}\n     */\n\n  }, {\n    key: \"renameFunction\",\n    value: function () {\n      var _renameFunction = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee44(oldFunctionName, params, newFunctionName, options) {\n        var sql;\n        return _regeneratorRuntime.wrap(function _callee44$(_context44) {\n          while (1) {\n            switch (_context44.prev = _context44.next) {\n              case 0:\n                sql = this.queryGenerator.renameFunction(oldFunctionName, params, newFunctionName);\n                options = options || {};\n\n                if (!sql) {\n                  _context44.next = 6;\n                  break;\n                }\n\n                _context44.next = 5;\n                return this.sequelize.query(sql, options);\n\n              case 5:\n                return _context44.abrupt(\"return\", _context44.sent);\n\n              case 6:\n              case \"end\":\n                return _context44.stop();\n            }\n          }\n        }, _callee44, this);\n      }));\n\n      function renameFunction(_x142, _x143, _x144, _x145) {\n        return _renameFunction.apply(this, arguments);\n      }\n\n      return renameFunction;\n    }() // Helper methods useful for querying\n\n    /**\n     * @private\n     */\n\n  }, {\n    key: \"ensureEnums\",\n    value: function ensureEnums() {// noop by default\n    }\n  }, {\n    key: \"setIsolationLevel\",\n    value: function () {\n      var _setIsolationLevel = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee45(transaction, value, options) {\n        var sql;\n        return _regeneratorRuntime.wrap(function _callee45$(_context45) {\n          while (1) {\n            switch (_context45.prev = _context45.next) {\n              case 0:\n                if (!(!transaction || !(transaction instanceof Transaction))) {\n                  _context45.next = 2;\n                  break;\n                }\n\n                throw new Error('Unable to set isolation level for a transaction without transaction object!');\n\n              case 2:\n                if (!(transaction.parent || !value)) {\n                  _context45.next = 4;\n                  break;\n                }\n\n                return _context45.abrupt(\"return\");\n\n              case 4:\n                options = _objectSpread({}, options, {\n                  transaction: transaction.parent || transaction\n                });\n                sql = this.queryGenerator.setIsolationLevelQuery(value, {\n                  parent: transaction.parent\n                });\n\n                if (sql) {\n                  _context45.next = 8;\n                  break;\n                }\n\n                return _context45.abrupt(\"return\");\n\n              case 8:\n                _context45.next = 10;\n                return this.sequelize.query(sql, options);\n\n              case 10:\n                return _context45.abrupt(\"return\", _context45.sent);\n\n              case 11:\n              case \"end\":\n                return _context45.stop();\n            }\n          }\n        }, _callee45, this);\n      }));\n\n      function setIsolationLevel(_x146, _x147, _x148) {\n        return _setIsolationLevel.apply(this, arguments);\n      }\n\n      return setIsolationLevel;\n    }()\n  }, {\n    key: \"startTransaction\",\n    value: function () {\n      var _startTransaction = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee46(transaction, options) {\n        var sql;\n        return _regeneratorRuntime.wrap(function _callee46$(_context46) {\n          while (1) {\n            switch (_context46.prev = _context46.next) {\n              case 0:\n                if (!(!transaction || !(transaction instanceof Transaction))) {\n                  _context46.next = 2;\n                  break;\n                }\n\n                throw new Error('Unable to start a transaction without transaction object!');\n\n              case 2:\n                options = _objectSpread({}, options, {\n                  transaction: transaction.parent || transaction\n                });\n                options.transaction.name = transaction.parent ? transaction.name : undefined;\n                sql = this.queryGenerator.startTransactionQuery(transaction);\n                _context46.next = 7;\n                return this.sequelize.query(sql, options);\n\n              case 7:\n                return _context46.abrupt(\"return\", _context46.sent);\n\n              case 8:\n              case \"end\":\n                return _context46.stop();\n            }\n          }\n        }, _callee46, this);\n      }));\n\n      function startTransaction(_x149, _x150) {\n        return _startTransaction.apply(this, arguments);\n      }\n\n      return startTransaction;\n    }()\n  }, {\n    key: \"deferConstraints\",\n    value: function () {\n      var _deferConstraints = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee47(transaction, options) {\n        var sql;\n        return _regeneratorRuntime.wrap(function _callee47$(_context47) {\n          while (1) {\n            switch (_context47.prev = _context47.next) {\n              case 0:\n                options = _objectSpread({}, options, {\n                  transaction: transaction.parent || transaction\n                });\n                sql = this.queryGenerator.deferConstraintsQuery(options);\n\n                if (!sql) {\n                  _context47.next = 6;\n                  break;\n                }\n\n                _context47.next = 5;\n                return this.sequelize.query(sql, options);\n\n              case 5:\n                return _context47.abrupt(\"return\", _context47.sent);\n\n              case 6:\n              case \"end\":\n                return _context47.stop();\n            }\n          }\n        }, _callee47, this);\n      }));\n\n      function deferConstraints(_x151, _x152) {\n        return _deferConstraints.apply(this, arguments);\n      }\n\n      return deferConstraints;\n    }()\n  }, {\n    key: \"commitTransaction\",\n    value: function () {\n      var _commitTransaction = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee48(transaction, options) {\n        var sql, promise;\n        return _regeneratorRuntime.wrap(function _callee48$(_context48) {\n          while (1) {\n            switch (_context48.prev = _context48.next) {\n              case 0:\n                if (!(!transaction || !(transaction instanceof Transaction))) {\n                  _context48.next = 2;\n                  break;\n                }\n\n                throw new Error('Unable to commit a transaction without transaction object!');\n\n              case 2:\n                if (!transaction.parent) {\n                  _context48.next = 4;\n                  break;\n                }\n\n                return _context48.abrupt(\"return\");\n\n              case 4:\n                options = _objectSpread({}, options, {\n                  transaction: transaction.parent || transaction,\n                  supportsSearchPath: false,\n                  completesTransaction: true\n                });\n                sql = this.queryGenerator.commitTransactionQuery(transaction);\n                promise = this.sequelize.query(sql, options);\n                transaction.finished = 'commit';\n                _context48.next = 10;\n                return promise;\n\n              case 10:\n                return _context48.abrupt(\"return\", _context48.sent);\n\n              case 11:\n              case \"end\":\n                return _context48.stop();\n            }\n          }\n        }, _callee48, this);\n      }));\n\n      function commitTransaction(_x153, _x154) {\n        return _commitTransaction.apply(this, arguments);\n      }\n\n      return commitTransaction;\n    }()\n  }, {\n    key: \"rollbackTransaction\",\n    value: function () {\n      var _rollbackTransaction = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee49(transaction, options) {\n        var sql, promise;\n        return _regeneratorRuntime.wrap(function _callee49$(_context49) {\n          while (1) {\n            switch (_context49.prev = _context49.next) {\n              case 0:\n                if (!(!transaction || !(transaction instanceof Transaction))) {\n                  _context49.next = 2;\n                  break;\n                }\n\n                throw new Error('Unable to rollback a transaction without transaction object!');\n\n              case 2:\n                options = _objectSpread({}, options, {\n                  transaction: transaction.parent || transaction,\n                  supportsSearchPath: false,\n                  completesTransaction: true\n                });\n                options.transaction.name = transaction.parent ? transaction.name : undefined;\n                sql = this.queryGenerator.rollbackTransactionQuery(transaction);\n                promise = this.sequelize.query(sql, options);\n                transaction.finished = 'rollback';\n                _context49.next = 9;\n                return promise;\n\n              case 9:\n                return _context49.abrupt(\"return\", _context49.sent);\n\n              case 10:\n              case \"end\":\n                return _context49.stop();\n            }\n          }\n        }, _callee49, this);\n      }));\n\n      function rollbackTransaction(_x155, _x156) {\n        return _rollbackTransaction.apply(this, arguments);\n      }\n\n      return rollbackTransaction;\n    }()\n  }]);\n\n  return QueryInterface;\n}();\n\nexports.QueryInterface = QueryInterface;","map":null,"metadata":{},"sourceType":"script"}