{"ast":null,"code":"'use strict';\n\nvar _classCallCheck = require(\"/Users/jervisbay/project-tres/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/Users/jervisbay/project-tres/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\n\nvar _possibleConstructorReturn = require(\"/Users/jervisbay/project-tres/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/possibleConstructorReturn\");\n\nvar _getPrototypeOf = require(\"/Users/jervisbay/project-tres/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/getPrototypeOf\");\n\nvar _inherits = require(\"/Users/jervisbay/project-tres/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/inherits\");\n\nvar Command = require('./command.js');\n\nvar Query = require('./query.js');\n\nvar Packets = require('../packets/index.js');\n\nvar getBinaryParser = require('../parsers/binary_parser.js');\n\nvar Execute = /*#__PURE__*/function (_Command) {\n  _inherits(Execute, _Command);\n\n  function Execute(options, callback) {\n    var _this;\n\n    _classCallCheck(this, Execute);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Execute).call(this));\n    _this.statement = options.statement;\n    _this.sql = options.sql;\n    _this.values = options.values;\n    _this.onResult = callback;\n    _this.parameters = options.values;\n    _this.insertId = 0;\n    _this._rows = [];\n    _this._fields = [];\n    _this._result = [];\n    _this._fieldCount = 0;\n    _this._rowParser = null;\n    _this._executeOptions = options;\n    _this._resultIndex = 0;\n    _this._localStream = null;\n\n    _this._unpipeStream = function () {};\n\n    _this._streamFactory = options.infileStreamFactory;\n    _this._connection = null;\n    return _this;\n  }\n\n  _createClass(Execute, [{\n    key: \"buildParserFromFields\",\n    value: function buildParserFromFields(fields, connection) {\n      return getBinaryParser(fields, this.options, connection.config);\n    }\n  }, {\n    key: \"start\",\n    value: function start(packet, connection) {\n      this._connection = connection;\n      this.options = Object.assign({}, connection.config, this._executeOptions);\n      var executePacket = new Packets.Execute(this.statement.id, this.parameters, connection.config.charsetNumber, connection.config.timezone); //For reasons why this try-catch is here, please see\n      // https://github.com/sidorares/node-mysql2/pull/689\n      //For additional discussion, see\n      // 1. https://github.com/sidorares/node-mysql2/issues/493\n      // 2. https://github.com/sidorares/node-mysql2/issues/187\n      // 3. https://github.com/sidorares/node-mysql2/issues/480\n\n      try {\n        connection.writePacket(executePacket.toPacket(1));\n      } catch (error) {\n        this.onResult(error);\n      }\n\n      return Execute.prototype.resultsetHeader;\n    }\n  }, {\n    key: \"readField\",\n    value: function readField(packet, connection) {\n      var fields; // disabling for now, but would be great to find reliable way to parse fields only once\n      // fields reported by prepare can be empty at all or just incorrect - see #169\n      //\n      // perfomance optimisation: if we already have this field parsed in statement header, use one from header\n      // const field = this.statement.columns.length == this._fieldCount ?\n      //  this.statement.columns[this._receivedFieldsCount] : new Packets.ColumnDefinition(packet);\n\n      var field = new Packets.ColumnDefinition(packet, connection.clientEncoding);\n      this._receivedFieldsCount++;\n\n      this._fields[this._resultIndex].push(field);\n\n      if (this._receivedFieldsCount === this._fieldCount) {\n        fields = this._fields[this._resultIndex];\n        this.emit('fields', fields, this._resultIndex);\n        return Execute.prototype.fieldsEOF;\n      }\n\n      return Execute.prototype.readField;\n    }\n  }, {\n    key: \"fieldsEOF\",\n    value: function fieldsEOF(packet, connection) {\n      // check EOF\n      if (!packet.isEOF()) {\n        return connection.protocolError('Expected EOF packet');\n      }\n\n      this._rowParser = this.buildParserFromFields(this._fields[this._resultIndex], connection);\n      return Execute.prototype.row;\n    }\n  }]);\n\n  return Execute;\n}(Command);\n\nExecute.prototype.done = Query.prototype.done;\nExecute.prototype.doneInsert = Query.prototype.doneInsert;\nExecute.prototype.resultsetHeader = Query.prototype.resultsetHeader;\nExecute.prototype._findOrCreateReadStream = Query.prototype._findOrCreateReadStream;\nExecute.prototype._streamLocalInfile = Query.prototype._streamLocalInfile;\nExecute.prototype.row = Query.prototype.row;\nExecute.prototype.stream = Query.prototype.stream;\nmodule.exports = Execute;","map":null,"metadata":{},"sourceType":"script"}