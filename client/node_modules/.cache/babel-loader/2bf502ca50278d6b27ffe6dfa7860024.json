{"ast":null,"code":"'use strict';\n\nvar _regeneratorRuntime = require(\"/Users/jervisbay/project-tres/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\");\n\nvar _asyncToGenerator = require(\"/Users/jervisbay/project-tres/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/asyncToGenerator\");\n\nvar _classCallCheck = require(\"/Users/jervisbay/project-tres/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/Users/jervisbay/project-tres/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\n\nvar _possibleConstructorReturn = require(\"/Users/jervisbay/project-tres/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/possibleConstructorReturn\");\n\nvar _getPrototypeOf = require(\"/Users/jervisbay/project-tres/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/getPrototypeOf\");\n\nvar _inherits = require(\"/Users/jervisbay/project-tres/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/inherits\");\n\nvar AbstractConnectionManager = require('../abstract/connection-manager');\n\nvar AsyncQueue = require('./async-queue').default;\n\nvar _require = require('../../utils/logger'),\n    logger = _require.logger;\n\nvar sequelizeErrors = require('../../errors');\n\nvar DataTypes = require('../../data-types').mssql;\n\nvar parserStore = require('../parserStore')('mssql');\n\nvar debug = logger.debugContext('connection:mssql');\nvar debugTedious = logger.debugContext('connection:mssql:tedious');\n\nvar ConnectionManager = /*#__PURE__*/function (_AbstractConnectionMa) {\n  _inherits(ConnectionManager, _AbstractConnectionMa);\n\n  function ConnectionManager(dialect, sequelize) {\n    var _this;\n\n    _classCallCheck(this, ConnectionManager);\n\n    sequelize.config.port = sequelize.config.port || 1433;\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(ConnectionManager).call(this, dialect, sequelize));\n    _this.lib = _this._loadDialectModule('tedious');\n\n    _this.refreshTypeParser(DataTypes);\n\n    return _this;\n  }\n\n  _createClass(ConnectionManager, [{\n    key: \"_refreshTypeParser\",\n    value: function _refreshTypeParser(dataType) {\n      parserStore.refresh(dataType);\n    }\n  }, {\n    key: \"_clearTypeParser\",\n    value: function _clearTypeParser() {\n      parserStore.clear();\n    }\n  }, {\n    key: \"connect\",\n    value: function () {\n      var _connect = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(config) {\n        var _this2 = this;\n\n        var connectionConfig;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                connectionConfig = {\n                  server: config.host,\n                  authentication: {\n                    type: 'default',\n                    options: {\n                      userName: config.username || undefined,\n                      password: config.password || undefined\n                    }\n                  },\n                  options: {\n                    port: parseInt(config.port, 10),\n                    database: config.database,\n                    trustServerCertificate: true\n                  }\n                };\n\n                if (config.dialectOptions) {\n                  // only set port if no instance name was provided\n                  if (config.dialectOptions.options && config.dialectOptions.options.instanceName) {\n                    delete connectionConfig.options.port;\n                  }\n\n                  if (config.dialectOptions.authentication) {\n                    Object.assign(connectionConfig.authentication, config.dialectOptions.authentication);\n                  }\n\n                  Object.assign(connectionConfig.options, config.dialectOptions.options);\n                }\n\n                _context.prev = 2;\n                _context.next = 5;\n                return new Promise(function (resolve, reject) {\n                  var connection = new _this2.lib.Connection(connectionConfig);\n\n                  if (connection.state === connection.STATE.INITIALIZED) {\n                    connection.connect();\n                  }\n\n                  connection.queue = new AsyncQueue();\n                  connection.lib = _this2.lib;\n\n                  var connectHandler = function connectHandler(error) {\n                    connection.removeListener('end', endHandler);\n                    connection.removeListener('error', errorHandler);\n                    if (error) return reject(error);\n                    debug('connection acquired');\n                    resolve(connection);\n                  };\n\n                  var endHandler = function endHandler() {\n                    connection.removeListener('connect', connectHandler);\n                    connection.removeListener('error', errorHandler);\n                    reject(new Error('Connection was closed by remote server'));\n                  };\n\n                  var errorHandler = function errorHandler(error) {\n                    connection.removeListener('connect', connectHandler);\n                    connection.removeListener('end', endHandler);\n                    reject(error);\n                  };\n\n                  connection.once('error', errorHandler);\n                  connection.once('end', endHandler);\n                  connection.once('connect', connectHandler);\n                  /*\n                   * Permanently attach this event before connection is even acquired\n                   * tedious sometime emits error even after connect(with error).\n                   *\n                   * If we dont attach this even that unexpected error event will crash node process\n                   *\n                   * E.g. connectTimeout is set higher than requestTimeout\n                   */\n\n                  connection.on('error', function (error) {\n                    switch (error.code) {\n                      case 'ESOCKET':\n                      case 'ECONNRESET':\n                        _this2.pool.destroy(connection);\n\n                    }\n                  });\n\n                  if (config.dialectOptions && config.dialectOptions.debug) {\n                    connection.on('debug', debugTedious.log.bind(debugTedious));\n                  }\n                });\n\n              case 5:\n                return _context.abrupt(\"return\", _context.sent);\n\n              case 8:\n                _context.prev = 8;\n                _context.t0 = _context[\"catch\"](2);\n\n                if (_context.t0.code) {\n                  _context.next = 12;\n                  break;\n                }\n\n                throw new sequelizeErrors.ConnectionError(_context.t0);\n\n              case 12:\n                _context.t1 = _context.t0.code;\n                _context.next = _context.t1 === 'ESOCKET' ? 15 : _context.t1 === 'ER_ACCESS_DENIED_ERROR' ? 26 : _context.t1 === 'ELOGIN' ? 26 : _context.t1 === 'EINVAL' ? 27 : 28;\n                break;\n\n              case 15:\n                if (!_context.t0.message.includes('connect EHOSTUNREACH')) {\n                  _context.next = 17;\n                  break;\n                }\n\n                throw new sequelizeErrors.HostNotReachableError(_context.t0);\n\n              case 17:\n                if (!_context.t0.message.includes('connect ENETUNREACH')) {\n                  _context.next = 19;\n                  break;\n                }\n\n                throw new sequelizeErrors.HostNotReachableError(_context.t0);\n\n              case 19:\n                if (!_context.t0.message.includes('connect EADDRNOTAVAIL')) {\n                  _context.next = 21;\n                  break;\n                }\n\n                throw new sequelizeErrors.HostNotReachableError(_context.t0);\n\n              case 21:\n                if (!_context.t0.message.includes('getaddrinfo ENOTFOUND')) {\n                  _context.next = 23;\n                  break;\n                }\n\n                throw new sequelizeErrors.HostNotFoundError(_context.t0);\n\n              case 23:\n                if (!_context.t0.message.includes('connect ECONNREFUSED')) {\n                  _context.next = 25;\n                  break;\n                }\n\n                throw new sequelizeErrors.ConnectionRefusedError(_context.t0);\n\n              case 25:\n                throw new sequelizeErrors.ConnectionError(_context.t0);\n\n              case 26:\n                throw new sequelizeErrors.AccessDeniedError(_context.t0);\n\n              case 27:\n                throw new sequelizeErrors.InvalidConnectionError(_context.t0);\n\n              case 28:\n                throw new sequelizeErrors.ConnectionError(_context.t0);\n\n              case 29:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, null, [[2, 8]]);\n      }));\n\n      function connect(_x) {\n        return _connect.apply(this, arguments);\n      }\n\n      return connect;\n    }()\n  }, {\n    key: \"disconnect\",\n    value: function () {\n      var _disconnect = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(connection) {\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                if (!connection.closed) {\n                  _context2.next = 2;\n                  break;\n                }\n\n                return _context2.abrupt(\"return\");\n\n              case 2:\n                connection.queue.close();\n                return _context2.abrupt(\"return\", new Promise(function (resolve) {\n                  connection.on('end', resolve);\n                  connection.close();\n                  debug('connection closed');\n                }));\n\n              case 4:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2);\n      }));\n\n      function disconnect(_x2) {\n        return _disconnect.apply(this, arguments);\n      }\n\n      return disconnect;\n    }()\n  }, {\n    key: \"validate\",\n    value: function validate(connection) {\n      return connection && connection.loggedIn;\n    }\n  }]);\n\n  return ConnectionManager;\n}(AbstractConnectionManager);\n\nmodule.exports = ConnectionManager;\nmodule.exports.ConnectionManager = ConnectionManager;\nmodule.exports.default = ConnectionManager;","map":null,"metadata":{},"sourceType":"script"}