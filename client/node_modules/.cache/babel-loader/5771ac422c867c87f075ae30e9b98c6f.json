{"ast":null,"code":"'use strict';\n\nvar _createClass = require(\"/Users/jervisbay/project-tres/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\n\nvar _classCallCheck = require(\"/Users/jervisbay/project-tres/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _possibleConstructorReturn = require(\"/Users/jervisbay/project-tres/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/possibleConstructorReturn\");\n\nvar _getPrototypeOf = require(\"/Users/jervisbay/project-tres/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/getPrototypeOf\");\n\nvar _inherits = require(\"/Users/jervisbay/project-tres/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/inherits\");\n\nvar BaseError = require('../../errors/base-error');\n\nvar ConnectionError = require('../../errors/connection-error');\n/**\n * Thrown when a connection to a database is closed while an operation is in progress\n */\n\n\nvar AsyncQueueError = /*#__PURE__*/function (_BaseError) {\n  _inherits(AsyncQueueError, _BaseError);\n\n  function AsyncQueueError(message) {\n    var _this;\n\n    _classCallCheck(this, AsyncQueueError);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(AsyncQueueError).call(this, message));\n    _this.name = 'SequelizeAsyncQueueError';\n    return _this;\n  }\n\n  return AsyncQueueError;\n}(BaseError);\n\nexports.AsyncQueueError = AsyncQueueError;\n\nvar AsyncQueue = /*#__PURE__*/function () {\n  function AsyncQueue() {\n    _classCallCheck(this, AsyncQueue);\n\n    this.previous = Promise.resolve();\n    this.closed = false;\n\n    this.rejectCurrent = function () {};\n  }\n\n  _createClass(AsyncQueue, [{\n    key: \"close\",\n    value: function close() {\n      this.closed = true;\n      this.rejectCurrent(new ConnectionError(new AsyncQueueError('the connection was closed before this query could finish executing')));\n    }\n  }, {\n    key: \"enqueue\",\n    value: function enqueue(asyncFunction) {\n      var _this2 = this;\n\n      // This outer promise might seems superflous since down below we return asyncFunction().then(resolve, reject).\n      // However, this ensures that this.previous will never be a rejected promise so the queue will\n      // always keep going, while still communicating rejection from asyncFunction to the user.\n      return new Promise(function (resolve, reject) {\n        _this2.previous = _this2.previous.then(function () {\n          _this2.rejectCurrent = reject;\n\n          if (_this2.closed) {\n            return reject(new ConnectionError(new AsyncQueueError('the connection was closed before this query could be executed')));\n          }\n\n          return asyncFunction().then(resolve, reject);\n        });\n      });\n    }\n  }]);\n\n  return AsyncQueue;\n}();\n\nexports.default = AsyncQueue;","map":null,"metadata":{},"sourceType":"script"}