{"ast":null,"code":"'use strict';\n\nvar _assertThisInitialized = require(\"/Users/jervisbay/project-tres/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/assertThisInitialized\");\n\nvar _classCallCheck = require(\"/Users/jervisbay/project-tres/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/Users/jervisbay/project-tres/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\n\nvar _possibleConstructorReturn = require(\"/Users/jervisbay/project-tres/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/possibleConstructorReturn\");\n\nvar _getPrototypeOf = require(\"/Users/jervisbay/project-tres/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/getPrototypeOf\");\n\nvar _inherits = require(\"/Users/jervisbay/project-tres/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/inherits\");\n\nvar moment = require('moment');\n\nmodule.exports = function (BaseTypes) {\n  var warn = BaseTypes.ABSTRACT.warn.bind(undefined, 'https://msdn.microsoft.com/en-us/library/ms187752%28v=sql.110%29.aspx');\n  /**\n   * Removes unsupported MSSQL options, i.e., LENGTH, UNSIGNED and ZEROFILL, for the integer data types.\n   *\n   * @param {Object} dataType The base integer data type.\n   * @private\n   */\n\n  function removeUnsupportedIntegerOptions(dataType) {\n    if (dataType._length || dataType.options.length || dataType._unsigned || dataType._zerofill) {\n      warn(\"MSSQL does not support '\".concat(dataType.key, \"' with options. Plain '\").concat(dataType.key, \"' will be used instead.\"));\n      dataType._length = undefined;\n      dataType.options.length = undefined;\n      dataType._unsigned = undefined;\n      dataType._zerofill = undefined;\n    }\n  }\n  /**\n   * types: [hex, ...]\n   * @see hex here https://github.com/tediousjs/tedious/blob/master/src/data-type.js\n   */\n\n\n  BaseTypes.DATE.types.mssql = [43];\n  BaseTypes.STRING.types.mssql = [231, 173];\n  BaseTypes.CHAR.types.mssql = [175];\n  BaseTypes.TEXT.types.mssql = false; // https://msdn.microsoft.com/en-us/library/ms187745(v=sql.110).aspx\n\n  BaseTypes.TINYINT.types.mssql = [30];\n  BaseTypes.SMALLINT.types.mssql = [34];\n  BaseTypes.MEDIUMINT.types.mssql = false;\n  BaseTypes.INTEGER.types.mssql = [38];\n  BaseTypes.BIGINT.types.mssql = false;\n  BaseTypes.FLOAT.types.mssql = [109];\n  BaseTypes.TIME.types.mssql = [41];\n  BaseTypes.DATEONLY.types.mssql = [40];\n  BaseTypes.BOOLEAN.types.mssql = [104];\n  BaseTypes.BLOB.types.mssql = [165];\n  BaseTypes.DECIMAL.types.mssql = [106];\n  BaseTypes.UUID.types.mssql = false;\n  BaseTypes.ENUM.types.mssql = false;\n  BaseTypes.REAL.types.mssql = [109];\n  BaseTypes.DOUBLE.types.mssql = [109]; // BaseTypes.GEOMETRY.types.mssql = [240]; // not yet supported\n\n  BaseTypes.GEOMETRY.types.mssql = false;\n\n  var BLOB = /*#__PURE__*/function (_BaseTypes$BLOB) {\n    _inherits(BLOB, _BaseTypes$BLOB);\n\n    function BLOB() {\n      _classCallCheck(this, BLOB);\n\n      return _possibleConstructorReturn(this, _getPrototypeOf(BLOB).apply(this, arguments));\n    }\n\n    _createClass(BLOB, [{\n      key: \"toSql\",\n      value: function toSql() {\n        if (this._length) {\n          if (this._length.toLowerCase() === 'tiny') {\n            // tiny = 2^8\n            warn('MSSQL does not support BLOB with the `length` = `tiny` option. `VARBINARY(256)` will be used instead.');\n            return 'VARBINARY(256)';\n          }\n\n          warn('MSSQL does not support BLOB with the `length` option. `VARBINARY(MAX)` will be used instead.');\n        }\n\n        return 'VARBINARY(MAX)';\n      }\n    }, {\n      key: \"_hexify\",\n      value: function _hexify(hex) {\n        return \"0x\".concat(hex);\n      }\n    }]);\n\n    return BLOB;\n  }(BaseTypes.BLOB);\n\n  var STRING = /*#__PURE__*/function (_BaseTypes$STRING) {\n    _inherits(STRING, _BaseTypes$STRING);\n\n    function STRING() {\n      _classCallCheck(this, STRING);\n\n      return _possibleConstructorReturn(this, _getPrototypeOf(STRING).apply(this, arguments));\n    }\n\n    _createClass(STRING, [{\n      key: \"toSql\",\n      value: function toSql() {\n        if (!this._binary) {\n          return \"NVARCHAR(\".concat(this._length, \")\");\n        }\n\n        return \"BINARY(\".concat(this._length, \")\");\n      }\n    }, {\n      key: \"_stringify\",\n      value: function _stringify(value, options) {\n        if (this._binary) {\n          return BLOB.prototype._stringify(value);\n        }\n\n        return options.escape(value);\n      }\n    }, {\n      key: \"_bindParam\",\n      value: function _bindParam(value, options) {\n        return options.bindParam(this._binary ? Buffer.from(value) : value);\n      }\n    }]);\n\n    return STRING;\n  }(BaseTypes.STRING);\n\n  STRING.prototype.escape = false;\n\n  var TEXT = /*#__PURE__*/function (_BaseTypes$TEXT) {\n    _inherits(TEXT, _BaseTypes$TEXT);\n\n    function TEXT() {\n      _classCallCheck(this, TEXT);\n\n      return _possibleConstructorReturn(this, _getPrototypeOf(TEXT).apply(this, arguments));\n    }\n\n    _createClass(TEXT, [{\n      key: \"toSql\",\n      value: function toSql() {\n        // TEXT is deprecated in mssql and it would normally be saved as a non-unicode string.\n        // Using unicode is just future proof\n        if (this._length) {\n          if (this._length.toLowerCase() === 'tiny') {\n            // tiny = 2^8\n            warn('MSSQL does not support TEXT with the `length` = `tiny` option. `NVARCHAR(256)` will be used instead.');\n            return 'NVARCHAR(256)';\n          }\n\n          warn('MSSQL does not support TEXT with the `length` option. `NVARCHAR(MAX)` will be used instead.');\n        }\n\n        return 'NVARCHAR(MAX)';\n      }\n    }]);\n\n    return TEXT;\n  }(BaseTypes.TEXT);\n\n  var BOOLEAN = /*#__PURE__*/function (_BaseTypes$BOOLEAN) {\n    _inherits(BOOLEAN, _BaseTypes$BOOLEAN);\n\n    function BOOLEAN() {\n      _classCallCheck(this, BOOLEAN);\n\n      return _possibleConstructorReturn(this, _getPrototypeOf(BOOLEAN).apply(this, arguments));\n    }\n\n    _createClass(BOOLEAN, [{\n      key: \"toSql\",\n      value: function toSql() {\n        return 'BIT';\n      }\n    }]);\n\n    return BOOLEAN;\n  }(BaseTypes.BOOLEAN);\n\n  var UUID = /*#__PURE__*/function (_BaseTypes$UUID) {\n    _inherits(UUID, _BaseTypes$UUID);\n\n    function UUID() {\n      _classCallCheck(this, UUID);\n\n      return _possibleConstructorReturn(this, _getPrototypeOf(UUID).apply(this, arguments));\n    }\n\n    _createClass(UUID, [{\n      key: \"toSql\",\n      value: function toSql() {\n        return 'CHAR(36)';\n      }\n    }]);\n\n    return UUID;\n  }(BaseTypes.UUID);\n\n  var NOW = /*#__PURE__*/function (_BaseTypes$NOW) {\n    _inherits(NOW, _BaseTypes$NOW);\n\n    function NOW() {\n      _classCallCheck(this, NOW);\n\n      return _possibleConstructorReturn(this, _getPrototypeOf(NOW).apply(this, arguments));\n    }\n\n    _createClass(NOW, [{\n      key: \"toSql\",\n      value: function toSql() {\n        return 'GETDATE()';\n      }\n    }]);\n\n    return NOW;\n  }(BaseTypes.NOW);\n\n  var DATE = /*#__PURE__*/function (_BaseTypes$DATE) {\n    _inherits(DATE, _BaseTypes$DATE);\n\n    function DATE() {\n      _classCallCheck(this, DATE);\n\n      return _possibleConstructorReturn(this, _getPrototypeOf(DATE).apply(this, arguments));\n    }\n\n    _createClass(DATE, [{\n      key: \"toSql\",\n      value: function toSql() {\n        return 'DATETIMEOFFSET';\n      }\n    }]);\n\n    return DATE;\n  }(BaseTypes.DATE);\n\n  var DATEONLY = /*#__PURE__*/function (_BaseTypes$DATEONLY) {\n    _inherits(DATEONLY, _BaseTypes$DATEONLY);\n\n    function DATEONLY() {\n      _classCallCheck(this, DATEONLY);\n\n      return _possibleConstructorReturn(this, _getPrototypeOf(DATEONLY).apply(this, arguments));\n    }\n\n    _createClass(DATEONLY, null, [{\n      key: \"parse\",\n      value: function parse(value) {\n        return moment(value).format('YYYY-MM-DD');\n      }\n    }]);\n\n    return DATEONLY;\n  }(BaseTypes.DATEONLY);\n\n  var INTEGER = /*#__PURE__*/function (_BaseTypes$INTEGER) {\n    _inherits(INTEGER, _BaseTypes$INTEGER);\n\n    function INTEGER(length) {\n      var _this;\n\n      _classCallCheck(this, INTEGER);\n\n      _this = _possibleConstructorReturn(this, _getPrototypeOf(INTEGER).call(this, length));\n      removeUnsupportedIntegerOptions(_assertThisInitialized(_assertThisInitialized(_this)));\n      return _this;\n    }\n\n    return INTEGER;\n  }(BaseTypes.INTEGER);\n\n  var TINYINT = /*#__PURE__*/function (_BaseTypes$TINYINT) {\n    _inherits(TINYINT, _BaseTypes$TINYINT);\n\n    function TINYINT(length) {\n      var _this2;\n\n      _classCallCheck(this, TINYINT);\n\n      _this2 = _possibleConstructorReturn(this, _getPrototypeOf(TINYINT).call(this, length));\n      removeUnsupportedIntegerOptions(_assertThisInitialized(_assertThisInitialized(_this2)));\n      return _this2;\n    }\n\n    return TINYINT;\n  }(BaseTypes.TINYINT);\n\n  var SMALLINT = /*#__PURE__*/function (_BaseTypes$SMALLINT) {\n    _inherits(SMALLINT, _BaseTypes$SMALLINT);\n\n    function SMALLINT(length) {\n      var _this3;\n\n      _classCallCheck(this, SMALLINT);\n\n      _this3 = _possibleConstructorReturn(this, _getPrototypeOf(SMALLINT).call(this, length));\n      removeUnsupportedIntegerOptions(_assertThisInitialized(_assertThisInitialized(_this3)));\n      return _this3;\n    }\n\n    return SMALLINT;\n  }(BaseTypes.SMALLINT);\n\n  var BIGINT = /*#__PURE__*/function (_BaseTypes$BIGINT) {\n    _inherits(BIGINT, _BaseTypes$BIGINT);\n\n    function BIGINT(length) {\n      var _this4;\n\n      _classCallCheck(this, BIGINT);\n\n      _this4 = _possibleConstructorReturn(this, _getPrototypeOf(BIGINT).call(this, length));\n      removeUnsupportedIntegerOptions(_assertThisInitialized(_assertThisInitialized(_this4)));\n      return _this4;\n    }\n\n    return BIGINT;\n  }(BaseTypes.BIGINT);\n\n  var REAL = /*#__PURE__*/function (_BaseTypes$REAL) {\n    _inherits(REAL, _BaseTypes$REAL);\n\n    function REAL(length, decimals) {\n      var _this5;\n\n      _classCallCheck(this, REAL);\n\n      _this5 = _possibleConstructorReturn(this, _getPrototypeOf(REAL).call(this, length, decimals)); // MSSQL does not support any options for real\n\n      if (_this5._length || _this5.options.length || _this5._unsigned || _this5._zerofill) {\n        warn('MSSQL does not support REAL with options. Plain `REAL` will be used instead.');\n        _this5._length = undefined;\n        _this5.options.length = undefined;\n        _this5._unsigned = undefined;\n        _this5._zerofill = undefined;\n      }\n\n      return _this5;\n    }\n\n    return REAL;\n  }(BaseTypes.REAL);\n\n  var FLOAT = /*#__PURE__*/function (_BaseTypes$FLOAT) {\n    _inherits(FLOAT, _BaseTypes$FLOAT);\n\n    function FLOAT(length, decimals) {\n      var _this6;\n\n      _classCallCheck(this, FLOAT);\n\n      _this6 = _possibleConstructorReturn(this, _getPrototypeOf(FLOAT).call(this, length, decimals)); // MSSQL does only support lengths as option.\n      // Values between 1-24 result in 7 digits precision (4 bytes storage size)\n      // Values between 25-53 result in 15 digits precision (8 bytes storage size)\n      // If decimals are provided remove these and print a warning\n\n      if (_this6._decimals) {\n        warn('MSSQL does not support Float with decimals. Plain `FLOAT` will be used instead.');\n        _this6._length = undefined;\n        _this6.options.length = undefined;\n      }\n\n      if (_this6._unsigned) {\n        warn('MSSQL does not support Float unsigned. `UNSIGNED` was removed.');\n        _this6._unsigned = undefined;\n      }\n\n      if (_this6._zerofill) {\n        warn('MSSQL does not support Float zerofill. `ZEROFILL` was removed.');\n        _this6._zerofill = undefined;\n      }\n\n      return _this6;\n    }\n\n    return FLOAT;\n  }(BaseTypes.FLOAT);\n\n  var ENUM = /*#__PURE__*/function (_BaseTypes$ENUM) {\n    _inherits(ENUM, _BaseTypes$ENUM);\n\n    function ENUM() {\n      _classCallCheck(this, ENUM);\n\n      return _possibleConstructorReturn(this, _getPrototypeOf(ENUM).apply(this, arguments));\n    }\n\n    _createClass(ENUM, [{\n      key: \"toSql\",\n      value: function toSql() {\n        return 'VARCHAR(255)';\n      }\n    }]);\n\n    return ENUM;\n  }(BaseTypes.ENUM);\n\n  return {\n    BLOB: BLOB,\n    BOOLEAN: BOOLEAN,\n    ENUM: ENUM,\n    STRING: STRING,\n    UUID: UUID,\n    DATE: DATE,\n    DATEONLY: DATEONLY,\n    NOW: NOW,\n    TINYINT: TINYINT,\n    SMALLINT: SMALLINT,\n    INTEGER: INTEGER,\n    BIGINT: BIGINT,\n    REAL: REAL,\n    FLOAT: FLOAT,\n    TEXT: TEXT\n  };\n};","map":null,"metadata":{},"sourceType":"script"}