{"ast":null,"code":"'use strict';\n\nvar _classCallCheck = require(\"/Users/jervisbay/project-tres/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/Users/jervisbay/project-tres/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\n\nvar _possibleConstructorReturn = require(\"/Users/jervisbay/project-tres/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/possibleConstructorReturn\");\n\nvar _getPrototypeOf = require(\"/Users/jervisbay/project-tres/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/getPrototypeOf\");\n\nvar _inherits = require(\"/Users/jervisbay/project-tres/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/inherits\");\n\nvar AbstractConnectionManager = require('../abstract/connection-manager');\n\nvar SequelizeErrors = require('../../errors');\n\nvar Promise = require('../../promise');\n\nvar _require = require('../../utils/logger'),\n    logger = _require.logger;\n\nvar DataTypes = require('../../data-types').mariadb;\n\nvar momentTz = require('moment-timezone');\n\nvar debug = logger.debugContext('connection:mariadb');\n\nvar parserStore = require('../parserStore')('mariadb');\n/**\n * MariaDB Connection Manager\n *\n * Get connections, validate and disconnect them.\n * AbstractConnectionManager pooling use it to handle MariaDB specific connections\n * Use https://github.com/MariaDB/mariadb-connector-nodejs to connect with MariaDB server\n *\n * @extends AbstractConnectionManager\n * @returns Class<ConnectionManager>\n * @private\n */\n\n\nvar ConnectionManager = /*#__PURE__*/function (_AbstractConnectionMa) {\n  _inherits(ConnectionManager, _AbstractConnectionMa);\n\n  function ConnectionManager(dialect, sequelize) {\n    var _this;\n\n    _classCallCheck(this, ConnectionManager);\n\n    sequelize.config.port = sequelize.config.port || 3306;\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(ConnectionManager).call(this, dialect, sequelize));\n    _this.lib = _this._loadDialectModule('mariadb');\n\n    _this.refreshTypeParser(DataTypes);\n\n    return _this;\n  }\n\n  _createClass(ConnectionManager, [{\n    key: \"_refreshTypeParser\",\n    value: function _refreshTypeParser(dataType) {\n      parserStore.refresh(dataType);\n    }\n  }, {\n    key: \"_clearTypeParser\",\n    value: function _clearTypeParser() {\n      parserStore.clear();\n    }\n    /**\n     * Connect with MariaDB database based on config, Handle any errors in connection\n     * Set the pool handlers on connection.error\n     * Also set proper timezone once connection is connected.\n     *\n     * @param {Object} config\n     * @returns {Promise<Connection>}\n     * @private\n     */\n\n  }, {\n    key: \"connect\",\n    value: function connect(config) {\n      var _this2 = this;\n\n      // Named timezone is not supported in mariadb, convert to offset\n      var tzOffset = this.sequelize.options.timezone;\n      tzOffset = /\\//.test(tzOffset) ? momentTz.tz(tzOffset).format('Z') : tzOffset;\n      var connectionConfig = {\n        host: config.host,\n        port: config.port,\n        user: config.username,\n        password: config.password,\n        database: config.database,\n        timezone: tzOffset,\n        typeCast: ConnectionManager._typecast.bind(this),\n        bigNumberStrings: false,\n        supportBigNumbers: true,\n        foundRows: false\n      };\n\n      if (config.dialectOptions) {\n        Object.assign(connectionConfig, config.dialectOptions);\n      }\n\n      if (!this.sequelize.config.keepDefaultTimezone) {\n        // set timezone for this connection\n        if (connectionConfig.initSql) {\n          if (!Array.isArray(connectionConfig.initSql)) {\n            connectionConfig.initSql = [connectionConfig.initSql];\n          }\n\n          connectionConfig.initSql.push(\"SET time_zone = '\".concat(tzOffset, \"'\"));\n        } else {\n          connectionConfig.initSql = \"SET time_zone = '\".concat(tzOffset, \"'\");\n        }\n      }\n\n      return this.lib.createConnection(connectionConfig).then(function (connection) {\n        _this2.sequelize.options.databaseVersion = connection.serverVersion();\n        debug('connection acquired');\n        connection.on('error', function (error) {\n          switch (error.code) {\n            case 'ESOCKET':\n            case 'ECONNRESET':\n            case 'EPIPE':\n            case 'PROTOCOL_CONNECTION_LOST':\n              _this2.pool.destroy(connection);\n\n          }\n        });\n        return connection;\n      }).catch(function (err) {\n        switch (err.code) {\n          case 'ECONNREFUSED':\n            throw new SequelizeErrors.ConnectionRefusedError(err);\n\n          case 'ER_ACCESS_DENIED_ERROR':\n          case 'ER_ACCESS_DENIED_NO_PASSWORD_ERROR':\n            throw new SequelizeErrors.AccessDeniedError(err);\n\n          case 'ENOTFOUND':\n            throw new SequelizeErrors.HostNotFoundError(err);\n\n          case 'EHOSTUNREACH':\n          case 'ENETUNREACH':\n          case 'EADDRNOTAVAIL':\n            throw new SequelizeErrors.HostNotReachableError(err);\n\n          case 'EINVAL':\n            throw new SequelizeErrors.InvalidConnectionError(err);\n\n          default:\n            throw new SequelizeErrors.ConnectionError(err);\n        }\n      });\n    }\n  }, {\n    key: \"disconnect\",\n    value: function disconnect(connection) {\n      // Don't disconnect connections with CLOSED state\n      if (!connection.isValid()) {\n        debug('connection tried to disconnect but was already at CLOSED state');\n        return Promise.resolve();\n      } //wrap native Promise into bluebird\n\n\n      return Promise.resolve(connection.end());\n    }\n  }, {\n    key: \"validate\",\n    value: function validate(connection) {\n      return connection && connection.isValid();\n    }\n  }], [{\n    key: \"_typecast\",\n    value: function _typecast(field, next) {\n      if (parserStore.get(field.type)) {\n        return parserStore.get(field.type)(field, this.sequelize.options, next);\n      }\n\n      return next();\n    }\n  }]);\n\n  return ConnectionManager;\n}(AbstractConnectionManager);\n\nmodule.exports = ConnectionManager;\nmodule.exports.ConnectionManager = ConnectionManager;\nmodule.exports.default = ConnectionManager;","map":null,"metadata":{},"sourceType":"script"}