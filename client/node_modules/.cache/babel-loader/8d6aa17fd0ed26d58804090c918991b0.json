{"ast":null,"code":"'use strict';\n\nvar os = require('os');\n\nvar path = require('path');\n\nvar fo = require('../../file-operations');\n\nvar isWindows = os.platform() === 'win32';\n\nfunction writeSymbolicLink(file, optResolver, onWritten) {\n  if (!file.symlink) {\n    return onWritten(new Error('Missing symlink property on symbolic vinyl'));\n  }\n\n  var isRelative = optResolver.resolve('relativeSymlinks', file);\n  var flags = fo.getFlags({\n    overwrite: optResolver.resolve('overwrite', file),\n    append: optResolver.resolve('append', file)\n  });\n\n  if (!isWindows) {\n    // On non-Windows, just use 'file'\n    return createLinkWithType('file');\n  }\n\n  fo.reflectStat(file.symlink, file, onReflect);\n\n  function onReflect(statErr) {\n    if (statErr && statErr.code !== 'ENOENT') {\n      return onWritten(statErr);\n    } // This option provides a way to create a Junction instead of a\n    // Directory symlink on Windows. This comes with the following caveats:\n    // * NTFS Junctions cannot be relative.\n    // * NTFS Junctions MUST be directories.\n    // * NTFS Junctions must be on the same file system.\n    // * Most products CANNOT detect a directory is a Junction:\n    //    This has the side effect of possibly having a whole directory\n    //    deleted when a product is deleting the Junction directory.\n    //    For example, JetBrains product lines will delete the entire contents\n    //    of the TARGET directory because the product does not realize it's\n    //    a symlink as the JVM and Node return false for isSymlink.\n    // This function is Windows only, so we don't need to check again\n\n\n    var useJunctions = optResolver.resolve('useJunctions', file);\n    var dirType = useJunctions ? 'junction' : 'dir'; // Dangling links are always 'file'\n\n    var type = !statErr && file.isDirectory() ? dirType : 'file';\n    createLinkWithType(type);\n  }\n\n  function createLinkWithType(type) {\n    // This is done after prepare() to use the adjusted file.base property\n    if (isRelative && type !== 'junction') {\n      file.symlink = path.relative(file.base, file.symlink);\n    }\n\n    var opts = {\n      flags: flags,\n      type: type\n    };\n    fo.symlink(file.symlink, file.path, opts, onSymlink);\n\n    function onSymlink(symlinkErr) {\n      if (symlinkErr) {\n        return onWritten(symlinkErr);\n      }\n\n      fo.reflectLinkStat(file.path, file, onWritten);\n    }\n  }\n}\n\nmodule.exports = writeSymbolicLink;","map":null,"metadata":{},"sourceType":"script"}