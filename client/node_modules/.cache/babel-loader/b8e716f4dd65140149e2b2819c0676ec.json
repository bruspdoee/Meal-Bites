{"ast":null,"code":"'use strict';\n\nvar _classCallCheck = require(\"/Users/jervisbay/project-tres/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/Users/jervisbay/project-tres/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\n\nvar AuthSwitchRequest = require('./auth_switch_request');\n\nvar AuthSwitchRequestMoreData = require('./auth_switch_request_more_data');\n\nvar AuthSwitchResponse = require('./auth_switch_response');\n\nvar BinaryRow = require('./binary_row');\n\nvar BinlogDump = require('./binlog_dump');\n\nvar ChangeUser = require('./change_user');\n\nvar CloseStatement = require('./close_statement');\n\nvar ColumnDefinition = require('./column_definition');\n\nvar Execute = require('./execute');\n\nvar Handshake = require('./handshake');\n\nvar HandshakeResponse = require('./handshake_response');\n\nvar PrepareStatement = require('./prepare_statement');\n\nvar PreparedStatementHeader = require('./prepared_statement_header');\n\nvar Query = require('./query');\n\nvar RegisterSlave = require('./register_slave');\n\nvar ResultsetHeader = require('./resultset_header');\n\nvar SslRequest = require('./ssl_request');\n\nvar TextRow = require('./text_row');\n\nvar ctorArr = [AuthSwitchRequest, AuthSwitchRequestMoreData, AuthSwitchResponse, BinaryRow, BinlogDump, ChangeUser, CloseStatement, ColumnDefinition, Execute, Handshake, HandshakeResponse, PrepareStatement, PreparedStatementHeader, Query, RegisterSlave, ResultsetHeader, SslRequest, TextRow];\nctorArr.forEach(function (ctor) {\n  module.exports[ctor.name] = ctor; // monkey-patch it to include name if debug is on\n\n  if (process.env.NODE_DEBUG) {\n    if (ctor.prototype.toPacket) {\n      var old = ctor.prototype.toPacket;\n\n      ctor.prototype.toPacket = function () {\n        var p = old.call(this);\n        p._name = ctor.name;\n        return p;\n      };\n    }\n  }\n}); // simple packets:\n\nvar Packet = require('./packet');\n\nexports.Packet = Packet;\n\nvar OK = /*#__PURE__*/function () {\n  function OK() {\n    _classCallCheck(this, OK);\n  }\n\n  _createClass(OK, null, [{\n    key: \"toPacket\",\n    value: function toPacket(args, encoding) {\n      args = args || {};\n      var affectedRows = args.affectedRows || 0;\n      var insertId = args.insertId || 0;\n      var serverStatus = args.serverStatus || 0;\n      var warningCount = args.warningCount || 0;\n      var message = args.message || '';\n      var length = 9 + Packet.lengthCodedNumberLength(affectedRows);\n      length += Packet.lengthCodedNumberLength(insertId);\n      var buffer = Buffer.allocUnsafe(length);\n      var packet = new Packet(0, buffer, 0, length);\n      packet.offset = 4;\n      packet.writeInt8(0);\n      packet.writeLengthCodedNumber(affectedRows);\n      packet.writeLengthCodedNumber(insertId);\n      packet.writeInt16(serverStatus);\n      packet.writeInt16(warningCount);\n      packet.writeString(message, encoding);\n      packet._name = 'OK';\n      return packet;\n    }\n  }]);\n\n  return OK;\n}();\n\nexports.OK = OK; // warnings, statusFlags\n\nvar EOF = /*#__PURE__*/function () {\n  function EOF() {\n    _classCallCheck(this, EOF);\n  }\n\n  _createClass(EOF, null, [{\n    key: \"toPacket\",\n    value: function toPacket(warnings, statusFlags) {\n      if (typeof warnings === 'undefined') {\n        warnings = 0;\n      }\n\n      if (typeof statusFlags === 'undefined') {\n        statusFlags = 0;\n      }\n\n      var packet = new Packet(0, Buffer.allocUnsafe(9), 0, 9);\n      packet.offset = 4;\n      packet.writeInt8(0xfe);\n      packet.writeInt16(warnings);\n      packet.writeInt16(statusFlags);\n      packet._name = 'EOF';\n      return packet;\n    }\n  }]);\n\n  return EOF;\n}();\n\nexports.EOF = EOF;\n\nvar Error = /*#__PURE__*/function () {\n  function Error() {\n    _classCallCheck(this, Error);\n  }\n\n  _createClass(Error, null, [{\n    key: \"toPacket\",\n    value: function toPacket(args, encoding) {\n      var length = 13 + Buffer.byteLength(args.message, 'utf8');\n      var packet = new Packet(0, Buffer.allocUnsafe(length), 0, length);\n      packet.offset = 4;\n      packet.writeInt8(0xff);\n      packet.writeInt16(args.code); // TODO: sql state parameter\n\n      packet.writeString('#_____', encoding);\n      packet.writeString(args.message, encoding);\n      packet._name = 'Error';\n      return packet;\n    }\n  }]);\n\n  return Error;\n}();\n\nexports.Error = Error;","map":null,"metadata":{},"sourceType":"script"}