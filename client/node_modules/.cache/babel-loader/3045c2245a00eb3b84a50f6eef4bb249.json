{"ast":null,"code":"'use strict';\n\nvar _regeneratorRuntime = require(\"/Users/jervisbay/project-tres/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\");\n\nvar _asyncToGenerator = require(\"/Users/jervisbay/project-tres/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/asyncToGenerator\");\n\nvar _classCallCheck = require(\"/Users/jervisbay/project-tres/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/Users/jervisbay/project-tres/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\n\nvar _possibleConstructorReturn = require(\"/Users/jervisbay/project-tres/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/possibleConstructorReturn\");\n\nvar _get = require(\"/Users/jervisbay/project-tres/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/get\");\n\nvar _getPrototypeOf = require(\"/Users/jervisbay/project-tres/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/getPrototypeOf\");\n\nvar _inherits = require(\"/Users/jervisbay/project-tres/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/inherits\");\n\nvar fs = require('fs');\n\nvar path = require('path');\n\nvar AbstractConnectionManager = require('../abstract/connection-manager');\n\nvar _require = require('../../utils/logger'),\n    logger = _require.logger;\n\nvar debug = logger.debugContext('connection:sqlite');\n\nvar dataTypes = require('../../data-types').sqlite;\n\nvar sequelizeErrors = require('../../errors');\n\nvar parserStore = require('../parserStore')('sqlite');\n\nvar _require2 = require('util'),\n    promisify = _require2.promisify;\n\nvar ConnectionManager = /*#__PURE__*/function (_AbstractConnectionMa) {\n  _inherits(ConnectionManager, _AbstractConnectionMa);\n\n  function ConnectionManager(dialect, sequelize) {\n    var _this;\n\n    _classCallCheck(this, ConnectionManager);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(ConnectionManager).call(this, dialect, sequelize)); // We attempt to parse file location from a connection uri\n    // but we shouldn't match sequelize default host.\n\n    if (_this.sequelize.options.host === 'localhost') {\n      delete _this.sequelize.options.host;\n    }\n\n    _this.connections = {};\n    _this.lib = _this._loadDialectModule('sqlite3');\n\n    _this.refreshTypeParser(dataTypes);\n\n    return _this;\n  }\n\n  _createClass(ConnectionManager, [{\n    key: \"_onProcessExit\",\n    value: function () {\n      var _onProcessExit2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n        var _this2 = this;\n\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.next = 2;\n                return Promise.all(Object.getOwnPropertyNames(this.connections).map(function (connection) {\n                  return promisify(function (callback) {\n                    return _this2.connections[connection].close(callback);\n                  })();\n                }));\n\n              case 2:\n                return _context.abrupt(\"return\", _get(_getPrototypeOf(ConnectionManager.prototype), \"_onProcessExit\", this).call(this));\n\n              case 3:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function _onProcessExit() {\n        return _onProcessExit2.apply(this, arguments);\n      }\n\n      return _onProcessExit;\n    }() // Expose this as a method so that the parsing may be updated when the user has added additional, custom types\n\n  }, {\n    key: \"_refreshTypeParser\",\n    value: function _refreshTypeParser(dataType) {\n      parserStore.refresh(dataType);\n    }\n  }, {\n    key: \"_clearTypeParser\",\n    value: function _clearTypeParser() {\n      parserStore.clear();\n    }\n  }, {\n    key: \"getConnection\",\n    value: function () {\n      var _getConnection = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(options) {\n        var _this3 = this;\n\n        var dialectOptions, defaultReadWriteMode, connection;\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                options = options || {};\n                options.uuid = options.uuid || 'default';\n                options.storage = this.sequelize.options.storage || this.sequelize.options.host || ':memory:';\n                options.inMemory = options.storage === ':memory:' ? 1 : 0;\n                dialectOptions = this.sequelize.options.dialectOptions;\n                defaultReadWriteMode = this.lib.OPEN_READWRITE | this.lib.OPEN_CREATE;\n                options.readWriteMode = dialectOptions && dialectOptions.mode || defaultReadWriteMode;\n\n                if (!this.connections[options.inMemory || options.uuid]) {\n                  _context2.next = 9;\n                  break;\n                }\n\n                return _context2.abrupt(\"return\", this.connections[options.inMemory || options.uuid]);\n\n              case 9:\n                if (!options.inMemory && (options.readWriteMode & this.lib.OPEN_CREATE) !== 0) {\n                  // automatic path provision for `options.storage`\n                  fs.mkdirSync(path.dirname(options.storage), {\n                    recursive: true\n                  });\n                }\n\n                _context2.next = 12;\n                return new Promise(function (resolve, reject) {\n                  _this3.connections[options.inMemory || options.uuid] = new _this3.lib.Database(options.storage, options.readWriteMode, function (err) {\n                    if (err) return reject(new sequelizeErrors.ConnectionError(err));\n                    debug(\"connection acquired \".concat(options.uuid));\n                    resolve(_this3.connections[options.inMemory || options.uuid]);\n                  });\n                });\n\n              case 12:\n                connection = _context2.sent;\n\n                if (this.sequelize.config.password) {\n                  // Make it possible to define and use password for sqlite encryption plugin like sqlcipher\n                  connection.run(\"PRAGMA KEY=\".concat(this.sequelize.escape(this.sequelize.config.password)));\n                }\n\n                if (this.sequelize.options.foreignKeys !== false) {\n                  // Make it possible to define and use foreign key constraints unless\n                  // explicitly disallowed. It's still opt-in per relation\n                  connection.run('PRAGMA FOREIGN_KEYS=ON');\n                }\n\n                return _context2.abrupt(\"return\", connection);\n\n              case 16:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n\n      function getConnection(_x) {\n        return _getConnection.apply(this, arguments);\n      }\n\n      return getConnection;\n    }()\n  }, {\n    key: \"releaseConnection\",\n    value: function releaseConnection(connection, force) {\n      if (connection.filename === ':memory:' && force !== true) return;\n\n      if (connection.uuid) {\n        connection.close();\n        debug(\"connection released \".concat(connection.uuid));\n        delete this.connections[connection.uuid];\n      }\n    }\n  }]);\n\n  return ConnectionManager;\n}(AbstractConnectionManager);\n\nmodule.exports = ConnectionManager;\nmodule.exports.ConnectionManager = ConnectionManager;\nmodule.exports.default = ConnectionManager;","map":null,"metadata":{},"sourceType":"script"}