{"ast":null,"code":"'use strict';\n\nvar _possibleConstructorReturn = require(\"/Users/jervisbay/project-tres/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/possibleConstructorReturn\");\n\nvar _getPrototypeOf = require(\"/Users/jervisbay/project-tres/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/getPrototypeOf\");\n\nvar _inherits = require(\"/Users/jervisbay/project-tres/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/inherits\");\n\nvar _classCallCheck = require(\"/Users/jervisbay/project-tres/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/Users/jervisbay/project-tres/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\n\nvar Packets = require('../packets/index.js');\n\nvar Command = require('./command.js');\n\nvar CloseStatement = require('./close_statement.js');\n\nvar Execute = require('./execute.js');\n\nvar PreparedStatementInfo = /*#__PURE__*/function () {\n  function PreparedStatementInfo(query, id, columns, parameters, connection) {\n    _classCallCheck(this, PreparedStatementInfo);\n\n    this.query = query;\n    this.id = id;\n    this.columns = columns;\n    this.parameters = parameters;\n    this.rowParser = null;\n    this._connection = connection;\n  }\n\n  _createClass(PreparedStatementInfo, [{\n    key: \"close\",\n    value: function close() {\n      return this._connection.addCommand(new CloseStatement(this.id));\n    }\n  }, {\n    key: \"execute\",\n    value: function execute(parameters, callback) {\n      if (typeof parameters === 'function') {\n        callback = parameters;\n        parameters = [];\n      }\n\n      return this._connection.addCommand(new Execute({\n        statement: this,\n        values: parameters\n      }, callback));\n    }\n  }]);\n\n  return PreparedStatementInfo;\n}();\n\nvar Prepare = /*#__PURE__*/function (_Command) {\n  _inherits(Prepare, _Command);\n\n  function Prepare(options, callback) {\n    var _this;\n\n    _classCallCheck(this, Prepare);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Prepare).call(this));\n    _this.query = options.sql;\n    _this.onResult = callback;\n    _this.id = 0;\n    _this.fieldCount = 0;\n    _this.parameterCount = 0;\n    _this.fields = [];\n    _this.parameterDefinitions = [];\n    _this.options = options;\n    return _this;\n  }\n\n  _createClass(Prepare, [{\n    key: \"start\",\n    value: function start(packet, connection) {\n      var Connection = connection.constructor;\n      this.key = Connection.statementKey(this.options);\n\n      var statement = connection._statements.get(this.key);\n\n      if (statement) {\n        if (this.onResult) {\n          this.onResult(null, statement);\n        }\n\n        return null;\n      }\n\n      var cmdPacket = new Packets.PrepareStatement(this.query, connection.config.charsetNumber);\n      connection.writePacket(cmdPacket.toPacket(1));\n      return Prepare.prototype.prepareHeader;\n    }\n  }, {\n    key: \"prepareHeader\",\n    value: function prepareHeader(packet, connection) {\n      var header = new Packets.PreparedStatementHeader(packet);\n      this.id = header.id;\n      this.fieldCount = header.fieldCount;\n      this.parameterCount = header.parameterCount;\n\n      if (this.parameterCount > 0) {\n        return Prepare.prototype.readParameter;\n      }\n\n      if (this.fieldCount > 0) {\n        return Prepare.prototype.readField;\n      }\n\n      return this.prepareDone(connection);\n    }\n  }, {\n    key: \"readParameter\",\n    value: function readParameter(packet, connection) {\n      var def = new Packets.ColumnDefinition(packet, connection.clientEncoding);\n      this.parameterDefinitions.push(def);\n\n      if (this.parameterDefinitions.length === this.parameterCount) {\n        return Prepare.prototype.parametersEOF;\n      }\n\n      return this.readParameter;\n    }\n  }, {\n    key: \"readField\",\n    value: function readField(packet, connection) {\n      var def = new Packets.ColumnDefinition(packet, connection.clientEncoding);\n      this.fields.push(def);\n\n      if (this.fields.length === this.fieldCount) {\n        return Prepare.prototype.fieldsEOF;\n      }\n\n      return Prepare.prototype.readField;\n    }\n  }, {\n    key: \"parametersEOF\",\n    value: function parametersEOF(packet, connection) {\n      if (!packet.isEOF()) {\n        return connection.protocolError('Expected EOF packet after parameters');\n      }\n\n      if (this.fieldCount > 0) {\n        return Prepare.prototype.readField;\n      }\n\n      return this.prepareDone(connection);\n    }\n  }, {\n    key: \"fieldsEOF\",\n    value: function fieldsEOF(packet, connection) {\n      if (!packet.isEOF()) {\n        return connection.protocolError('Expected EOF packet after fields');\n      }\n\n      return this.prepareDone(connection);\n    }\n  }, {\n    key: \"prepareDone\",\n    value: function prepareDone(connection) {\n      var statement = new PreparedStatementInfo(this.query, this.id, this.fields, this.parameterDefinitions, connection);\n\n      connection._statements.set(this.key, statement);\n\n      if (this.onResult) {\n        this.onResult(null, statement);\n      }\n\n      return null;\n    }\n  }]);\n\n  return Prepare;\n}(Command);\n\nmodule.exports = Prepare;","map":null,"metadata":{},"sourceType":"script"}