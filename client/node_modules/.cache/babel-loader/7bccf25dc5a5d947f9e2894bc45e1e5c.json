{"ast":null,"code":"'use strict';\n\nvar assert = require('assert');\n\nvar filter = require('arr-filter');\n\nvar map = require('arr-map');\n\nvar flatten = require('arr-flatten');\n\nvar forEach = require('array-each');\n\nfunction noop() {}\n\nfunction getExtensions(lastArg) {\n  if (typeof lastArg !== 'function') {\n    return lastArg;\n  }\n}\n\nfunction filterSuccess(elem) {\n  return elem.state === 'success';\n}\n\nfunction filterError(elem) {\n  return elem.state === 'error';\n}\n\nfunction buildOnSettled(done) {\n  if (typeof done !== 'function') {\n    done = noop;\n  }\n\n  function onSettled(error, result) {\n    if (error) {\n      return done(error, null);\n    }\n\n    var settledErrors = filter(result, filterError);\n    var settledResults = filter(result, filterSuccess);\n    var errors = null;\n\n    if (settledErrors.length) {\n      errors = map(settledErrors, 'value');\n    }\n\n    var results = null;\n\n    if (settledResults.length) {\n      results = map(settledResults, 'value');\n    }\n\n    done(errors, results);\n  }\n\n  return onSettled;\n}\n\nfunction verifyArguments(args) {\n  args = flatten(args);\n  var lastIdx = args.length - 1;\n  assert.ok(args.length, 'A set of functions to combine is required');\n  forEach(args, function (arg, argIdx) {\n    var isFunction = typeof arg === 'function';\n\n    if (isFunction) {\n      return;\n    }\n\n    if (argIdx === lastIdx) {\n      // Last arg can be an object of extension points\n      return;\n    }\n\n    var msg = 'Only functions can be combined, got ' + typeof arg + ' for argument ' + argIdx;\n    assert.ok(isFunction, msg);\n  });\n  return args;\n}\n\nmodule.exports = {\n  getExtensions: getExtensions,\n  onSettled: buildOnSettled,\n  verifyArguments: verifyArguments\n};","map":null,"metadata":{},"sourceType":"script"}