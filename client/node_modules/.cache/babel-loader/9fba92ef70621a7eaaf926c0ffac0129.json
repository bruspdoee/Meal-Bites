{"ast":null,"code":"'use strict';\n\nvar _possibleConstructorReturn = require(\"/Users/jervisbay/project-tres/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/possibleConstructorReturn\");\n\nvar _getPrototypeOf = require(\"/Users/jervisbay/project-tres/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/getPrototypeOf\");\n\nvar _inherits = require(\"/Users/jervisbay/project-tres/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/inherits\");\n\nvar _classCallCheck = require(\"/Users/jervisbay/project-tres/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/Users/jervisbay/project-tres/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\n\nvar Pool = require('./pool.js');\n\nvar PoolConfig = require('./pool_config.js');\n\nvar EventEmitter = require('events').EventEmitter;\n/**\n * Selector\n */\n\n\nvar makeSelector = {\n  RR: function RR() {\n    var index = 0;\n    return function (clusterIds) {\n      return clusterIds[index++ % clusterIds.length];\n    };\n  },\n  RANDOM: function RANDOM() {\n    return function (clusterIds) {\n      return clusterIds[Math.floor(Math.random() * clusterIds.length)];\n    };\n  },\n  ORDER: function ORDER() {\n    return function (clusterIds) {\n      return clusterIds[0];\n    };\n  }\n};\n\nvar PoolNamespace = /*#__PURE__*/function () {\n  function PoolNamespace(cluster, pattern, selector) {\n    _classCallCheck(this, PoolNamespace);\n\n    this._cluster = cluster;\n    this._pattern = pattern;\n    this._selector = makeSelector[selector]();\n  }\n\n  _createClass(PoolNamespace, [{\n    key: \"getConnection\",\n    value: function getConnection(cb) {\n      var _this = this;\n\n      var clusterNode = this._getClusterNode();\n\n      if (clusterNode === null) {\n        return cb(new Error('Pool does Not exists.'));\n      }\n\n      return this._cluster._getConnection(clusterNode, function (err, connection) {\n        if (err) {\n          return cb(err);\n        }\n\n        if (connection === 'retry') {\n          return _this.getConnection(cb);\n        }\n\n        return cb(null, connection);\n      });\n    }\n  }, {\n    key: \"_getClusterNode\",\n    value: function _getClusterNode() {\n      var foundNodeIds = this._cluster._findNodeIds(this._pattern);\n\n      if (foundNodeIds.length === 0) {\n        return null;\n      }\n\n      var nodeId = foundNodeIds.length === 1 ? foundNodeIds[0] : this._selector(foundNodeIds);\n      return this._cluster._getNode(nodeId);\n    }\n  }]);\n\n  return PoolNamespace;\n}();\n\nvar PoolCluster = /*#__PURE__*/function (_EventEmitter) {\n  _inherits(PoolCluster, _EventEmitter);\n\n  function PoolCluster(config) {\n    var _this2;\n\n    _classCallCheck(this, PoolCluster);\n\n    _this2 = _possibleConstructorReturn(this, _getPrototypeOf(PoolCluster).call(this));\n    config = config || {};\n    _this2._canRetry = typeof config.canRetry === 'undefined' ? true : config.canRetry;\n    _this2._removeNodeErrorCount = config.removeNodeErrorCount || 5;\n    _this2._defaultSelector = config.defaultSelector || 'RR';\n    _this2._closed = false;\n    _this2._lastId = 0;\n    _this2._nodes = {};\n    _this2._serviceableNodeIds = [];\n    _this2._namespaces = {};\n    _this2._findCaches = {};\n    return _this2;\n  }\n\n  _createClass(PoolCluster, [{\n    key: \"of\",\n    value: function of(pattern, selector) {\n      pattern = pattern || '*';\n      selector = selector || this._defaultSelector;\n      selector = selector.toUpperCase();\n\n      if (!makeSelector[selector] === 'undefined') {\n        selector = this._defaultSelector;\n      }\n\n      var key = pattern + selector;\n\n      if (typeof this._namespaces[key] === 'undefined') {\n        this._namespaces[key] = new PoolNamespace(this, pattern, selector);\n      }\n\n      return this._namespaces[key];\n    }\n  }, {\n    key: \"add\",\n    value: function add(id, config) {\n      if (typeof id === 'object') {\n        config = id;\n        id = \"CLUSTER::\".concat(++this._lastId);\n      }\n\n      if (typeof this._nodes[id] === 'undefined') {\n        this._nodes[id] = {\n          id: id,\n          errorCount: 0,\n          pool: new Pool({\n            config: new PoolConfig(config)\n          })\n        };\n\n        this._serviceableNodeIds.push(id);\n\n        this._clearFindCaches();\n      }\n    }\n  }, {\n    key: \"getConnection\",\n    value: function getConnection(pattern, selector, cb) {\n      var namespace;\n\n      if (typeof pattern === 'function') {\n        cb = pattern;\n        namespace = this.of();\n      } else {\n        if (typeof selector === 'function') {\n          cb = selector;\n          selector = this._defaultSelector;\n        }\n\n        namespace = this.of(pattern, selector);\n      }\n\n      namespace.getConnection(cb);\n    }\n  }, {\n    key: \"end\",\n    value: function end(callback) {\n      var cb = callback !== undefined ? callback : function (err) {\n        if (err) {\n          throw err;\n        }\n      };\n\n      if (this._closed) {\n        process.nextTick(cb);\n        return;\n      }\n\n      this._closed = true;\n      var calledBack = false;\n      var waitingClose = 0;\n\n      var onEnd = function onEnd(err) {\n        if (!calledBack && (err || --waitingClose <= 0)) {\n          calledBack = true;\n          return cb(err);\n        }\n      };\n\n      for (var id in this._nodes) {\n        waitingClose++;\n\n        this._nodes[id].pool.end();\n      }\n\n      if (waitingClose === 0) {\n        process.nextTick(onEnd);\n      }\n    }\n  }, {\n    key: \"_findNodeIds\",\n    value: function _findNodeIds(pattern) {\n      if (typeof this._findCaches[pattern] !== 'undefined') {\n        return this._findCaches[pattern];\n      }\n\n      var foundNodeIds;\n\n      if (pattern === '*') {\n        // all\n        foundNodeIds = this._serviceableNodeIds;\n      } else if (this._serviceableNodeIds.indexOf(pattern) !== -1) {\n        // one\n        foundNodeIds = [pattern];\n      } else {\n        // wild matching\n        var keyword = pattern.substring(pattern.length - 1, 0);\n        foundNodeIds = this._serviceableNodeIds.filter(function (id) {\n          return id.startsWith(keyword);\n        });\n      }\n\n      this._findCaches[pattern] = foundNodeIds;\n      return foundNodeIds;\n    }\n  }, {\n    key: \"_getNode\",\n    value: function _getNode(id) {\n      return this._nodes[id] || null;\n    }\n  }, {\n    key: \"_increaseErrorCount\",\n    value: function _increaseErrorCount(node) {\n      if (++node.errorCount >= this._removeNodeErrorCount) {\n        var index = this._serviceableNodeIds.indexOf(node.id);\n\n        if (index !== -1) {\n          this._serviceableNodeIds.splice(index, 1);\n\n          delete this._nodes[node.id];\n\n          this._clearFindCaches();\n\n          node.pool.end();\n          this.emit('remove', node.id);\n        }\n      }\n    }\n  }, {\n    key: \"_decreaseErrorCount\",\n    value: function _decreaseErrorCount(node) {\n      if (node.errorCount > 0) {\n        --node.errorCount;\n      }\n    }\n  }, {\n    key: \"_getConnection\",\n    value: function _getConnection(node, cb) {\n      var _this3 = this;\n\n      node.pool.getConnection(function (err, connection) {\n        if (err) {\n          _this3._increaseErrorCount(node);\n\n          if (_this3._canRetry) {\n            // REVIEW: this seems wrong?\n            _this3.emit('warn', err); // eslint-disable-next-line no-console\n\n\n            console.warn(\"[Error] PoolCluster : \".concat(err));\n            return cb(null, 'retry');\n          }\n\n          return cb(err);\n        }\n\n        _this3._decreaseErrorCount(node);\n\n        connection._clusterId = node.id;\n        return cb(null, connection);\n      });\n    }\n  }, {\n    key: \"_clearFindCaches\",\n    value: function _clearFindCaches() {\n      this._findCaches = {};\n    }\n  }]);\n\n  return PoolCluster;\n}(EventEmitter);\n\nmodule.exports = PoolCluster;","map":null,"metadata":{},"sourceType":"script"}