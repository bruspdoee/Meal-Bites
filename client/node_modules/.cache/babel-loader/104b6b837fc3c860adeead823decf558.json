{"ast":null,"code":"'use strict';\n\nvar Packets = require('../packets/index.js');\n\nvar caching_sha2_password = require('../auth_plugins/caching_sha2_password.js');\n\nvar mysql_native_password = require('../auth_plugins/mysql_native_password.js');\n\nvar standardAuthPlugins = {\n  caching_sha2_password: caching_sha2_password({}),\n  mysql_native_password: mysql_native_password({})\n};\n\nfunction warnLegacyAuthSwitch() {\n  console.warn('WARNING! authSwitchHandler api is deprecated, please use new authPlugins api');\n}\n\nfunction authSwitchRequest(packet, connection, command) {\n  var _Packets$AuthSwitchRe = Packets.AuthSwitchRequest.fromPacket(packet),\n      pluginName = _Packets$AuthSwitchRe.pluginName,\n      pluginData = _Packets$AuthSwitchRe.pluginData;\n\n  var authPlugin = connection.config.authPlugins && connection.config.authPlugins[pluginName]; // legacy plugin api don't allow to override mysql_native_password\n  // if pluginName is mysql_native_password it's using standard auth4.1 auth\n\n  if (connection.config.authSwitchHandler && pluginName !== 'mysql_native_password') {\n    var legacySwitchHandler = connection.config.authSwitchHandler;\n    warnLegacyAuthSwitch();\n    legacySwitchHandler({\n      pluginName: pluginName,\n      pluginData: pluginData\n    }, function (err, data) {\n      if (err) {\n        connection.emit('error', err);\n        return;\n      }\n\n      connection.writePacket(new Packets.AuthSwitchResponse(data).toPacket());\n    });\n    return;\n  }\n\n  if (!authPlugin) {\n    authPlugin = standardAuthPlugins[pluginName];\n  }\n\n  if (!authPlugin) {\n    throw new Error(\"Server requests authentication using unknown plugin \".concat(pluginName, \". See \", 'TODO: add plugins doco here', \" on how to configure or author authentication plugins.\"));\n  }\n\n  connection._authPlugin = authPlugin({\n    connection: connection,\n    command: command\n  });\n  Promise.resolve(connection._authPlugin(pluginData)).then(function (data) {\n    if (data) {\n      connection.writePacket(new Packets.AuthSwitchResponse(data).toPacket());\n    }\n  });\n}\n\nfunction authSwitchRequestMoreData(packet, connection) {\n  var _Packets$AuthSwitchRe2 = Packets.AuthSwitchRequestMoreData.fromPacket(packet),\n      data = _Packets$AuthSwitchRe2.data;\n\n  if (connection.config.authSwitchHandler) {\n    var legacySwitchHandler = connection.config.authSwitchHandler;\n    warnLegacyAuthSwitch();\n    legacySwitchHandler({\n      pluginData: data\n    }, function (err, data) {\n      if (err) {\n        connection.emit('error', err);\n        return;\n      }\n\n      connection.writePacket(new Packets.AuthSwitchResponse(data).toPacket());\n    });\n    return;\n  }\n\n  if (!connection._authPlugin) {\n    throw new Error('AuthPluginMoreData received but no auth plugin instance found');\n  }\n\n  Promise.resolve(connection._authPlugin(data)).then(function (data) {\n    if (data) {\n      connection.writePacket(new Packets.AuthSwitchResponse(data).toPacket());\n    }\n  });\n}\n\nmodule.exports = {\n  authSwitchRequest: authSwitchRequest,\n  authSwitchRequestMoreData: authSwitchRequestMoreData\n};","map":null,"metadata":{},"sourceType":"script"}