{"ast":null,"code":"'use strict'; // connection mixins\n// implementation of http://dev.mysql.com/doc/internals/en/compression.html\n\nvar zlib = require('zlib');\n\nvar PacketParser = require('./packet_parser.js');\n\nfunction handleCompressedPacket(packet) {\n  // eslint-disable-next-line consistent-this, no-invalid-this\n  var connection = this;\n  var deflatedLength = packet.readInt24();\n  var body = packet.readBuffer();\n\n  if (deflatedLength !== 0) {\n    connection.inflateQueue.push(function (task) {\n      zlib.inflate(body, function (err, data) {\n        if (err) {\n          connection._handleNetworkError(err);\n\n          return;\n        }\n\n        connection._bumpCompressedSequenceId(packet.numPackets);\n\n        connection._inflatedPacketsParser.execute(data);\n\n        task.done();\n      });\n    });\n  } else {\n    connection.inflateQueue.push(function (task) {\n      connection._bumpCompressedSequenceId(packet.numPackets);\n\n      connection._inflatedPacketsParser.execute(body);\n\n      task.done();\n    });\n  }\n}\n\nfunction writeCompressed(buffer) {\n  // http://dev.mysql.com/doc/internals/en/example-several-mysql-packets.html\n  // note: sending a MySQL Packet of the size 2^24−5 to 2^24−1 via compression\n  // leads to at least one extra compressed packet.\n  // (this is because \"length of the packet before compression\" need to fit\n  // into 3 byte unsigned int. \"length of the packet before compression\" includes\n  // 4 byte packet header, hence 2^24−5)\n  var MAX_COMPRESSED_LENGTH = 16777210;\n  var start;\n\n  if (buffer.length > MAX_COMPRESSED_LENGTH) {\n    for (start = 0; start < buffer.length; start += MAX_COMPRESSED_LENGTH) {\n      writeCompressed.call( // eslint-disable-next-line no-invalid-this\n      this, buffer.slice(start, start + MAX_COMPRESSED_LENGTH));\n    }\n\n    return;\n  } // eslint-disable-next-line no-invalid-this, consistent-this\n\n\n  var connection = this;\n  var packetLen = buffer.length;\n  var compressHeader = Buffer.allocUnsafe(7); // seqqueue is used here because zlib async execution is routed via thread pool\n  // internally and when we have multiple compressed packets arriving we need\n  // to assemble uncompressed result sequentially\n\n  (function (seqId) {\n    connection.deflateQueue.push(function (task) {\n      zlib.deflate(buffer, function (err, compressed) {\n        if (err) {\n          connection._handleFatalError(err);\n\n          return;\n        }\n\n        var compressedLength = compressed.length;\n\n        if (compressedLength < packetLen) {\n          compressHeader.writeUInt8(compressedLength & 0xff, 0);\n          compressHeader.writeUInt16LE(compressedLength >> 8, 1);\n          compressHeader.writeUInt8(seqId, 3);\n          compressHeader.writeUInt8(packetLen & 0xff, 4);\n          compressHeader.writeUInt16LE(packetLen >> 8, 5);\n          connection.writeUncompressed(compressHeader);\n          connection.writeUncompressed(compressed);\n        } else {\n          // http://dev.mysql.com/doc/internals/en/uncompressed-payload.html\n          // To send an uncompressed payload:\n          //   - set length of payload before compression to 0\n          //   - the compressed payload contains the uncompressed payload instead.\n          compressedLength = packetLen;\n          packetLen = 0;\n          compressHeader.writeUInt8(compressedLength & 0xff, 0);\n          compressHeader.writeUInt16LE(compressedLength >> 8, 1);\n          compressHeader.writeUInt8(seqId, 3);\n          compressHeader.writeUInt8(packetLen & 0xff, 4);\n          compressHeader.writeUInt16LE(packetLen >> 8, 5);\n          connection.writeUncompressed(compressHeader);\n          connection.writeUncompressed(buffer);\n        }\n\n        task.done();\n      });\n    });\n  })(connection.compressedSequenceId);\n\n  connection._bumpCompressedSequenceId(1);\n}\n\nfunction enableCompression(connection) {\n  connection._lastWrittenPacketId = 0;\n  connection._lastReceivedPacketId = 0;\n  connection._handleCompressedPacket = handleCompressedPacket;\n  connection._inflatedPacketsParser = new PacketParser(function (p) {\n    connection.handlePacket(p);\n  }, 4);\n  connection._inflatedPacketsParser._lastPacket = 0;\n  connection.packetParser = new PacketParser(function (packet) {\n    connection._handleCompressedPacket(packet);\n  }, 7);\n  connection.writeUncompressed = connection.write;\n  connection.write = writeCompressed;\n\n  var seqqueue = require('seq-queue');\n\n  connection.inflateQueue = seqqueue.createQueue();\n  connection.deflateQueue = seqqueue.createQueue();\n}\n\nmodule.exports = {\n  enableCompression: enableCompression\n};","map":null,"metadata":{},"sourceType":"script"}