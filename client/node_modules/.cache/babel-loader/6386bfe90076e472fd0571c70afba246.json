{"ast":null,"code":"'use strict';\n\nvar fo = require('../../file-operations');\n\nvar readStream = require('../../src/read-contents/read-stream');\n\nfunction writeStream(file, optResolver, onWritten) {\n  var flags = fo.getFlags({\n    overwrite: optResolver.resolve('overwrite', file),\n    append: optResolver.resolve('append', file)\n  });\n  var opt = {\n    mode: file.stat.mode,\n    // TODO: need to test this\n    flags: flags\n  }; // TODO: is this the best API?\n\n  var outStream = fo.createWriteStream(file.path, opt, onFlush);\n  file.contents.once('error', onComplete);\n  outStream.once('error', onComplete);\n  outStream.once('finish', onComplete); // TODO: should this use a clone?\n\n  file.contents.pipe(outStream);\n\n  function onComplete(streamErr) {\n    // Cleanup event handlers before closing\n    file.contents.removeListener('error', onComplete);\n    outStream.removeListener('error', onComplete);\n    outStream.removeListener('finish', onComplete); // Need to guarantee the fd is closed before forwarding the error\n\n    outStream.once('close', onClose);\n    outStream.end();\n\n    function onClose(closeErr) {\n      onWritten(streamErr || closeErr);\n    }\n  } // Cleanup\n\n\n  function onFlush(fd, callback) {\n    // TODO: removing this before readStream because it replaces the stream\n    file.contents.removeListener('error', onComplete); // TODO: this is doing sync stuff & the callback seems unnecessary\n    // TODO: Replace the contents stream or use a clone?\n\n    readStream(file, complete);\n\n    function complete() {\n      if (typeof fd !== 'number') {\n        return callback();\n      }\n\n      fo.updateMetadata(fd, file, callback);\n    }\n  }\n}\n\nmodule.exports = writeStream;","map":null,"metadata":{},"sourceType":"script"}