{"ast":null,"code":"'use strict';\n\nvar _classCallCheck = require(\"/Users/jervisbay/project-tres/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/Users/jervisbay/project-tres/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\n\nvar _possibleConstructorReturn = require(\"/Users/jervisbay/project-tres/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/possibleConstructorReturn\");\n\nvar _getPrototypeOf = require(\"/Users/jervisbay/project-tres/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/getPrototypeOf\");\n\nvar _inherits = require(\"/Users/jervisbay/project-tres/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/inherits\");\n\nvar AbstractConnectionManager = require('../abstract/connection-manager');\n\nvar ResourceLock = require('./resource-lock');\n\nvar Promise = require('../../promise');\n\nvar _require = require('../../utils/logger'),\n    logger = _require.logger;\n\nvar sequelizeErrors = require('../../errors');\n\nvar DataTypes = require('../../data-types').mssql;\n\nvar parserStore = require('../parserStore')('mssql');\n\nvar debug = logger.debugContext('connection:mssql');\nvar debugTedious = logger.debugContext('connection:mssql:tedious');\n\nvar ConnectionManager = /*#__PURE__*/function (_AbstractConnectionMa) {\n  _inherits(ConnectionManager, _AbstractConnectionMa);\n\n  function ConnectionManager(dialect, sequelize) {\n    var _this;\n\n    _classCallCheck(this, ConnectionManager);\n\n    sequelize.config.port = sequelize.config.port || 1433;\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(ConnectionManager).call(this, dialect, sequelize));\n    _this.lib = _this._loadDialectModule('tedious');\n\n    _this.refreshTypeParser(DataTypes);\n\n    return _this;\n  }\n\n  _createClass(ConnectionManager, [{\n    key: \"_refreshTypeParser\",\n    value: function _refreshTypeParser(dataType) {\n      parserStore.refresh(dataType);\n    }\n  }, {\n    key: \"_clearTypeParser\",\n    value: function _clearTypeParser() {\n      parserStore.clear();\n    }\n  }, {\n    key: \"connect\",\n    value: function connect(config) {\n      var _this2 = this;\n\n      var connectionConfig = {\n        server: config.host,\n        authentication: {\n          type: 'default',\n          options: {\n            userName: config.username || undefined,\n            password: config.password || undefined\n          }\n        },\n        options: {\n          port: parseInt(config.port, 10),\n          database: config.database,\n          encrypt: false\n        }\n      };\n\n      if (config.dialectOptions) {\n        // only set port if no instance name was provided\n        if (config.dialectOptions.options && config.dialectOptions.options.instanceName) {\n          delete connectionConfig.options.port;\n        }\n\n        if (config.dialectOptions.authentication) {\n          Object.assign(connectionConfig.authentication, config.dialectOptions.authentication);\n        }\n\n        Object.assign(connectionConfig.options, config.dialectOptions.options);\n      }\n\n      return new Promise(function (resolve, reject) {\n        var connection = new _this2.lib.Connection(connectionConfig);\n\n        if (connection.state === connection.STATE.INITIALIZED) {\n          connection.connect();\n        }\n\n        connection.lib = _this2.lib;\n        var resourceLock = new ResourceLock(connection);\n\n        var connectHandler = function connectHandler(error) {\n          connection.removeListener('end', endHandler);\n          connection.removeListener('error', errorHandler);\n          if (error) return reject(error);\n          debug('connection acquired');\n          resolve(resourceLock);\n        };\n\n        var endHandler = function endHandler() {\n          connection.removeListener('connect', connectHandler);\n          connection.removeListener('error', errorHandler);\n          reject(new Error('Connection was closed by remote server'));\n        };\n\n        var errorHandler = function errorHandler(error) {\n          connection.removeListener('connect', connectHandler);\n          connection.removeListener('end', endHandler);\n          reject(error);\n        };\n\n        connection.once('error', errorHandler);\n        connection.once('end', endHandler);\n        connection.once('connect', connectHandler);\n        /*\n         * Permanently attach this event before connection is even acquired\n         * tedious sometime emits error even after connect(with error).\n         *\n         * If we dont attach this even that unexpected error event will crash node process\n         *\n         * E.g. connectTimeout is set higher than requestTimeout\n         */\n\n        connection.on('error', function (error) {\n          switch (error.code) {\n            case 'ESOCKET':\n            case 'ECONNRESET':\n              _this2.pool.destroy(resourceLock);\n\n          }\n        });\n\n        if (config.dialectOptions && config.dialectOptions.debug) {\n          connection.on('debug', debugTedious.log.bind(debugTedious));\n        }\n      }).catch(function (error) {\n        if (!error.code) {\n          throw new sequelizeErrors.ConnectionError(error);\n        }\n\n        switch (error.code) {\n          case 'ESOCKET':\n            if (error.message.includes('connect EHOSTUNREACH')) {\n              throw new sequelizeErrors.HostNotReachableError(error);\n            }\n\n            if (error.message.includes('connect ENETUNREACH')) {\n              throw new sequelizeErrors.HostNotReachableError(error);\n            }\n\n            if (error.message.includes('connect EADDRNOTAVAIL')) {\n              throw new sequelizeErrors.HostNotReachableError(error);\n            }\n\n            if (error.message.includes('getaddrinfo ENOTFOUND')) {\n              throw new sequelizeErrors.HostNotFoundError(error);\n            }\n\n            if (error.message.includes('connect ECONNREFUSED')) {\n              throw new sequelizeErrors.ConnectionRefusedError(error);\n            }\n\n            throw new sequelizeErrors.ConnectionError(error);\n\n          case 'ER_ACCESS_DENIED_ERROR':\n          case 'ELOGIN':\n            throw new sequelizeErrors.AccessDeniedError(error);\n\n          case 'EINVAL':\n            throw new sequelizeErrors.InvalidConnectionError(error);\n\n          default:\n            throw new sequelizeErrors.ConnectionError(error);\n        }\n      });\n    }\n  }, {\n    key: \"disconnect\",\n    value: function disconnect(connectionLock) {\n      /**\n       * Abstract connection may try to disconnect raw connection used for fetching version\n       */\n      var connection = connectionLock.unwrap ? connectionLock.unwrap() : connectionLock; // Don't disconnect a connection that is already disconnected\n\n      if (connection.closed) {\n        return Promise.resolve();\n      }\n\n      return new Promise(function (resolve) {\n        connection.on('end', resolve);\n        connection.close();\n        debug('connection closed');\n      });\n    }\n  }, {\n    key: \"validate\",\n    value: function validate(connectionLock) {\n      /**\n       * Abstract connection may try to validate raw connection used for fetching version\n       */\n      var connection = connectionLock.unwrap ? connectionLock.unwrap() : connectionLock;\n      return connection && connection.loggedIn;\n    }\n  }]);\n\n  return ConnectionManager;\n}(AbstractConnectionManager);\n\nmodule.exports = ConnectionManager;\nmodule.exports.ConnectionManager = ConnectionManager;\nmodule.exports.default = ConnectionManager;","map":null,"metadata":{},"sourceType":"script"}