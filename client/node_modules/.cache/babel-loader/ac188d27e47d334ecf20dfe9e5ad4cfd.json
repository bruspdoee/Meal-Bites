{"ast":null,"code":"'use strict';\n\nvar _createClass = require(\"/Users/jervisbay/project-tres/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\n\nvar _possibleConstructorReturn = require(\"/Users/jervisbay/project-tres/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/possibleConstructorReturn\");\n\nvar _getPrototypeOf = require(\"/Users/jervisbay/project-tres/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/getPrototypeOf\");\n\nvar _inherits = require(\"/Users/jervisbay/project-tres/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/inherits\");\n\nvar _classCallCheck = require(\"/Users/jervisbay/project-tres/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar Command = require('./command');\n\nvar Packets = require('../packets');\n\nvar eventParsers = [];\n\nvar BinlogEventHeader = function BinlogEventHeader(packet) {\n  _classCallCheck(this, BinlogEventHeader);\n\n  this.timestamp = packet.readInt32();\n  this.eventType = packet.readInt8();\n  this.serverId = packet.readInt32();\n  this.eventSize = packet.readInt32();\n  this.logPos = packet.readInt32();\n  this.flags = packet.readInt16();\n};\n\nvar BinlogDump = /*#__PURE__*/function (_Command) {\n  _inherits(BinlogDump, _Command);\n\n  function BinlogDump(opts) {\n    var _this;\n\n    _classCallCheck(this, BinlogDump);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(BinlogDump).call(this)); // this.onResult = callback;\n\n    _this.opts = opts;\n    return _this;\n  }\n\n  _createClass(BinlogDump, [{\n    key: \"start\",\n    value: function start(packet, connection) {\n      var newPacket = new Packets.BinlogDump(this.opts);\n      connection.writePacket(newPacket.toPacket(1));\n      return BinlogDump.prototype.binlogData;\n    }\n  }, {\n    key: \"binlogData\",\n    value: function binlogData(packet) {\n      // ok - continue consuming events\n      // error - error\n      // eof - end of binlog\n      if (packet.isEOF()) {\n        this.emit('eof');\n        return null;\n      } // binlog event header\n\n\n      packet.readInt8();\n      var header = new BinlogEventHeader(packet);\n      var EventParser = eventParsers[header.eventType];\n      var event;\n\n      if (EventParser) {\n        event = new EventParser(packet);\n      } else {\n        event = {\n          name: 'UNKNOWN'\n        };\n      }\n\n      event.header = header;\n      this.emit('event', event);\n      return BinlogDump.prototype.binlogData;\n    }\n  }]);\n\n  return BinlogDump;\n}(Command);\n\nvar RotateEvent = function RotateEvent(packet) {\n  _classCallCheck(this, RotateEvent);\n\n  this.pposition = packet.readInt32(); // TODO: read uint64 here\n\n  packet.readInt32(); // positionDword2\n\n  this.nextBinlog = packet.readString();\n  this.name = 'RotateEvent';\n};\n\nvar FormatDescriptionEvent = function FormatDescriptionEvent(packet) {\n  _classCallCheck(this, FormatDescriptionEvent);\n\n  this.binlogVersion = packet.readInt16();\n  this.serverVersion = packet.readString(50).replace(/\\u0000.*/, ''); // eslint-disable-line no-control-regex\n\n  this.createTimestamp = packet.readInt32();\n  this.eventHeaderLength = packet.readInt8(); // should be 19\n\n  this.eventsLength = packet.readBuffer();\n  this.name = 'FormatDescriptionEvent';\n};\n\nvar QueryEvent = function QueryEvent(packet) {\n  _classCallCheck(this, QueryEvent);\n\n  var parseStatusVars = require('../packets/binlog_query_statusvars.js');\n\n  this.slaveProxyId = packet.readInt32();\n  this.executionTime = packet.readInt32();\n  var schemaLength = packet.readInt8();\n  this.errorCode = packet.readInt16();\n  var statusVarsLength = packet.readInt16();\n  var statusVars = packet.readBuffer(statusVarsLength);\n  this.schema = packet.readString(schemaLength);\n  packet.readInt8(); // should be zero\n\n  this.statusVars = parseStatusVars(statusVars);\n  this.query = packet.readString();\n  this.name = 'QueryEvent';\n};\n\nvar XidEvent = function XidEvent(packet) {\n  _classCallCheck(this, XidEvent);\n\n  this.binlogVersion = packet.readInt16();\n  this.xid = packet.readInt64();\n  this.name = 'XidEvent';\n};\n\neventParsers[2] = QueryEvent;\neventParsers[4] = RotateEvent;\neventParsers[15] = FormatDescriptionEvent;\neventParsers[16] = XidEvent;\nmodule.exports = BinlogDump;","map":null,"metadata":{},"sourceType":"script"}