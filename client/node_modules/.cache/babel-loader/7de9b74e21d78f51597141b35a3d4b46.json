{"ast":null,"code":"'use strict';\n\nvar _objectSpread = require(\"/Users/jervisbay/project-tres/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/objectSpread\");\n\nvar _classCallCheck = require(\"/Users/jervisbay/project-tres/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/Users/jervisbay/project-tres/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\n\nvar _possibleConstructorReturn = require(\"/Users/jervisbay/project-tres/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/possibleConstructorReturn\");\n\nvar _getPrototypeOf = require(\"/Users/jervisbay/project-tres/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/getPrototypeOf\");\n\nvar _inherits = require(\"/Users/jervisbay/project-tres/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/inherits\");\n\nfunction _createForOfIteratorHelper(o, allowArrayLike) { var it; if (typeof Symbol === \"undefined\" || o[Symbol.iterator] == null) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = o[Symbol.iterator](); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nvar MySQLQueryGenerator = require('../mysql/query-generator');\n\nvar Utils = require('./../../utils');\n\nvar MariaDBQueryGenerator = /*#__PURE__*/function (_MySQLQueryGenerator) {\n  _inherits(MariaDBQueryGenerator, _MySQLQueryGenerator);\n\n  function MariaDBQueryGenerator() {\n    _classCallCheck(this, MariaDBQueryGenerator);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(MariaDBQueryGenerator).apply(this, arguments));\n  }\n\n  _createClass(MariaDBQueryGenerator, [{\n    key: \"createSchema\",\n    value: function createSchema(schema, options) {\n      options = _objectSpread({\n        charset: null,\n        collate: null\n      }, options);\n      return Utils.joinSQLFragments(['CREATE SCHEMA IF NOT EXISTS', this.quoteIdentifier(schema), options.charset && \"DEFAULT CHARACTER SET \".concat(this.escape(options.charset)), options.collate && \"DEFAULT COLLATE \".concat(this.escape(options.collate)), ';']);\n    }\n  }, {\n    key: \"dropSchema\",\n    value: function dropSchema(schema) {\n      return \"DROP SCHEMA IF EXISTS \".concat(this.quoteIdentifier(schema), \";\");\n    }\n  }, {\n    key: \"showSchemasQuery\",\n    value: function showSchemasQuery(options) {\n      var schemasToSkip = ['\\'MYSQL\\'', '\\'INFORMATION_SCHEMA\\'', '\\'PERFORMANCE_SCHEMA\\''];\n\n      if (options.skip && Array.isArray(options.skip) && options.skip.length > 0) {\n        var _iterator = _createForOfIteratorHelper(options.skip),\n            _step;\n\n        try {\n          for (_iterator.s(); !(_step = _iterator.n()).done;) {\n            var schemaName = _step.value;\n            schemasToSkip.push(this.escape(schemaName));\n          }\n        } catch (err) {\n          _iterator.e(err);\n        } finally {\n          _iterator.f();\n        }\n      }\n\n      return Utils.joinSQLFragments(['SELECT SCHEMA_NAME as schema_name', 'FROM INFORMATION_SCHEMA.SCHEMATA', \"WHERE SCHEMA_NAME NOT IN (\".concat(schemasToSkip.join(', '), \")\"), ';']);\n    }\n  }, {\n    key: \"showTablesQuery\",\n    value: function showTablesQuery(database) {\n      var query = 'SELECT TABLE_NAME, TABLE_SCHEMA FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = \\'BASE TABLE\\'';\n\n      if (database) {\n        query += \" AND TABLE_SCHEMA = \".concat(this.escape(database));\n      } else {\n        query += ' AND TABLE_SCHEMA NOT IN (\\'MYSQL\\', \\'INFORMATION_SCHEMA\\', \\'PERFORMANCE_SCHEMA\\')';\n      }\n\n      return \"\".concat(query, \";\");\n    }\n  }]);\n\n  return MariaDBQueryGenerator;\n}(MySQLQueryGenerator);\n\nmodule.exports = MariaDBQueryGenerator;","map":null,"metadata":{},"sourceType":"script"}