{"ast":null,"code":"'use strict';\n\nvar Writable = require('flush-write-stream');\n\nfunction listenerCount(stream, evt) {\n  return stream.listeners(evt).length;\n}\n\nfunction hasListeners(stream) {\n  return !!(listenerCount(stream, 'readable') || listenerCount(stream, 'data'));\n}\n\nfunction sinker(file, enc, callback) {\n  callback();\n}\n\nfunction sink(stream) {\n  var sinkAdded = false;\n  var sinkOptions = {\n    objectMode: stream._readableState.objectMode\n  };\n  var sinkStream = new Writable(sinkOptions, sinker);\n\n  function addSink() {\n    if (sinkAdded) {\n      return;\n    }\n\n    if (hasListeners(stream)) {\n      return;\n    }\n\n    sinkAdded = true;\n    stream.pipe(sinkStream);\n  }\n\n  function removeSink(evt) {\n    if (evt !== 'readable' && evt !== 'data') {\n      return;\n    }\n\n    if (hasListeners(stream)) {\n      sinkAdded = false;\n      stream.unpipe(sinkStream);\n    }\n  }\n\n  stream.on('newListener', removeSink);\n  stream.on('removeListener', removeSink);\n  stream.on('removeListener', addSink); // Sink the stream to start flowing\n  // Do this on nextTick, it will flow at slowest speed of piped streams\n\n  process.nextTick(addSink);\n  return stream;\n}\n\nmodule.exports = sink;","map":null,"metadata":{},"sourceType":"script"}