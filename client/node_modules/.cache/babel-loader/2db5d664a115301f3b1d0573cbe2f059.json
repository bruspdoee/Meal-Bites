{"ast":null,"code":"'use strict'; // http://dev.mysql.com/doc/internals/en/query-event.html\n\nvar keys = {\n  FLAGS2: 0,\n  SQL_MODE: 1,\n  CATALOG: 2,\n  AUTO_INCREMENT: 3,\n  CHARSET: 4,\n  TIME_ZONE: 5,\n  CATALOG_NZ: 6,\n  LC_TIME_NAMES: 7,\n  CHARSET_DATABASE: 8,\n  TABLE_MAP_FOR_UPDATE: 9,\n  MASTER_DATA_WRITTEN: 10,\n  INVOKERS: 11,\n  UPDATED_DB_NAMES: 12,\n  MICROSECONDS: 3\n};\n\nmodule.exports = function parseStatusVars(buffer) {\n  var result = {};\n  var offset = 0;\n  var key, length, prevOffset;\n\n  while (offset < buffer.length) {\n    key = buffer[offset++];\n\n    switch (key) {\n      case keys.FLAGS2:\n        result.flags = buffer.readUInt32LE(offset);\n        offset += 4;\n        break;\n\n      case keys.SQL_MODE:\n        // value is 8 bytes, but all dcumented flags are in first 4 bytes\n        result.sqlMode = buffer.readUInt32LE(offset);\n        offset += 8;\n        break;\n\n      case keys.CATALOG:\n        length = buffer[offset++];\n        result.catalog = buffer.toString('utf8', offset, offset + length);\n        offset += length + 1; // null byte after string\n\n        break;\n\n      case keys.CHARSET:\n        result.clientCharset = buffer.readUInt16LE(offset);\n        result.connectionCollation = buffer.readUInt16LE(offset + 2);\n        result.serverCharset = buffer.readUInt16LE(offset + 4);\n        offset += 6;\n        break;\n\n      case keys.TIME_ZONE:\n        length = buffer[offset++];\n        result.timeZone = buffer.toString('utf8', offset, offset + length);\n        offset += length; // no null byte\n\n        break;\n\n      case keys.CATALOG_NZ:\n        length = buffer[offset++];\n        result.catalogNz = buffer.toString('utf8', offset, offset + length);\n        offset += length; // no null byte\n\n        break;\n\n      case keys.LC_TIME_NAMES:\n        result.lcTimeNames = buffer.readUInt16LE(offset);\n        offset += 2;\n        break;\n\n      case keys.CHARSET_DATABASE:\n        result.schemaCharset = buffer.readUInt16LE(offset);\n        offset += 2;\n        break;\n\n      case keys.TABLE_MAP_FOR_UPDATE:\n        result.mapForUpdate1 = buffer.readUInt32LE(offset);\n        result.mapForUpdate2 = buffer.readUInt32LE(offset + 4);\n        offset += 8;\n        break;\n\n      case keys.MASTER_DATA_WRITTEN:\n        result.masterDataWritten = buffer.readUInt32LE(offset);\n        offset += 4;\n        break;\n\n      case keys.INVOKERS:\n        length = buffer[offset++];\n        result.invokerUsername = buffer.toString('utf8', offset, offset + length);\n        offset += length;\n        length = buffer[offset++];\n        result.invokerHostname = buffer.toString('utf8', offset, offset + length);\n        offset += length;\n        break;\n\n      case keys.UPDATED_DB_NAMES:\n        length = buffer[offset++]; // length - number of null-terminated strings\n\n        result.updatedDBs = []; // we'll store them as array here\n\n        for (; length; --length) {\n          prevOffset = offset; // fast forward to null terminating byte\n\n          while (buffer[offset++] && offset < buffer.length) {// empty body, everything inside while condition\n          }\n\n          result.updatedDBs.push(buffer.toString('utf8', prevOffset, offset - 1));\n        }\n\n        break;\n\n      case keys.MICROSECONDS:\n        result.microseconds = // REVIEW: INVALID UNKNOWN VARIABLE!\n        buffer.readInt16LE(offset) + (buffer[offset + 2] << 16);\n        offset += 3;\n    }\n  }\n\n  return result;\n};","map":null,"metadata":{},"sourceType":"script"}