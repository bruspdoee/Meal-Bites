{"ast":null,"code":"'use strict';\n\nvar _regeneratorRuntime = require(\"/Users/jervisbay/project-tres/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\");\n\nvar _objectSpread = require(\"/Users/jervisbay/project-tres/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/objectSpread\");\n\nvar _asyncToGenerator = require(\"/Users/jervisbay/project-tres/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/asyncToGenerator\");\n\nvar _classCallCheck = require(\"/Users/jervisbay/project-tres/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/Users/jervisbay/project-tres/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\n\nvar _possibleConstructorReturn = require(\"/Users/jervisbay/project-tres/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/possibleConstructorReturn\");\n\nvar _get = require(\"/Users/jervisbay/project-tres/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/get\");\n\nvar _getPrototypeOf = require(\"/Users/jervisbay/project-tres/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/getPrototypeOf\");\n\nvar _inherits = require(\"/Users/jervisbay/project-tres/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/inherits\");\n\nvar DataTypes = require('../../data-types');\n\nvar QueryTypes = require('../../query-types');\n\nvar _require = require('../abstract/query-interface'),\n    QueryInterface = _require.QueryInterface;\n\nvar Utils = require('../../utils');\n/**\n * The interface that Sequelize uses to talk with Postgres database\n */\n\n\nvar PostgresQueryInterface = /*#__PURE__*/function (_QueryInterface) {\n  _inherits(PostgresQueryInterface, _QueryInterface);\n\n  function PostgresQueryInterface() {\n    _classCallCheck(this, PostgresQueryInterface);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(PostgresQueryInterface).apply(this, arguments));\n  }\n\n  _createClass(PostgresQueryInterface, [{\n    key: \"ensureEnums\",\n\n    /**\n     * Ensure enum and their values.\n     *\n     * @param {string} tableName  Name of table to create\n     * @param {object} attributes Object representing a list of normalized table attributes\n     * @param {object} [options]\n     * @param {Model}  [model]\n     *\n     * @protected\n     */\n    value: function () {\n      var _ensureEnums = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(tableName, attributes, options, model) {\n        var _this = this;\n\n        var keys, keyLen, sql, promises, i, attribute, type, results, enumIdx, addEnumValue, _loop, result;\n\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                keys = Object.keys(attributes);\n                keyLen = keys.length;\n                sql = '';\n                promises = [];\n                i = 0;\n\n                for (i = 0; i < keyLen; i++) {\n                  attribute = attributes[keys[i]];\n                  type = attribute.type;\n\n                  if (type instanceof DataTypes.ENUM || type instanceof DataTypes.ARRAY && type.type instanceof DataTypes.ENUM //ARRAY sub type is ENUM\n                  ) {\n                      sql = this.queryGenerator.pgListEnums(tableName, attribute.field || keys[i], options);\n                      promises.push(this.sequelize.query(sql, _objectSpread({}, options, {\n                        plain: true,\n                        raw: true,\n                        type: QueryTypes.SELECT\n                      })));\n                    }\n                }\n\n                _context2.next = 8;\n                return Promise.all(promises);\n\n              case 8:\n                results = _context2.sent;\n                promises = [];\n                enumIdx = 0; // This little function allows us to re-use the same code that prepends or appends new value to enum array\n\n                addEnumValue = function addEnumValue(field, value, relativeValue) {\n                  var position = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 'before';\n                  var spliceStart = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : promises.length;\n\n                  var valueOptions = _objectSpread({}, options);\n\n                  valueOptions.before = null;\n                  valueOptions.after = null;\n\n                  switch (position) {\n                    case 'after':\n                      valueOptions.after = relativeValue;\n                      break;\n\n                    case 'before':\n                    default:\n                      valueOptions.before = relativeValue;\n                      break;\n                  }\n\n                  promises.splice(spliceStart, 0, function () {\n                    return _this.sequelize.query(_this.queryGenerator.pgEnumAdd(tableName, field, value, valueOptions), valueOptions);\n                  });\n                };\n\n                _loop = function _loop() {\n                  var attribute = attributes[keys[i]];\n                  var type = attribute.type;\n                  var enumType = type.type || type;\n                  var field = attribute.field || keys[i];\n\n                  if (type instanceof DataTypes.ENUM || type instanceof DataTypes.ARRAY && enumType instanceof DataTypes.ENUM //ARRAY sub type is ENUM\n                  ) {\n                      // If the enum type doesn't exist then create it\n                      if (!results[enumIdx]) {\n                        promises.push(function () {\n                          return _this.sequelize.query(_this.queryGenerator.pgEnum(tableName, field, enumType, options), _objectSpread({}, options, {\n                            raw: true\n                          }));\n                        });\n                      } else if (!!results[enumIdx] && !!model) {\n                        var enumVals = _this.queryGenerator.fromArray(results[enumIdx].enum_value);\n\n                        var vals = enumType.values; // Going through already existing values allows us to make queries that depend on those values\n                        // We will prepend all new values between the old ones, but keep in mind - we can't change order of already existing values\n                        // Then we append the rest of new values AFTER the latest already existing value\n                        // E.g.: [1,2] -> [0,2,1] ==> [1,0,2]\n                        // E.g.: [1,2,3] -> [2,1,3,4] ==> [1,2,3,4]\n                        // E.g.: [1] -> [0,2,3] ==> [1,0,2,3]\n\n                        var lastOldEnumValue;\n                        var rightestPosition = -1;\n\n                        for (var oldIndex = 0; oldIndex < enumVals.length; oldIndex++) {\n                          var enumVal = enumVals[oldIndex];\n                          var newIdx = vals.indexOf(enumVal);\n                          lastOldEnumValue = enumVal;\n\n                          if (newIdx === -1) {\n                            continue;\n                          }\n\n                          var newValuesBefore = vals.slice(0, newIdx);\n                          var promisesLength = promises.length; // we go in reverse order so we could stop when we meet old value\n\n                          for (var reverseIdx = newValuesBefore.length - 1; reverseIdx >= 0; reverseIdx--) {\n                            if (~enumVals.indexOf(newValuesBefore[reverseIdx])) {\n                              break;\n                            }\n\n                            addEnumValue(field, newValuesBefore[reverseIdx], lastOldEnumValue, 'before', promisesLength);\n                          } // we detect the most 'right' position of old value in new enum array so we can append new values to it\n\n\n                          if (newIdx > rightestPosition) {\n                            rightestPosition = newIdx;\n                          }\n                        }\n\n                        if (lastOldEnumValue && rightestPosition < vals.length - 1) {\n                          var remainingEnumValues = vals.slice(rightestPosition + 1);\n\n                          for (var _reverseIdx = remainingEnumValues.length - 1; _reverseIdx >= 0; _reverseIdx--) {\n                            addEnumValue(field, remainingEnumValues[_reverseIdx], lastOldEnumValue, 'after');\n                          }\n                        }\n\n                        enumIdx++;\n                      }\n                    }\n                };\n\n                for (i = 0; i < keyLen; i++) {\n                  _loop();\n                }\n\n                _context2.next = 16;\n                return promises.reduce( /*#__PURE__*/function () {\n                  var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(promise, asyncFunction) {\n                    return _regeneratorRuntime.wrap(function _callee$(_context) {\n                      while (1) {\n                        switch (_context.prev = _context.next) {\n                          case 0:\n                            _context.t0 = asyncFunction;\n                            _context.next = 3;\n                            return promise;\n\n                          case 3:\n                            _context.t1 = _context.sent;\n                            _context.next = 6;\n                            return (0, _context.t0)(_context.t1);\n\n                          case 6:\n                            return _context.abrupt(\"return\", _context.sent);\n\n                          case 7:\n                          case \"end\":\n                            return _context.stop();\n                        }\n                      }\n                    }, _callee);\n                  }));\n\n                  return function (_x5, _x6) {\n                    return _ref.apply(this, arguments);\n                  };\n                }(), Promise.resolve());\n\n              case 16:\n                result = _context2.sent;\n\n                if (!promises.length) {\n                  _context2.next = 20;\n                  break;\n                }\n\n                _context2.next = 20;\n                return this.sequelize.dialect.connectionManager._refreshDynamicOIDs();\n\n              case 20:\n                return _context2.abrupt(\"return\", result);\n\n              case 21:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n\n      function ensureEnums(_x, _x2, _x3, _x4) {\n        return _ensureEnums.apply(this, arguments);\n      }\n\n      return ensureEnums;\n    }()\n    /**\n     * @override\n     */\n\n  }, {\n    key: \"getForeignKeyReferencesForTable\",\n    value: function () {\n      var _getForeignKeyReferencesForTable = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3(tableName, options) {\n        var queryOptions, query, result;\n        return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                queryOptions = _objectSpread({}, options, {\n                  type: QueryTypes.FOREIGNKEYS\n                }); // postgres needs some special treatment as those field names returned are all lowercase\n                // in order to keep same result with other dialects.\n\n                query = this.queryGenerator.getForeignKeyReferencesQuery(tableName, this.sequelize.config.database);\n                _context3.next = 4;\n                return this.sequelize.query(query, queryOptions);\n\n              case 4:\n                result = _context3.sent;\n                return _context3.abrupt(\"return\", result.map(Utils.camelizeObjectKeys));\n\n              case 6:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this);\n      }));\n\n      function getForeignKeyReferencesForTable(_x7, _x8) {\n        return _getForeignKeyReferencesForTable.apply(this, arguments);\n      }\n\n      return getForeignKeyReferencesForTable;\n    }()\n    /**\n     * Drop specified enum from database (Postgres only)\n     *\n     * @param {string} [enumName]  Enum name to drop\n     * @param {object} options Query options\n     *\n     * @returns {Promise}\n     */\n\n  }, {\n    key: \"dropEnum\",\n    value: function () {\n      var _dropEnum = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee4(enumName, options) {\n        return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                options = options || {};\n                return _context4.abrupt(\"return\", this.sequelize.query(this.queryGenerator.pgEnumDrop(null, null, this.queryGenerator.pgEscapeAndQuote(enumName)), _objectSpread({}, options, {\n                  raw: true\n                })));\n\n              case 2:\n              case \"end\":\n                return _context4.stop();\n            }\n          }\n        }, _callee4, this);\n      }));\n\n      function dropEnum(_x9, _x10) {\n        return _dropEnum.apply(this, arguments);\n      }\n\n      return dropEnum;\n    }()\n    /**\n     * Drop all enums from database (Postgres only)\n     *\n     * @param {object} options Query options\n     *\n     * @returns {Promise}\n     */\n\n  }, {\n    key: \"dropAllEnums\",\n    value: function () {\n      var _dropAllEnums = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee5(options) {\n        var _this2 = this;\n\n        var enums;\n        return _regeneratorRuntime.wrap(function _callee5$(_context5) {\n          while (1) {\n            switch (_context5.prev = _context5.next) {\n              case 0:\n                options = options || {};\n                _context5.next = 3;\n                return this.pgListEnums(null, options);\n\n              case 3:\n                enums = _context5.sent;\n                _context5.next = 6;\n                return Promise.all(enums.map(function (result) {\n                  return _this2.sequelize.query(_this2.queryGenerator.pgEnumDrop(null, null, _this2.queryGenerator.pgEscapeAndQuote(result.enum_name)), _objectSpread({}, options, {\n                    raw: true\n                  }));\n                }));\n\n              case 6:\n                return _context5.abrupt(\"return\", _context5.sent);\n\n              case 7:\n              case \"end\":\n                return _context5.stop();\n            }\n          }\n        }, _callee5, this);\n      }));\n\n      function dropAllEnums(_x11) {\n        return _dropAllEnums.apply(this, arguments);\n      }\n\n      return dropAllEnums;\n    }()\n    /**\n     * List all enums (Postgres only)\n     *\n     * @param {string} [tableName]  Table whose enum to list\n     * @param {object} [options]    Query options\n     *\n     * @returns {Promise}\n     */\n\n  }, {\n    key: \"pgListEnums\",\n    value: function () {\n      var _pgListEnums = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee6(tableName, options) {\n        var sql;\n        return _regeneratorRuntime.wrap(function _callee6$(_context6) {\n          while (1) {\n            switch (_context6.prev = _context6.next) {\n              case 0:\n                options = options || {};\n                sql = this.queryGenerator.pgListEnums(tableName);\n                return _context6.abrupt(\"return\", this.sequelize.query(sql, _objectSpread({}, options, {\n                  plain: false,\n                  raw: true,\n                  type: QueryTypes.SELECT\n                })));\n\n              case 3:\n              case \"end\":\n                return _context6.stop();\n            }\n          }\n        }, _callee6, this);\n      }));\n\n      function pgListEnums(_x12, _x13) {\n        return _pgListEnums.apply(this, arguments);\n      }\n\n      return pgListEnums;\n    }()\n    /**\n     * Since postgres has a special case for enums, we should drop the related\n     * enum type within the table and attribute\n     *\n     * @override\n     */\n\n  }, {\n    key: \"dropTable\",\n    value: function () {\n      var _dropTable = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee7(tableName, options) {\n        var promises, instanceTable, getTableName, keys, keyLen, _i, sql;\n\n        return _regeneratorRuntime.wrap(function _callee7$(_context7) {\n          while (1) {\n            switch (_context7.prev = _context7.next) {\n              case 0:\n                _context7.next = 2;\n                return _get(_getPrototypeOf(PostgresQueryInterface.prototype), \"dropTable\", this).call(this, tableName, options);\n\n              case 2:\n                promises = [];\n                instanceTable = this.sequelize.modelManager.getModel(tableName, {\n                  attribute: 'tableName'\n                });\n\n                if (instanceTable) {\n                  _context7.next = 6;\n                  break;\n                }\n\n                return _context7.abrupt(\"return\");\n\n              case 6:\n                getTableName = (!options || !options.schema || options.schema === 'public' ? '' : \"\".concat(options.schema, \"_\")) + tableName;\n                keys = Object.keys(instanceTable.rawAttributes);\n                keyLen = keys.length;\n\n                for (_i = 0; _i < keyLen; _i++) {\n                  if (instanceTable.rawAttributes[keys[_i]].type instanceof DataTypes.ENUM) {\n                    sql = this.queryGenerator.pgEnumDrop(getTableName, keys[_i]);\n                    options.supportsSearchPath = false;\n                    promises.push(this.sequelize.query(sql, _objectSpread({}, options, {\n                      raw: true\n                    })));\n                  }\n                }\n\n                _context7.next = 12;\n                return Promise.all(promises);\n\n              case 12:\n              case \"end\":\n                return _context7.stop();\n            }\n          }\n        }, _callee7, this);\n      }));\n\n      function dropTable(_x14, _x15) {\n        return _dropTable.apply(this, arguments);\n      }\n\n      return dropTable;\n    }()\n  }]);\n\n  return PostgresQueryInterface;\n}(QueryInterface);\n\nexports.PostgresQueryInterface = PostgresQueryInterface;","map":null,"metadata":{},"sourceType":"script"}