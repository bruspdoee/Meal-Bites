{"ast":null,"code":"'use strict';\n\nvar _createClass = require(\"/Users/jervisbay/project-tres/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\n\nvar _possibleConstructorReturn = require(\"/Users/jervisbay/project-tres/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/possibleConstructorReturn\");\n\nvar _getPrototypeOf = require(\"/Users/jervisbay/project-tres/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/getPrototypeOf\");\n\nvar _inherits = require(\"/Users/jervisbay/project-tres/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/inherits\");\n\nvar _classCallCheck = require(\"/Users/jervisbay/project-tres/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _objectSpread = require(\"/Users/jervisbay/project-tres/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/objectSpread\");\n\nfunction _createForOfIteratorHelper(o, allowArrayLike) { var it; if (typeof Symbol === \"undefined\" || o[Symbol.iterator] == null) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = o[Symbol.iterator](); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nvar DataTypes = require('./data-types');\n\nvar SqlString = require('./sql-string');\n\nvar _ = require('lodash');\n\nvar baseIsNative = require('lodash/_baseIsNative');\n\nvar uuidv1 = require('uuid').v1;\n\nvar uuidv4 = require('uuid').v4;\n\nvar operators = require('./operators');\n\nvar operatorsSet = new Set(Object.values(operators));\n\nvar inflection = require('inflection');\n\nexports.classToInvokable = require('./utils/class-to-invokable').classToInvokable;\nexports.joinSQLFragments = require('./utils/join-sql-fragments').joinSQLFragments;\n\nfunction useInflection(_inflection) {\n  inflection = _inflection;\n}\n\nexports.useInflection = useInflection;\n\nfunction camelizeIf(str, condition) {\n  var result = str;\n\n  if (condition) {\n    result = camelize(str);\n  }\n\n  return result;\n}\n\nexports.camelizeIf = camelizeIf;\n\nfunction underscoredIf(str, condition) {\n  var result = str;\n\n  if (condition) {\n    result = underscore(str);\n  }\n\n  return result;\n}\n\nexports.underscoredIf = underscoredIf;\n\nfunction isPrimitive(val) {\n  var type = typeof val;\n  return type === 'string' || type === 'number' || type === 'boolean';\n}\n\nexports.isPrimitive = isPrimitive; // Same concept as _.merge, but don't overwrite properties that have already been assigned\n\nfunction mergeDefaults(a, b) {\n  return _.mergeWith(a, b, function (objectValue, sourceValue) {\n    // If it's an object, let _ handle it this time, we will be called again for each property\n    if (!_.isPlainObject(objectValue) && objectValue !== undefined) {\n      // _.isNative includes a check for core-js and throws an error if present.\n      // Depending on _baseIsNative bypasses the core-js check.\n      if (_.isFunction(objectValue) && baseIsNative(objectValue)) {\n        return sourceValue || objectValue;\n      }\n\n      return objectValue;\n    }\n  });\n}\n\nexports.mergeDefaults = mergeDefaults; // An alternative to _.merge, which doesn't clone its arguments\n// Cloning is a bad idea because options arguments may contain references to sequelize\n// models - which again reference database libs which don't like to be cloned (in particular pg-native)\n\nfunction merge() {\n  var result = {};\n\n  var _iterator = _createForOfIteratorHelper(arguments),\n      _step;\n\n  try {\n    for (_iterator.s(); !(_step = _iterator.n()).done;) {\n      var obj = _step.value;\n\n      _.forOwn(obj, function (value, key) {\n        if (value !== undefined) {\n          if (!result[key]) {\n            result[key] = value;\n          } else if (_.isPlainObject(value) && _.isPlainObject(result[key])) {\n            result[key] = merge(result[key], value);\n          } else if (Array.isArray(value) && Array.isArray(result[key])) {\n            result[key] = value.concat(result[key]);\n          } else {\n            result[key] = value;\n          }\n        }\n      });\n    }\n  } catch (err) {\n    _iterator.e(err);\n  } finally {\n    _iterator.f();\n  }\n\n  return result;\n}\n\nexports.merge = merge;\n\nfunction spliceStr(str, index, count, add) {\n  return str.slice(0, index) + add + str.slice(index + count);\n}\n\nexports.spliceStr = spliceStr;\n\nfunction camelize(str) {\n  return str.trim().replace(/[-_\\s]+(.)?/g, function (match, c) {\n    return c.toUpperCase();\n  });\n}\n\nexports.camelize = camelize;\n\nfunction underscore(str) {\n  return inflection.underscore(str);\n}\n\nexports.underscore = underscore;\n\nfunction singularize(str) {\n  return inflection.singularize(str);\n}\n\nexports.singularize = singularize;\n\nfunction pluralize(str) {\n  return inflection.pluralize(str);\n}\n\nexports.pluralize = pluralize;\n\nfunction format(arr, dialect) {\n  var timeZone = null; // Make a clone of the array beacuse format modifies the passed args\n\n  return SqlString.format(arr[0], arr.slice(1), timeZone, dialect);\n}\n\nexports.format = format;\n\nfunction formatNamedParameters(sql, parameters, dialect) {\n  var timeZone = null;\n  return SqlString.formatNamedParameters(sql, parameters, timeZone, dialect);\n}\n\nexports.formatNamedParameters = formatNamedParameters;\n\nfunction cloneDeep(obj, onlyPlain) {\n  obj = obj || {};\n  return _.cloneDeepWith(obj, function (elem) {\n    // Do not try to customize cloning of arrays or POJOs\n    if (Array.isArray(elem) || _.isPlainObject(elem)) {\n      return undefined;\n    } // If we specified to clone only plain objects & arrays, we ignore everyhing else\n    // In any case, don't clone stuff that's an object, but not a plain one - fx example sequelize models and instances\n\n\n    if (onlyPlain || typeof elem === 'object') {\n      return elem;\n    } // Preserve special data-types like `fn` across clones. _.get() is used for checking up the prototype chain\n\n\n    if (elem && typeof elem.clone === 'function') {\n      return elem.clone();\n    }\n  });\n}\n\nexports.cloneDeep = cloneDeep;\n/* Expand and normalize finder options */\n\nfunction mapFinderOptions(options, Model) {\n  if (options.attributes && Array.isArray(options.attributes)) {\n    options.attributes = Model._injectDependentVirtualAttributes(options.attributes);\n    options.attributes = options.attributes.filter(function (v) {\n      return !Model._virtualAttributes.has(v);\n    });\n  }\n\n  mapOptionFieldNames(options, Model);\n  return options;\n}\n\nexports.mapFinderOptions = mapFinderOptions;\n/* Used to map field names in attributes and where conditions */\n\nfunction mapOptionFieldNames(options, Model) {\n  if (Array.isArray(options.attributes)) {\n    options.attributes = options.attributes.map(function (attr) {\n      // Object lookups will force any variable to strings, we don't want that for special objects etc\n      if (typeof attr !== 'string') return attr; // Map attributes to aliased syntax attributes\n\n      if (Model.rawAttributes[attr] && attr !== Model.rawAttributes[attr].field) {\n        return [Model.rawAttributes[attr].field, attr];\n      }\n\n      return attr;\n    });\n  }\n\n  if (options.where && _.isPlainObject(options.where)) {\n    options.where = mapWhereFieldNames(options.where, Model);\n  }\n\n  return options;\n}\n\nexports.mapOptionFieldNames = mapOptionFieldNames;\n\nfunction mapWhereFieldNames(attributes, Model) {\n  if (attributes) {\n    getComplexKeys(attributes).forEach(function (attribute) {\n      var rawAttribute = Model.rawAttributes[attribute];\n\n      if (rawAttribute && rawAttribute.field !== rawAttribute.fieldName) {\n        attributes[rawAttribute.field] = attributes[attribute];\n        delete attributes[attribute];\n      }\n\n      if (_.isPlainObject(attributes[attribute]) && !(rawAttribute && (rawAttribute.type instanceof DataTypes.HSTORE || rawAttribute.type instanceof DataTypes.JSON))) {\n        // Prevent renaming of HSTORE & JSON fields\n        attributes[attribute] = mapOptionFieldNames({\n          where: attributes[attribute]\n        }, Model).where;\n      }\n\n      if (Array.isArray(attributes[attribute])) {\n        attributes[attribute].forEach(function (where, index) {\n          if (_.isPlainObject(where)) {\n            attributes[attribute][index] = mapWhereFieldNames(where, Model);\n          }\n        });\n      }\n    });\n  }\n\n  return attributes;\n}\n\nexports.mapWhereFieldNames = mapWhereFieldNames;\n/* Used to map field names in values */\n\nfunction mapValueFieldNames(dataValues, fields, Model) {\n  var values = {};\n\n  var _iterator2 = _createForOfIteratorHelper(fields),\n      _step2;\n\n  try {\n    for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n      var attr = _step2.value;\n\n      if (dataValues[attr] !== undefined && !Model._virtualAttributes.has(attr)) {\n        // Field name mapping\n        if (Model.rawAttributes[attr] && Model.rawAttributes[attr].field && Model.rawAttributes[attr].field !== attr) {\n          values[Model.rawAttributes[attr].field] = dataValues[attr];\n        } else {\n          values[attr] = dataValues[attr];\n        }\n      }\n    }\n  } catch (err) {\n    _iterator2.e(err);\n  } finally {\n    _iterator2.f();\n  }\n\n  return values;\n}\n\nexports.mapValueFieldNames = mapValueFieldNames;\n\nfunction isColString(value) {\n  return typeof value === 'string' && value[0] === '$' && value[value.length - 1] === '$';\n}\n\nexports.isColString = isColString;\n\nfunction canTreatArrayAsAnd(arr) {\n  return arr.some(function (arg) {\n    return _.isPlainObject(arg) || arg instanceof Where;\n  });\n}\n\nexports.canTreatArrayAsAnd = canTreatArrayAsAnd;\n\nfunction combineTableNames(tableName1, tableName2) {\n  return tableName1.toLowerCase() < tableName2.toLowerCase() ? tableName1 + tableName2 : tableName2 + tableName1;\n}\n\nexports.combineTableNames = combineTableNames;\n\nfunction toDefaultValue(value, dialect) {\n  if (typeof value === 'function') {\n    var tmp = value();\n\n    if (tmp instanceof DataTypes.ABSTRACT) {\n      return tmp.toSql();\n    }\n\n    return tmp;\n  }\n\n  if (value instanceof DataTypes.UUIDV1) {\n    return uuidv1();\n  }\n\n  if (value instanceof DataTypes.UUIDV4) {\n    return uuidv4();\n  }\n\n  if (value instanceof DataTypes.NOW) {\n    return now(dialect);\n  }\n\n  if (Array.isArray(value)) {\n    return value.slice();\n  }\n\n  if (_.isPlainObject(value)) {\n    return _objectSpread({}, value);\n  }\n\n  return value;\n}\n\nexports.toDefaultValue = toDefaultValue;\n/**\n * Determine if the default value provided exists and can be described\n * in a db schema using the DEFAULT directive.\n *\n * @param  {*} value Any default value.\n * @returns {boolean} yes / no.\n * @private\n */\n\nfunction defaultValueSchemable(value) {\n  if (value === undefined) {\n    return false;\n  } // TODO this will be schemable when all supported db\n  // have been normalized for this case\n\n\n  if (value instanceof DataTypes.NOW) {\n    return false;\n  }\n\n  if (value instanceof DataTypes.UUIDV1 || value instanceof DataTypes.UUIDV4) {\n    return false;\n  }\n\n  return typeof value !== 'function';\n}\n\nexports.defaultValueSchemable = defaultValueSchemable;\n\nfunction removeNullValuesFromHash(hash, omitNull, options) {\n  var result = hash;\n  options = options || {};\n  options.allowNull = options.allowNull || [];\n\n  if (omitNull) {\n    var _hash = {};\n\n    _.forIn(hash, function (val, key) {\n      if (options.allowNull.includes(key) || key.endsWith('Id') || val !== null && val !== undefined) {\n        _hash[key] = val;\n      }\n    });\n\n    result = _hash;\n  }\n\n  return result;\n}\n\nexports.removeNullValuesFromHash = removeNullValuesFromHash;\nvar dialects = new Set(['mariadb', 'mysql', 'postgres', 'sqlite', 'mssql']);\n\nfunction now(dialect) {\n  var d = new Date();\n\n  if (!dialects.has(dialect)) {\n    d.setMilliseconds(0);\n  }\n\n  return d;\n}\n\nexports.now = now; // Note: Use the `quoteIdentifier()` and `escape()` methods on the\n// `QueryInterface` instead for more portable code.\n\nvar TICK_CHAR = '`';\nexports.TICK_CHAR = TICK_CHAR;\n\nfunction addTicks(s, tickChar) {\n  tickChar = tickChar || TICK_CHAR;\n  return tickChar + removeTicks(s, tickChar) + tickChar;\n}\n\nexports.addTicks = addTicks;\n\nfunction removeTicks(s, tickChar) {\n  tickChar = tickChar || TICK_CHAR;\n  return s.replace(new RegExp(tickChar, 'g'), '');\n}\n\nexports.removeTicks = removeTicks;\n/**\n * Receives a tree-like object and returns a plain object which depth is 1.\n *\n * - Input:\n *\n *  {\n *    name: 'John',\n *    address: {\n *      street: 'Fake St. 123',\n *      coordinates: {\n *        longitude: 55.6779627,\n *        latitude: 12.5964313\n *      }\n *    }\n *  }\n *\n * - Output:\n *\n *  {\n *    name: 'John',\n *    address.street: 'Fake St. 123',\n *    address.coordinates.latitude: 55.6779627,\n *    address.coordinates.longitude: 12.5964313\n *  }\n *\n * @param {object} value an Object\n * @returns {object} a flattened object\n * @private\n */\n\nfunction flattenObjectDeep(value) {\n  if (!_.isPlainObject(value)) return value;\n  var flattenedObj = {};\n\n  function flattenObject(obj, subPath) {\n    Object.keys(obj).forEach(function (key) {\n      var pathToProperty = subPath ? \"\".concat(subPath, \".\").concat(key) : key;\n\n      if (typeof obj[key] === 'object' && obj[key] !== null) {\n        flattenObject(obj[key], pathToProperty);\n      } else {\n        flattenedObj[pathToProperty] = _.get(obj, key);\n      }\n    });\n    return flattenedObj;\n  }\n\n  return flattenObject(value, undefined);\n}\n\nexports.flattenObjectDeep = flattenObjectDeep;\n/**\n * Utility functions for representing SQL functions, and columns that should be escaped.\n * Please do not use these functions directly, use Sequelize.fn and Sequelize.col instead.\n *\n * @private\n */\n\nvar SequelizeMethod = function SequelizeMethod() {\n  _classCallCheck(this, SequelizeMethod);\n};\n\nexports.SequelizeMethod = SequelizeMethod;\n\nvar Fn = /*#__PURE__*/function (_SequelizeMethod) {\n  _inherits(Fn, _SequelizeMethod);\n\n  function Fn(fn, args) {\n    var _this;\n\n    _classCallCheck(this, Fn);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Fn).call(this));\n    _this.fn = fn;\n    _this.args = args;\n    return _this;\n  }\n\n  _createClass(Fn, [{\n    key: \"clone\",\n    value: function clone() {\n      return new Fn(this.fn, this.args);\n    }\n  }]);\n\n  return Fn;\n}(SequelizeMethod);\n\nexports.Fn = Fn;\n\nvar Col = /*#__PURE__*/function (_SequelizeMethod2) {\n  _inherits(Col, _SequelizeMethod2);\n\n  function Col(col) {\n    var _this2;\n\n    _classCallCheck(this, Col);\n\n    _this2 = _possibleConstructorReturn(this, _getPrototypeOf(Col).call(this));\n\n    for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n      args[_key - 1] = arguments[_key];\n    }\n\n    if (args.length > 0) {\n      col = args;\n    }\n\n    _this2.col = col;\n    return _this2;\n  }\n\n  return Col;\n}(SequelizeMethod);\n\nexports.Col = Col;\n\nvar Cast = /*#__PURE__*/function (_SequelizeMethod3) {\n  _inherits(Cast, _SequelizeMethod3);\n\n  function Cast(val, type, json) {\n    var _this3;\n\n    _classCallCheck(this, Cast);\n\n    _this3 = _possibleConstructorReturn(this, _getPrototypeOf(Cast).call(this));\n    _this3.val = val;\n    _this3.type = (type || '').trim();\n    _this3.json = json || false;\n    return _this3;\n  }\n\n  return Cast;\n}(SequelizeMethod);\n\nexports.Cast = Cast;\n\nvar Literal = /*#__PURE__*/function (_SequelizeMethod4) {\n  _inherits(Literal, _SequelizeMethod4);\n\n  function Literal(val) {\n    var _this4;\n\n    _classCallCheck(this, Literal);\n\n    _this4 = _possibleConstructorReturn(this, _getPrototypeOf(Literal).call(this));\n    _this4.val = val;\n    return _this4;\n  }\n\n  return Literal;\n}(SequelizeMethod);\n\nexports.Literal = Literal;\n\nvar Json = /*#__PURE__*/function (_SequelizeMethod5) {\n  _inherits(Json, _SequelizeMethod5);\n\n  function Json(conditionsOrPath, value) {\n    var _this5;\n\n    _classCallCheck(this, Json);\n\n    _this5 = _possibleConstructorReturn(this, _getPrototypeOf(Json).call(this));\n\n    if (_.isObject(conditionsOrPath)) {\n      _this5.conditions = conditionsOrPath;\n    } else {\n      _this5.path = conditionsOrPath;\n\n      if (value) {\n        _this5.value = value;\n      }\n    }\n\n    return _this5;\n  }\n\n  return Json;\n}(SequelizeMethod);\n\nexports.Json = Json;\n\nvar Where = /*#__PURE__*/function (_SequelizeMethod6) {\n  _inherits(Where, _SequelizeMethod6);\n\n  function Where(attribute, comparator, logic) {\n    var _this6;\n\n    _classCallCheck(this, Where);\n\n    _this6 = _possibleConstructorReturn(this, _getPrototypeOf(Where).call(this));\n\n    if (logic === undefined) {\n      logic = comparator;\n      comparator = '=';\n    }\n\n    _this6.attribute = attribute;\n    _this6.comparator = comparator;\n    _this6.logic = logic;\n    return _this6;\n  }\n\n  return Where;\n}(SequelizeMethod);\n\nexports.Where = Where; //Collection of helper methods to make it easier to work with symbol operators\n\n/**\n * getOperators\n *\n * @param  {object} obj\n * @returns {Array<symbol>} All operators properties of obj\n * @private\n */\n\nfunction getOperators(obj) {\n  return Object.getOwnPropertySymbols(obj).filter(function (s) {\n    return operatorsSet.has(s);\n  });\n}\n\nexports.getOperators = getOperators;\n/**\n * getComplexKeys\n *\n * @param  {object} obj\n * @returns {Array<string|symbol>} All keys including operators\n * @private\n */\n\nfunction getComplexKeys(obj) {\n  return getOperators(obj).concat(Object.keys(obj));\n}\n\nexports.getComplexKeys = getComplexKeys;\n/**\n * getComplexSize\n *\n * @param  {object|Array} obj\n * @returns {number}      Length of object properties including operators if obj is array returns its length\n * @private\n */\n\nfunction getComplexSize(obj) {\n  return Array.isArray(obj) ? obj.length : getComplexKeys(obj).length;\n}\n\nexports.getComplexSize = getComplexSize;\n/**\n * Returns true if a where clause is empty, even with Symbols\n *\n * @param  {object} obj\n * @returns {boolean}\n * @private\n */\n\nfunction isWhereEmpty(obj) {\n  return !!obj && _.isEmpty(obj) && getOperators(obj).length === 0;\n}\n\nexports.isWhereEmpty = isWhereEmpty;\n/**\n * Returns ENUM name by joining table and column name\n *\n * @param {string} tableName\n * @param {string} columnName\n * @returns {string}\n * @private\n */\n\nfunction generateEnumName(tableName, columnName) {\n  return \"enum_\".concat(tableName, \"_\").concat(columnName);\n}\n\nexports.generateEnumName = generateEnumName;\n/**\n * Returns an new Object which keys are camelized\n *\n * @param {object} obj\n * @returns {string}\n * @private\n */\n\nfunction camelizeObjectKeys(obj) {\n  var newObj = new Object();\n  Object.keys(obj).forEach(function (key) {\n    newObj[camelize(key)] = obj[key];\n  });\n  return newObj;\n}\n\nexports.camelizeObjectKeys = camelizeObjectKeys;\n/**\n * Assigns own and inherited enumerable string and symbol keyed properties of source\n * objects to the destination object.\n *\n * https://lodash.com/docs/4.17.4#defaults\n *\n * **Note:** This method mutates `object`.\n *\n * @param {object} object The destination object.\n * @param {...object} [sources] The source objects.\n * @returns {object} Returns `object`.\n * @private\n */\n\nfunction defaults(object) {\n  object = Object(object);\n\n  for (var _len2 = arguments.length, sources = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {\n    sources[_key2 - 1] = arguments[_key2];\n  }\n\n  sources.forEach(function (source) {\n    if (source) {\n      source = Object(source);\n      getComplexKeys(source).forEach(function (key) {\n        var value = object[key];\n\n        if (value === undefined || _.eq(value, Object.prototype[key]) && !Object.prototype.hasOwnProperty.call(object, key)) {\n          object[key] = source[key];\n        }\n      });\n    }\n  });\n  return object;\n}\n\nexports.defaults = defaults;\n/**\n *\n * @param {object} index\n * @param {Array}  index.fields\n * @param {string} [index.name]\n * @param {string|object} tableName\n *\n * @returns {object}\n * @private\n */\n\nfunction nameIndex(index, tableName) {\n  if (tableName.tableName) tableName = tableName.tableName;\n\n  if (!Object.prototype.hasOwnProperty.call(index, 'name')) {\n    var fields = index.fields.map(function (field) {\n      return typeof field === 'string' ? field : field.name || field.attribute;\n    });\n    index.name = underscore(\"\".concat(tableName, \"_\").concat(fields.join('_')));\n  }\n\n  return index;\n}\n\nexports.nameIndex = nameIndex;\n/**\n * Checks if 2 arrays intersect.\n *\n * @param {Array} arr1\n * @param {Array} arr2\n * @private\n */\n\nfunction intersects(arr1, arr2) {\n  return arr1.some(function (v) {\n    return arr2.includes(v);\n  });\n}\n\nexports.intersects = intersects;","map":null,"metadata":{},"sourceType":"script"}