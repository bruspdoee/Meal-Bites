{"ast":null,"code":"'use strict';\n\nvar _objectSpread = require(\"/Users/jervisbay/project-tres/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/objectSpread\");\n\nvar _classCallCheck = require(\"/Users/jervisbay/project-tres/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/Users/jervisbay/project-tres/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\n\nvar _possibleConstructorReturn = require(\"/Users/jervisbay/project-tres/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/possibleConstructorReturn\");\n\nvar _get = require(\"/Users/jervisbay/project-tres/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/get\");\n\nvar _getPrototypeOf = require(\"/Users/jervisbay/project-tres/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/getPrototypeOf\");\n\nvar _inherits = require(\"/Users/jervisbay/project-tres/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/inherits\");\n\nvar Utils = require('../../utils');\n\nvar util = require('util');\n\nvar DataTypes = require('../../data-types');\n\nvar AbstractQueryGenerator = require('../abstract/query-generator');\n\nvar semver = require('semver');\n\nvar _ = require('lodash');\n\nvar PostgresQueryGenerator = /*#__PURE__*/function (_AbstractQueryGenerat) {\n  _inherits(PostgresQueryGenerator, _AbstractQueryGenerat);\n\n  function PostgresQueryGenerator() {\n    _classCallCheck(this, PostgresQueryGenerator);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(PostgresQueryGenerator).apply(this, arguments));\n  }\n\n  _createClass(PostgresQueryGenerator, [{\n    key: \"setSearchPath\",\n    value: function setSearchPath(searchPath) {\n      return \"SET search_path to \".concat(searchPath, \";\");\n    }\n  }, {\n    key: \"createDatabaseQuery\",\n    value: function createDatabaseQuery(databaseName, options) {\n      options = _objectSpread({\n        encoding: null,\n        collate: null\n      }, options);\n      var values = {\n        database: this.quoteTable(databaseName),\n        encoding: options.encoding ? \" ENCODING = \".concat(this.escape(options.encoding)) : '',\n        collation: options.collate ? \" LC_COLLATE = \".concat(this.escape(options.collate)) : '',\n        ctype: options.ctype ? \" LC_CTYPE = \".concat(this.escape(options.ctype)) : '',\n        template: options.template ? \" TEMPLATE = \".concat(this.escape(options.template)) : ''\n      };\n      return \"CREATE DATABASE \".concat(values.database).concat(values.encoding).concat(values.collation).concat(values.ctype).concat(values.template, \";\");\n    }\n  }, {\n    key: \"dropDatabaseQuery\",\n    value: function dropDatabaseQuery(databaseName) {\n      return \"DROP DATABASE IF EXISTS \".concat(this.quoteTable(databaseName), \";\");\n    }\n  }, {\n    key: \"createSchema\",\n    value: function createSchema(schema) {\n      var databaseVersion = _.get(this, 'sequelize.options.databaseVersion', 0);\n\n      if (databaseVersion && semver.gte(databaseVersion, '9.2.0')) {\n        return \"CREATE SCHEMA IF NOT EXISTS \".concat(schema, \";\");\n      }\n\n      return \"CREATE SCHEMA \".concat(schema, \";\");\n    }\n  }, {\n    key: \"dropSchema\",\n    value: function dropSchema(schema) {\n      return \"DROP SCHEMA IF EXISTS \".concat(schema, \" CASCADE;\");\n    }\n  }, {\n    key: \"showSchemasQuery\",\n    value: function showSchemasQuery() {\n      return \"SELECT schema_name FROM information_schema.schemata WHERE schema_name <> 'information_schema' AND schema_name != 'public' AND schema_name !~ E'^pg_';\";\n    }\n  }, {\n    key: \"versionQuery\",\n    value: function versionQuery() {\n      return 'SHOW SERVER_VERSION';\n    }\n  }, {\n    key: \"createTableQuery\",\n    value: function createTableQuery(tableName, attributes, options) {\n      var _this = this;\n\n      options = _objectSpread({}, options); //Postgres 9.0 does not support CREATE TABLE IF NOT EXISTS, 9.1 and above do\n\n      var databaseVersion = _.get(this, 'sequelize.options.databaseVersion', 0);\n\n      var attrStr = [];\n      var comments = '';\n      var columnComments = '';\n      var quotedTable = this.quoteTable(tableName);\n\n      if (options.comment && typeof options.comment === 'string') {\n        comments += \"; COMMENT ON TABLE \".concat(quotedTable, \" IS \").concat(this.escape(options.comment));\n      }\n\n      for (var attr in attributes) {\n        var quotedAttr = this.quoteIdentifier(attr);\n        var i = attributes[attr].indexOf('COMMENT ');\n\n        if (i !== -1) {\n          // Move comment to a separate query\n          var escapedCommentText = this.escape(attributes[attr].substring(i + 8));\n          columnComments += \"; COMMENT ON COLUMN \".concat(quotedTable, \".\").concat(quotedAttr, \" IS \").concat(escapedCommentText);\n          attributes[attr] = attributes[attr].substring(0, i);\n        }\n\n        var dataType = this.dataTypeMapping(tableName, attr, attributes[attr]);\n        attrStr.push(\"\".concat(quotedAttr, \" \").concat(dataType));\n      }\n\n      var attributesClause = attrStr.join(', ');\n\n      if (options.uniqueKeys) {\n        _.each(options.uniqueKeys, function (columns) {\n          if (columns.customIndex) {\n            attributesClause += \", UNIQUE (\".concat(columns.fields.map(function (field) {\n              return _this.quoteIdentifier(field);\n            }).join(', '), \")\");\n          }\n        });\n      }\n\n      var pks = _.reduce(attributes, function (acc, attribute, key) {\n        if (attribute.includes('PRIMARY KEY')) {\n          acc.push(_this.quoteIdentifier(key));\n        }\n\n        return acc;\n      }, []).join(',');\n\n      if (pks.length > 0) {\n        attributesClause += \", PRIMARY KEY (\".concat(pks, \")\");\n      }\n\n      return \"CREATE TABLE \".concat(databaseVersion === 0 || semver.gte(databaseVersion, '9.1.0') ? 'IF NOT EXISTS ' : '').concat(quotedTable, \" (\").concat(attributesClause, \")\").concat(comments).concat(columnComments, \";\");\n    }\n  }, {\n    key: \"dropTableQuery\",\n    value: function dropTableQuery(tableName, options) {\n      options = options || {};\n      return \"DROP TABLE IF EXISTS \".concat(this.quoteTable(tableName)).concat(options.cascade ? ' CASCADE' : '', \";\");\n    }\n  }, {\n    key: \"showTablesQuery\",\n    value: function showTablesQuery() {\n      return \"SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_type LIKE '%TABLE' AND table_name != 'spatial_ref_sys';\";\n    }\n  }, {\n    key: \"describeTableQuery\",\n    value: function describeTableQuery(tableName, schema) {\n      if (!schema) schema = 'public';\n      return 'SELECT ' + 'pk.constraint_type as \"Constraint\",' + 'c.column_name as \"Field\", ' + 'c.column_default as \"Default\",' + 'c.is_nullable as \"Null\", ' + '(CASE WHEN c.udt_name = \\'hstore\\' THEN c.udt_name ELSE c.data_type END) || (CASE WHEN c.character_maximum_length IS NOT NULL THEN \\'(\\' || c.character_maximum_length || \\')\\' ELSE \\'\\' END) as \"Type\", ' + '(SELECT array_agg(e.enumlabel) FROM pg_catalog.pg_type t JOIN pg_catalog.pg_enum e ON t.oid=e.enumtypid WHERE t.typname=c.udt_name) AS \"special\", ' + '(SELECT pgd.description FROM pg_catalog.pg_statio_all_tables AS st INNER JOIN pg_catalog.pg_description pgd on (pgd.objoid=st.relid) WHERE c.ordinal_position=pgd.objsubid AND c.table_name=st.relname) AS \"Comment\" ' + 'FROM information_schema.columns c ' + 'LEFT JOIN (SELECT tc.table_schema, tc.table_name, ' + 'cu.column_name, tc.constraint_type ' + 'FROM information_schema.TABLE_CONSTRAINTS tc ' + 'JOIN information_schema.KEY_COLUMN_USAGE  cu ' + 'ON tc.table_schema=cu.table_schema and tc.table_name=cu.table_name ' + 'and tc.constraint_name=cu.constraint_name ' + 'and tc.constraint_type=\\'PRIMARY KEY\\') pk ' + 'ON pk.table_schema=c.table_schema ' + 'AND pk.table_name=c.table_name ' + 'AND pk.column_name=c.column_name ' + \"WHERE c.table_name = \".concat(this.escape(tableName), \" AND c.table_schema = \").concat(this.escape(schema), \" \");\n    }\n    /**\n     * Check whether the statmement is json function or simple path\n     *\n     * @param   {string}  stmt  The statement to validate\n     * @returns {boolean}       true if the given statement is json function\n     * @throws  {Error}         throw if the statement looks like json function but has invalid token\n     */\n\n  }, {\n    key: \"_checkValidJsonStatement\",\n    value: function _checkValidJsonStatement(stmt) {\n      if (typeof stmt !== 'string') {\n        return false;\n      } // https://www.postgresql.org/docs/current/static/functions-json.html\n\n\n      var jsonFunctionRegex = /^\\s*((?:[a-z]+_){0,2}jsonb?(?:_[a-z]+){0,2})\\([^)]*\\)/i;\n      var jsonOperatorRegex = /^\\s*(->>?|#>>?|@>|<@|\\?[|&]?|\\|{2}|#-)/i;\n      var tokenCaptureRegex = /^\\s*((?:([`\"'])(?:(?!\\2).|\\2{2})*\\2)|[\\w\\d\\s]+|[().,;+-])/i;\n      var currentIndex = 0;\n      var openingBrackets = 0;\n      var closingBrackets = 0;\n      var hasJsonFunction = false;\n      var hasInvalidToken = false;\n\n      while (currentIndex < stmt.length) {\n        var string = stmt.substr(currentIndex);\n        var functionMatches = jsonFunctionRegex.exec(string);\n\n        if (functionMatches) {\n          currentIndex += functionMatches[0].indexOf('(');\n          hasJsonFunction = true;\n          continue;\n        }\n\n        var operatorMatches = jsonOperatorRegex.exec(string);\n\n        if (operatorMatches) {\n          currentIndex += operatorMatches[0].length;\n          hasJsonFunction = true;\n          continue;\n        }\n\n        var tokenMatches = tokenCaptureRegex.exec(string);\n\n        if (tokenMatches) {\n          var capturedToken = tokenMatches[1];\n\n          if (capturedToken === '(') {\n            openingBrackets++;\n          } else if (capturedToken === ')') {\n            closingBrackets++;\n          } else if (capturedToken === ';') {\n            hasInvalidToken = true;\n            break;\n          }\n\n          currentIndex += tokenMatches[0].length;\n          continue;\n        }\n\n        break;\n      } // Check invalid json statement\n\n\n      hasInvalidToken |= openingBrackets !== closingBrackets;\n\n      if (hasJsonFunction && hasInvalidToken) {\n        throw new Error(\"Invalid json statement: \".concat(stmt));\n      } // return true if the statement has valid json function\n\n\n      return hasJsonFunction;\n    }\n  }, {\n    key: \"handleSequelizeMethod\",\n    value: function handleSequelizeMethod(smth, tableName, factory, options, prepend) {\n      var _this2 = this;\n\n      if (smth instanceof Utils.Json) {\n        // Parse nested object\n        if (smth.conditions) {\n          var conditions = this.parseConditionObject(smth.conditions).map(function (condition) {\n            return \"\".concat(_this2.jsonPathExtractionQuery(condition.path[0], _.tail(condition.path)), \" = '\").concat(condition.value, \"'\");\n          });\n          return conditions.join(' AND ');\n        }\n\n        if (smth.path) {\n          var str; // Allow specifying conditions using the postgres json syntax\n\n          if (this._checkValidJsonStatement(smth.path)) {\n            str = smth.path;\n          } else {\n            // Also support json property accessors\n            var paths = _.toPath(smth.path);\n\n            var column = paths.shift();\n            str = this.jsonPathExtractionQuery(column, paths);\n          }\n\n          if (smth.value) {\n            str += util.format(' = %s', this.escape(smth.value));\n          }\n\n          return str;\n        }\n      }\n\n      return _get(_getPrototypeOf(PostgresQueryGenerator.prototype), \"handleSequelizeMethod\", this).call(this, smth, tableName, factory, options, prepend);\n    }\n  }, {\n    key: \"addColumnQuery\",\n    value: function addColumnQuery(table, key, attribute) {\n      var dbDataType = this.attributeToSQL(attribute, {\n        context: 'addColumn',\n        table: table,\n        key: key\n      });\n      var dataType = attribute.type || attribute;\n      var definition = this.dataTypeMapping(table, key, dbDataType);\n      var quotedKey = this.quoteIdentifier(key);\n      var quotedTable = this.quoteTable(this.extractTableDetails(table));\n      var query = \"ALTER TABLE \".concat(quotedTable, \" ADD COLUMN \").concat(quotedKey, \" \").concat(definition, \";\");\n\n      if (dataType instanceof DataTypes.ENUM) {\n        query = this.pgEnum(table, key, dataType) + query;\n      } else if (dataType.type && dataType.type instanceof DataTypes.ENUM) {\n        query = this.pgEnum(table, key, dataType.type) + query;\n      }\n\n      return query;\n    }\n  }, {\n    key: \"removeColumnQuery\",\n    value: function removeColumnQuery(tableName, attributeName) {\n      var quotedTableName = this.quoteTable(this.extractTableDetails(tableName));\n      var quotedAttributeName = this.quoteIdentifier(attributeName);\n      return \"ALTER TABLE \".concat(quotedTableName, \" DROP COLUMN \").concat(quotedAttributeName, \";\");\n    }\n  }, {\n    key: \"changeColumnQuery\",\n    value: function changeColumnQuery(tableName, attributes) {\n      var _this3 = this;\n\n      var query = function query(subQuery) {\n        return \"ALTER TABLE \".concat(_this3.quoteTable(tableName), \" ALTER COLUMN \").concat(subQuery, \";\");\n      };\n\n      var sql = [];\n\n      for (var attributeName in attributes) {\n        var definition = this.dataTypeMapping(tableName, attributeName, attributes[attributeName]);\n        var attrSql = '';\n\n        if (definition.includes('NOT NULL')) {\n          attrSql += query(\"\".concat(this.quoteIdentifier(attributeName), \" SET NOT NULL\"));\n          definition = definition.replace('NOT NULL', '').trim();\n        } else if (!definition.includes('REFERENCES')) {\n          attrSql += query(\"\".concat(this.quoteIdentifier(attributeName), \" DROP NOT NULL\"));\n        }\n\n        if (definition.includes('DEFAULT')) {\n          attrSql += query(\"\".concat(this.quoteIdentifier(attributeName), \" SET DEFAULT \").concat(definition.match(/DEFAULT ([^;]+)/)[1]));\n          definition = definition.replace(/(DEFAULT[^;]+)/, '').trim();\n        } else if (!definition.includes('REFERENCES')) {\n          attrSql += query(\"\".concat(this.quoteIdentifier(attributeName), \" DROP DEFAULT\"));\n        }\n\n        if (attributes[attributeName].startsWith('ENUM(')) {\n          attrSql += this.pgEnum(tableName, attributeName, attributes[attributeName]);\n          definition = definition.replace(/^ENUM\\(.+\\)/, this.pgEnumName(tableName, attributeName, {\n            schema: false\n          }));\n          definition += \" USING (\".concat(this.quoteIdentifier(attributeName), \"::\").concat(this.pgEnumName(tableName, attributeName), \")\");\n        }\n\n        if (definition.match(/UNIQUE;*$/)) {\n          definition = definition.replace(/UNIQUE;*$/, '');\n          attrSql += query(\"ADD UNIQUE (\".concat(this.quoteIdentifier(attributeName), \")\")).replace('ALTER COLUMN', '');\n        }\n\n        if (definition.includes('REFERENCES')) {\n          definition = definition.replace(/.+?(?=REFERENCES)/, '');\n          attrSql += query(\"ADD FOREIGN KEY (\".concat(this.quoteIdentifier(attributeName), \") \").concat(definition)).replace('ALTER COLUMN', '');\n        } else {\n          attrSql += query(\"\".concat(this.quoteIdentifier(attributeName), \" TYPE \").concat(definition));\n        }\n\n        sql.push(attrSql);\n      }\n\n      return sql.join('');\n    }\n  }, {\n    key: \"renameColumnQuery\",\n    value: function renameColumnQuery(tableName, attrBefore, attributes) {\n      var attrString = [];\n\n      for (var attributeName in attributes) {\n        attrString.push(\"\".concat(this.quoteIdentifier(attrBefore), \" TO \").concat(this.quoteIdentifier(attributeName)));\n      }\n\n      return \"ALTER TABLE \".concat(this.quoteTable(tableName), \" RENAME COLUMN \").concat(attrString.join(', '), \";\");\n    }\n  }, {\n    key: \"fn\",\n    value: function fn(fnName, tableName, parameters, body, returns, language) {\n      fnName = fnName || 'testfunc';\n      language = language || 'plpgsql';\n      returns = returns ? \"RETURNS \".concat(returns) : '';\n      parameters = parameters || '';\n      return \"CREATE OR REPLACE FUNCTION pg_temp.\".concat(fnName, \"(\").concat(parameters, \") \").concat(returns, \" AS $func$ BEGIN \").concat(body, \" END; $func$ LANGUAGE \").concat(language, \"; SELECT * FROM pg_temp.\").concat(fnName, \"();\");\n    }\n  }, {\n    key: \"truncateTableQuery\",\n    value: function truncateTableQuery(tableName) {\n      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      return [\"TRUNCATE \".concat(this.quoteTable(tableName)), options.restartIdentity ? ' RESTART IDENTITY' : '', options.cascade ? ' CASCADE' : ''].join('');\n    }\n  }, {\n    key: \"deleteQuery\",\n    value: function deleteQuery(tableName, where) {\n      var _this4 = this;\n\n      var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n      var model = arguments.length > 3 ? arguments[3] : undefined;\n      var table = this.quoteTable(tableName);\n      var whereClause = this.getWhereConditions(where, null, model, options);\n      var limit = options.limit ? \" LIMIT \".concat(this.escape(options.limit)) : '';\n      var primaryKeys = '';\n      var primaryKeysSelection = '';\n\n      if (whereClause) {\n        whereClause = \" WHERE \".concat(whereClause);\n      }\n\n      if (options.limit) {\n        if (!model) {\n          throw new Error('Cannot LIMIT delete without a model.');\n        }\n\n        var pks = Object.values(model.primaryKeys).map(function (pk) {\n          return _this4.quoteIdentifier(pk.field);\n        }).join(',');\n        primaryKeys = model.primaryKeyAttributes.length > 1 ? \"(\".concat(pks, \")\") : pks;\n        primaryKeysSelection = pks;\n        return \"DELETE FROM \".concat(table, \" WHERE \").concat(primaryKeys, \" IN (SELECT \").concat(primaryKeysSelection, \" FROM \").concat(table).concat(whereClause).concat(limit, \")\");\n      }\n\n      return \"DELETE FROM \".concat(table).concat(whereClause);\n    }\n  }, {\n    key: \"showIndexesQuery\",\n    value: function showIndexesQuery(tableName) {\n      var schemaJoin = '';\n      var schemaWhere = '';\n\n      if (typeof tableName !== 'string') {\n        schemaJoin = ', pg_namespace s';\n        schemaWhere = \" AND s.oid = t.relnamespace AND s.nspname = '\".concat(tableName.schema, \"'\");\n        tableName = tableName.tableName;\n      } // This is ARCANE!\n\n\n      return 'SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, ' + 'array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) ' + \"AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a\".concat(schemaJoin, \" \") + 'WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND ' + \"t.relkind = 'r' and t.relname = '\".concat(tableName, \"'\").concat(schemaWhere, \" \") + 'GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;';\n    }\n  }, {\n    key: \"showConstraintsQuery\",\n    value: function showConstraintsQuery(tableName) {\n      //Postgres converts camelCased alias to lowercase unless quoted\n      return ['SELECT constraint_catalog AS \"constraintCatalog\",', 'constraint_schema AS \"constraintSchema\",', 'constraint_name AS \"constraintName\",', 'table_catalog AS \"tableCatalog\",', 'table_schema AS \"tableSchema\",', 'table_name AS \"tableName\",', 'constraint_type AS \"constraintType\",', 'is_deferrable AS \"isDeferrable\",', 'initially_deferred AS \"initiallyDeferred\"', 'from INFORMATION_SCHEMA.table_constraints', \"WHERE table_name='\".concat(tableName, \"';\")].join(' ');\n    }\n  }, {\n    key: \"removeIndexQuery\",\n    value: function removeIndexQuery(tableName, indexNameOrAttributes) {\n      var indexName = indexNameOrAttributes;\n\n      if (typeof indexName !== 'string') {\n        indexName = Utils.underscore(\"\".concat(tableName, \"_\").concat(indexNameOrAttributes.join('_')));\n      }\n\n      return \"DROP INDEX IF EXISTS \".concat(this.quoteIdentifiers(indexName));\n    }\n  }, {\n    key: \"addLimitAndOffset\",\n    value: function addLimitAndOffset(options) {\n      var fragment = '';\n      /* eslint-disable */\n\n      if (options.limit != null) {\n        fragment += ' LIMIT ' + this.escape(options.limit);\n      }\n\n      if (options.offset != null) {\n        fragment += ' OFFSET ' + this.escape(options.offset);\n      }\n      /* eslint-enable */\n\n\n      return fragment;\n    }\n  }, {\n    key: \"attributeToSQL\",\n    value: function attributeToSQL(attribute, options) {\n      var _this5 = this;\n\n      if (!_.isPlainObject(attribute)) {\n        attribute = {\n          type: attribute\n        };\n      }\n\n      var type;\n\n      if (attribute.type instanceof DataTypes.ENUM || attribute.type instanceof DataTypes.ARRAY && attribute.type.type instanceof DataTypes.ENUM) {\n        var enumType = attribute.type.type || attribute.type;\n        var values = attribute.values;\n\n        if (enumType.values && !attribute.values) {\n          values = enumType.values;\n        }\n\n        if (Array.isArray(values) && values.length > 0) {\n          type = \"ENUM(\".concat(values.map(function (value) {\n            return _this5.escape(value);\n          }).join(', '), \")\");\n\n          if (attribute.type instanceof DataTypes.ARRAY) {\n            type += '[]';\n          }\n        } else {\n          throw new Error(\"Values for ENUM haven't been defined.\");\n        }\n      }\n\n      if (!type) {\n        type = attribute.type;\n      }\n\n      var sql = type.toString();\n\n      if (Object.prototype.hasOwnProperty.call(attribute, 'allowNull') && !attribute.allowNull) {\n        sql += ' NOT NULL';\n      }\n\n      if (attribute.autoIncrement) {\n        if (attribute.autoIncrementIdentity) {\n          sql += ' GENERATED BY DEFAULT AS IDENTITY';\n        } else {\n          sql += ' SERIAL';\n        }\n      }\n\n      if (Utils.defaultValueSchemable(attribute.defaultValue)) {\n        sql += \" DEFAULT \".concat(this.escape(attribute.defaultValue, attribute));\n      }\n\n      if (attribute.unique === true) {\n        sql += ' UNIQUE';\n      }\n\n      if (attribute.primaryKey) {\n        sql += ' PRIMARY KEY';\n      }\n\n      if (attribute.references) {\n        var referencesTable = this.quoteTable(attribute.references.model);\n        var schema;\n\n        if (options.schema) {\n          schema = options.schema;\n        } else if ((!attribute.references.model || typeof attribute.references.model == 'string') && options.table && options.table.schema) {\n          schema = options.table.schema;\n        }\n\n        if (schema) {\n          referencesTable = this.quoteTable(this.addSchema({\n            tableName: referencesTable,\n            _schema: schema\n          }));\n        }\n\n        var referencesKey;\n\n        if (attribute.references.key) {\n          referencesKey = this.quoteIdentifiers(attribute.references.key);\n        } else {\n          referencesKey = this.quoteIdentifier('id');\n        }\n\n        sql += \" REFERENCES \".concat(referencesTable, \" (\").concat(referencesKey, \")\");\n\n        if (attribute.onDelete) {\n          sql += \" ON DELETE \".concat(attribute.onDelete.toUpperCase());\n        }\n\n        if (attribute.onUpdate) {\n          sql += \" ON UPDATE \".concat(attribute.onUpdate.toUpperCase());\n        }\n\n        if (attribute.references.deferrable) {\n          sql += \" \".concat(attribute.references.deferrable.toString(this));\n        }\n      }\n\n      if (attribute.comment && typeof attribute.comment === 'string') {\n        if (options && (options.context === 'addColumn' || options.context === 'changeColumn')) {\n          var quotedAttr = this.quoteIdentifier(options.key);\n          var escapedCommentText = this.escape(attribute.comment);\n          sql += \"; COMMENT ON COLUMN \".concat(this.quoteTable(options.table), \".\").concat(quotedAttr, \" IS \").concat(escapedCommentText);\n        } else {\n          // for createTable event which does it's own parsing\n          // TODO: centralize creation of comment statements here\n          sql += \" COMMENT \".concat(attribute.comment);\n        }\n      }\n\n      return sql;\n    }\n  }, {\n    key: \"deferConstraintsQuery\",\n    value: function deferConstraintsQuery(options) {\n      return options.deferrable.toString(this);\n    }\n  }, {\n    key: \"setConstraintQuery\",\n    value: function setConstraintQuery(columns, type) {\n      var _this6 = this;\n\n      var columnFragment = 'ALL';\n\n      if (columns) {\n        columnFragment = columns.map(function (column) {\n          return _this6.quoteIdentifier(column);\n        }).join(', ');\n      }\n\n      return \"SET CONSTRAINTS \".concat(columnFragment, \" \").concat(type);\n    }\n  }, {\n    key: \"setDeferredQuery\",\n    value: function setDeferredQuery(columns) {\n      return this.setConstraintQuery(columns, 'DEFERRED');\n    }\n  }, {\n    key: \"setImmediateQuery\",\n    value: function setImmediateQuery(columns) {\n      return this.setConstraintQuery(columns, 'IMMEDIATE');\n    }\n  }, {\n    key: \"attributesToSQL\",\n    value: function attributesToSQL(attributes, options) {\n      var result = {};\n\n      for (var key in attributes) {\n        var attribute = attributes[key];\n        result[attribute.field || key] = this.attributeToSQL(attribute, _objectSpread({\n          key: key\n        }, options));\n      }\n\n      return result;\n    }\n  }, {\n    key: \"createTrigger\",\n    value: function createTrigger(tableName, triggerName, eventType, fireOnSpec, functionName, functionParams, optionsArray) {\n      var decodedEventType = this.decodeTriggerEventType(eventType);\n      var eventSpec = this.expandTriggerEventSpec(fireOnSpec);\n      var expandedOptions = this.expandOptions(optionsArray);\n\n      var paramList = this._expandFunctionParamList(functionParams);\n\n      return \"CREATE \".concat(this.triggerEventTypeIsConstraint(eventType), \"TRIGGER \").concat(this.quoteIdentifier(triggerName), \" \").concat(decodedEventType, \" \").concat(eventSpec, \" ON \").concat(this.quoteTable(tableName)).concat(expandedOptions ? \" \".concat(expandedOptions) : '', \" EXECUTE PROCEDURE \").concat(functionName, \"(\").concat(paramList, \");\");\n    }\n  }, {\n    key: \"dropTrigger\",\n    value: function dropTrigger(tableName, triggerName) {\n      return \"DROP TRIGGER \".concat(this.quoteIdentifier(triggerName), \" ON \").concat(this.quoteTable(tableName), \" RESTRICT;\");\n    }\n  }, {\n    key: \"renameTrigger\",\n    value: function renameTrigger(tableName, oldTriggerName, newTriggerName) {\n      return \"ALTER TRIGGER \".concat(this.quoteIdentifier(oldTriggerName), \" ON \").concat(this.quoteTable(tableName), \" RENAME TO \").concat(this.quoteIdentifier(newTriggerName), \";\");\n    }\n  }, {\n    key: \"createFunction\",\n    value: function createFunction(functionName, params, returnType, language, body, optionsArray, options) {\n      if (!functionName || !returnType || !language || !body) throw new Error('createFunction missing some parameters. Did you pass functionName, returnType, language and body?');\n\n      var paramList = this._expandFunctionParamList(params);\n\n      var variableList = options && options.variables ? this._expandFunctionVariableList(options.variables) : '';\n      var expandedOptionsArray = this.expandOptions(optionsArray);\n      var statement = options && options.force ? 'CREATE OR REPLACE FUNCTION' : 'CREATE FUNCTION';\n      return \"\".concat(statement, \" \").concat(functionName, \"(\").concat(paramList, \") RETURNS \").concat(returnType, \" AS $func$ \").concat(variableList, \" BEGIN \").concat(body, \" END; $func$ language '\").concat(language, \"'\").concat(expandedOptionsArray, \";\");\n    }\n  }, {\n    key: \"dropFunction\",\n    value: function dropFunction(functionName, params) {\n      if (!functionName) throw new Error('requires functionName'); // RESTRICT is (currently, as of 9.2) default but we'll be explicit\n\n      var paramList = this._expandFunctionParamList(params);\n\n      return \"DROP FUNCTION \".concat(functionName, \"(\").concat(paramList, \") RESTRICT;\");\n    }\n  }, {\n    key: \"renameFunction\",\n    value: function renameFunction(oldFunctionName, params, newFunctionName) {\n      var paramList = this._expandFunctionParamList(params);\n\n      return \"ALTER FUNCTION \".concat(oldFunctionName, \"(\").concat(paramList, \") RENAME TO \").concat(newFunctionName, \";\");\n    }\n  }, {\n    key: \"pgEscapeAndQuote\",\n    value: function pgEscapeAndQuote(val) {\n      return this.quoteIdentifier(Utils.removeTicks(this.escape(val), \"'\"));\n    }\n  }, {\n    key: \"_expandFunctionParamList\",\n    value: function _expandFunctionParamList(params) {\n      if (params === undefined || !Array.isArray(params)) {\n        throw new Error('_expandFunctionParamList: function parameters array required, including an empty one for no arguments');\n      }\n\n      var paramList = [];\n      params.forEach(function (curParam) {\n        var paramDef = [];\n\n        if (curParam.type) {\n          if (curParam.direction) {\n            paramDef.push(curParam.direction);\n          }\n\n          if (curParam.name) {\n            paramDef.push(curParam.name);\n          }\n\n          paramDef.push(curParam.type);\n        } else {\n          throw new Error('function or trigger used with a parameter without any type');\n        }\n\n        var joined = paramDef.join(' ');\n        if (joined) paramList.push(joined);\n      });\n      return paramList.join(', ');\n    }\n  }, {\n    key: \"_expandFunctionVariableList\",\n    value: function _expandFunctionVariableList(variables) {\n      if (!Array.isArray(variables)) {\n        throw new Error('_expandFunctionVariableList: function variables must be an array');\n      }\n\n      var variableDefinitions = [];\n      variables.forEach(function (variable) {\n        if (!variable.name || !variable.type) {\n          throw new Error('function variable must have a name and type');\n        }\n\n        var variableDefinition = \"DECLARE \".concat(variable.name, \" \").concat(variable.type);\n\n        if (variable.default) {\n          variableDefinition += \" := \".concat(variable.default);\n        }\n\n        variableDefinition += ';';\n        variableDefinitions.push(variableDefinition);\n      });\n      return variableDefinitions.join(' ');\n    }\n  }, {\n    key: \"expandOptions\",\n    value: function expandOptions(options) {\n      return options === undefined || _.isEmpty(options) ? '' : options.join(' ');\n    }\n  }, {\n    key: \"decodeTriggerEventType\",\n    value: function decodeTriggerEventType(eventSpecifier) {\n      var EVENT_DECODER = {\n        'after': 'AFTER',\n        'before': 'BEFORE',\n        'instead_of': 'INSTEAD OF',\n        'after_constraint': 'AFTER'\n      };\n\n      if (!EVENT_DECODER[eventSpecifier]) {\n        throw new Error(\"Invalid trigger event specified: \".concat(eventSpecifier));\n      }\n\n      return EVENT_DECODER[eventSpecifier];\n    }\n  }, {\n    key: \"triggerEventTypeIsConstraint\",\n    value: function triggerEventTypeIsConstraint(eventSpecifier) {\n      return eventSpecifier === 'after_constraint' ? 'CONSTRAINT ' : '';\n    }\n  }, {\n    key: \"expandTriggerEventSpec\",\n    value: function expandTriggerEventSpec(fireOnSpec) {\n      if (_.isEmpty(fireOnSpec)) {\n        throw new Error('no table change events specified to trigger on');\n      }\n\n      return _.map(fireOnSpec, function (fireValue, fireKey) {\n        var EVENT_MAP = {\n          'insert': 'INSERT',\n          'update': 'UPDATE',\n          'delete': 'DELETE',\n          'truncate': 'TRUNCATE'\n        };\n\n        if (!EVENT_MAP[fireValue]) {\n          throw new Error(\"parseTriggerEventSpec: undefined trigger event \".concat(fireKey));\n        }\n\n        var eventSpec = EVENT_MAP[fireValue];\n\n        if (eventSpec === 'UPDATE') {\n          if (Array.isArray(fireValue) && fireValue.length > 0) {\n            eventSpec += \" OF \".concat(fireValue.join(', '));\n          }\n        }\n\n        return eventSpec;\n      }).join(' OR ');\n    }\n  }, {\n    key: \"pgEnumName\",\n    value: function pgEnumName(tableName, attr, options) {\n      options = options || {};\n      var tableDetails = this.extractTableDetails(tableName, options);\n      var enumName = Utils.addTicks(Utils.generateEnumName(tableDetails.tableName, attr), '\"'); // pgListEnums requires the enum name only, without the schema\n\n      if (options.schema !== false && tableDetails.schema) {\n        enumName = this.quoteIdentifier(tableDetails.schema) + tableDetails.delimiter + enumName;\n      }\n\n      return enumName;\n    }\n  }, {\n    key: \"pgListEnums\",\n    value: function pgListEnums(tableName, attrName, options) {\n      var enumName = '';\n      var tableDetails = this.extractTableDetails(tableName, options);\n\n      if (tableDetails.tableName && attrName) {\n        enumName = \" AND t.typname=\".concat(this.pgEnumName(tableDetails.tableName, attrName, {\n          schema: false\n        }).replace(/\"/g, \"'\"));\n      }\n\n      return 'SELECT t.typname enum_name, array_agg(e.enumlabel ORDER BY enumsortorder) enum_value FROM pg_type t ' + 'JOIN pg_enum e ON t.oid = e.enumtypid ' + 'JOIN pg_catalog.pg_namespace n ON n.oid = t.typnamespace ' + \"WHERE n.nspname = '\".concat(tableDetails.schema, \"'\").concat(enumName, \" GROUP BY 1\");\n    }\n  }, {\n    key: \"pgEnum\",\n    value: function pgEnum(tableName, attr, dataType, options) {\n      var _this7 = this;\n\n      var enumName = this.pgEnumName(tableName, attr, options);\n      var values;\n\n      if (dataType.values) {\n        values = \"ENUM(\".concat(dataType.values.map(function (value) {\n          return _this7.escape(value);\n        }).join(', '), \")\");\n      } else {\n        values = dataType.toString().match(/^ENUM\\(.+\\)/)[0];\n      }\n\n      var sql = \"CREATE TYPE \".concat(enumName, \" AS \").concat(values, \";\");\n\n      if (!!options && options.force === true) {\n        sql = this.pgEnumDrop(tableName, attr) + sql;\n      }\n\n      return sql;\n    }\n  }, {\n    key: \"pgEnumAdd\",\n    value: function pgEnumAdd(tableName, attr, value, options) {\n      var enumName = this.pgEnumName(tableName, attr);\n      var sql = \"ALTER TYPE \".concat(enumName, \" ADD VALUE \");\n\n      if (semver.gte(this.sequelize.options.databaseVersion, '9.3.0')) {\n        sql += 'IF NOT EXISTS ';\n      }\n\n      sql += this.escape(value);\n\n      if (options.before) {\n        sql += \" BEFORE \".concat(this.escape(options.before));\n      } else if (options.after) {\n        sql += \" AFTER \".concat(this.escape(options.after));\n      }\n\n      return sql;\n    }\n  }, {\n    key: \"pgEnumDrop\",\n    value: function pgEnumDrop(tableName, attr, enumName) {\n      enumName = enumName || this.pgEnumName(tableName, attr);\n      return \"DROP TYPE IF EXISTS \".concat(enumName, \"; \");\n    }\n  }, {\n    key: \"fromArray\",\n    value: function fromArray(text) {\n      text = text.replace(/^{/, '').replace(/}$/, '');\n      var matches = text.match(/(\"(?:\\\\.|[^\"\\\\\\\\])*\"|[^,]*)(?:\\s*,\\s*|\\s*$)/ig);\n\n      if (matches.length < 1) {\n        return [];\n      }\n\n      matches = matches.map(function (m) {\n        return m.replace(/\",$/, '').replace(/,$/, '').replace(/(^\"|\"$)/g, '');\n      });\n      return matches.slice(0, -1);\n    }\n  }, {\n    key: \"dataTypeMapping\",\n    value: function dataTypeMapping(tableName, attr, dataType) {\n      if (dataType.includes('PRIMARY KEY')) {\n        dataType = dataType.replace('PRIMARY KEY', '');\n      }\n\n      if (dataType.includes('SERIAL')) {\n        if (dataType.includes('BIGINT')) {\n          dataType = dataType.replace('SERIAL', 'BIGSERIAL');\n          dataType = dataType.replace('BIGINT', '');\n        } else if (dataType.includes('SMALLINT')) {\n          dataType = dataType.replace('SERIAL', 'SMALLSERIAL');\n          dataType = dataType.replace('SMALLINT', '');\n        } else {\n          dataType = dataType.replace('INTEGER', '');\n        }\n\n        dataType = dataType.replace('NOT NULL', '');\n      }\n\n      if (dataType.startsWith('ENUM(')) {\n        dataType = dataType.replace(/^ENUM\\(.+\\)/, this.pgEnumName(tableName, attr));\n      }\n\n      return dataType;\n    }\n    /**\n     * Generates an SQL query that returns all foreign keys of a table.\n     *\n     * @param  {string} tableName  The name of the table.\n     * @returns {string}            The generated sql query.\n     * @private\n     */\n\n  }, {\n    key: \"getForeignKeysQuery\",\n    value: function getForeignKeysQuery(tableName) {\n      return 'SELECT conname as constraint_name, pg_catalog.pg_get_constraintdef(r.oid, true) as condef FROM pg_catalog.pg_constraint r ' + \"WHERE r.conrelid = (SELECT oid FROM pg_class WHERE relname = '\".concat(tableName, \"' LIMIT 1) AND r.contype = 'f' ORDER BY 1;\");\n    }\n    /**\n     * Generate common SQL prefix for getForeignKeyReferencesQuery.\n     *\n     * @returns {string}\n     */\n\n  }, {\n    key: \"_getForeignKeyReferencesQueryPrefix\",\n    value: function _getForeignKeyReferencesQueryPrefix() {\n      return 'SELECT ' + 'DISTINCT tc.constraint_name as constraint_name, ' + 'tc.constraint_schema as constraint_schema, ' + 'tc.constraint_catalog as constraint_catalog, ' + 'tc.table_name as table_name,' + 'tc.table_schema as table_schema,' + 'tc.table_catalog as table_catalog,' + 'kcu.column_name as column_name,' + 'ccu.table_schema  AS referenced_table_schema,' + 'ccu.table_catalog  AS referenced_table_catalog,' + 'ccu.table_name  AS referenced_table_name,' + 'ccu.column_name AS referenced_column_name ' + 'FROM information_schema.table_constraints AS tc ' + 'JOIN information_schema.key_column_usage AS kcu ' + 'ON tc.constraint_name = kcu.constraint_name ' + 'JOIN information_schema.constraint_column_usage AS ccu ' + 'ON ccu.constraint_name = tc.constraint_name ';\n    }\n    /**\n     * Generates an SQL query that returns all foreign keys details of a table.\n     *\n     * As for getForeignKeysQuery is not compatible with getForeignKeyReferencesQuery, so add a new function.\n     *\n     * @param {string} tableName\n     * @param {string} catalogName\n     * @param {string} schemaName\n     */\n\n  }, {\n    key: \"getForeignKeyReferencesQuery\",\n    value: function getForeignKeyReferencesQuery(tableName, catalogName, schemaName) {\n      return \"\".concat(this._getForeignKeyReferencesQueryPrefix(), \"WHERE constraint_type = 'FOREIGN KEY' AND tc.table_name = '\").concat(tableName, \"'\").concat(catalogName ? \" AND tc.table_catalog = '\".concat(catalogName, \"'\") : '').concat(schemaName ? \" AND tc.table_schema = '\".concat(schemaName, \"'\") : '');\n    }\n  }, {\n    key: \"getForeignKeyReferenceQuery\",\n    value: function getForeignKeyReferenceQuery(table, columnName) {\n      var tableName = table.tableName || table;\n      var schema = table.schema;\n      return \"\".concat(this._getForeignKeyReferencesQueryPrefix(), \"WHERE constraint_type = 'FOREIGN KEY' AND tc.table_name='\").concat(tableName, \"' AND  kcu.column_name = '\").concat(columnName, \"'\").concat(schema ? \" AND tc.table_schema = '\".concat(schema, \"'\") : '');\n    }\n    /**\n     * Generates an SQL query that removes a foreign key from a table.\n     *\n     * @param  {string} tableName  The name of the table.\n     * @param  {string} foreignKey The name of the foreign key constraint.\n     * @returns {string}            The generated sql query.\n     * @private\n     */\n\n  }, {\n    key: \"dropForeignKeyQuery\",\n    value: function dropForeignKeyQuery(tableName, foreignKey) {\n      return \"ALTER TABLE \".concat(this.quoteTable(tableName), \" DROP CONSTRAINT \").concat(this.quoteIdentifier(foreignKey), \";\");\n    }\n  }]);\n\n  return PostgresQueryGenerator;\n}(AbstractQueryGenerator);\n\nmodule.exports = PostgresQueryGenerator;","map":null,"metadata":{},"sourceType":"script"}