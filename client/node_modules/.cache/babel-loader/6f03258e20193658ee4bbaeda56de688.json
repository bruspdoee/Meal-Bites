{"ast":null,"code":"'use strict';\n\nvar redeyed = require('redeyed');\n\nvar theme = require('../themes/default');\n\nvar colors = require('ansicolors');\n\nvar colorSurround = colors.brightBlack;\nvar surroundClose = \"\\x1B[39m\";\n\nfunction trimEmptyLines(lines) {\n  // remove lines from the end until we find a non-empy one\n  var line = lines.pop();\n\n  while (!line || !line.length) {\n    line = lines.pop();\n  } // put the non-empty line back\n\n\n  if (line) lines.push(line);\n}\n\nfunction addLinenos(highlightedCode, firstline) {\n  var highlightedLines = highlightedCode.split('\\n');\n  trimEmptyLines(highlightedLines);\n  var linesLen = highlightedLines.length;\n  var lines = [];\n  var totalDigits;\n  var lineno;\n\n  function getDigits(n) {\n    if (n < 10) return 1;\n    if (n < 100) return 2;\n    if (n < 1000) return 3;\n    if (n < 10000) return 4; // this works for up to 99,999 lines - any questions?\n\n    return 5;\n  }\n\n  function pad(n, totalDigits) {\n    // not pretty, but simple and should perform quite well\n    var padDigits = totalDigits - getDigits(n);\n\n    switch (padDigits) {\n      case 0:\n        return '' + n;\n\n      case 1:\n        return ' ' + n;\n\n      case 2:\n        return '  ' + n;\n\n      case 3:\n        return '   ' + n;\n\n      case 4:\n        return '    ' + n;\n\n      case 5:\n        return '     ' + n;\n    }\n  }\n\n  totalDigits = getDigits(linesLen + firstline - 1);\n\n  for (var i = 0; i < linesLen; i++) {\n    // Don't close the escape sequence here in order to not break multi line code highlights like block comments\n    lineno = colorSurround(pad(i + firstline, totalDigits) + ': ').replace(surroundClose, '');\n    lines.push(lineno + highlightedLines[i]);\n  }\n\n  return lines.join('\\n');\n}\n\nmodule.exports = function highlight(code, opts) {\n  opts = opts || {};\n\n  try {\n    var result = redeyed(code, opts.theme || theme, {\n      jsx: !!opts.jsx\n    });\n    var firstline = opts.firstline && !isNaN(opts.firstline) ? opts.firstline : 1;\n    return opts.linenos ? addLinenos(result.code, firstline) : result.code;\n  } catch (e) {\n    e.message = 'Unable to perform highlight. The code contained syntax errors: ' + e.message;\n    throw e;\n  }\n};","map":null,"metadata":{},"sourceType":"script"}