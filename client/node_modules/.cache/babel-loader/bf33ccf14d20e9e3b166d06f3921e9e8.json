{"ast":null,"code":"'use strict';\n\nvar _defineProperty = require(\"/Users/jervisbay/project-tres/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/defineProperty\");\n\nvar _regeneratorRuntime = require(\"/Users/jervisbay/project-tres/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\");\n\nvar _slicedToArray = require(\"/Users/jervisbay/project-tres/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/slicedToArray\");\n\nvar _objectSpread = require(\"/Users/jervisbay/project-tres/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/objectSpread\");\n\nvar _asyncToGenerator = require(\"/Users/jervisbay/project-tres/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/asyncToGenerator\");\n\nvar _classCallCheck = require(\"/Users/jervisbay/project-tres/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/Users/jervisbay/project-tres/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\n\nvar _possibleConstructorReturn = require(\"/Users/jervisbay/project-tres/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/possibleConstructorReturn\");\n\nvar _getPrototypeOf = require(\"/Users/jervisbay/project-tres/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/getPrototypeOf\");\n\nvar _inherits = require(\"/Users/jervisbay/project-tres/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/inherits\");\n\nfunction _createForOfIteratorHelper(o, allowArrayLike) { var it; if (typeof Symbol === \"undefined\" || o[Symbol.iterator] == null) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = o[Symbol.iterator](); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nvar _ = require('lodash');\n\nvar Utils = require('../../utils');\n\nvar QueryTypes = require('../../query-types');\n\nvar Op = require('../../operators');\n\nvar _require = require('../abstract/query-interface'),\n    QueryInterface = _require.QueryInterface;\n/**\n * The interface that Sequelize uses to talk with MSSQL database\n */\n\n\nvar MSSqlQueryInterface = /*#__PURE__*/function (_QueryInterface) {\n  _inherits(MSSqlQueryInterface, _QueryInterface);\n\n  function MSSqlQueryInterface() {\n    _classCallCheck(this, MSSqlQueryInterface);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(MSSqlQueryInterface).apply(this, arguments));\n  }\n\n  _createClass(MSSqlQueryInterface, [{\n    key: \"removeColumn\",\n\n    /**\n    * A wrapper that fixes MSSQL's inability to cleanly remove columns from existing tables if they have a default constraint.\n    *\n    * @override\n    */\n    value: function () {\n      var _removeColumn = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(tableName, attributeName, options) {\n        var findConstraintSql, _yield$this$sequelize, _yield$this$sequelize2, results0, dropConstraintSql, findForeignKeySql, _yield$this$sequelize3, _yield$this$sequelize4, results, dropForeignKeySql, primaryKeyConstraintSql, _yield$this$sequelize5, _yield$this$sequelize6, result, _dropConstraintSql, removeSql;\n\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                options = _objectSpread({\n                  raw: true\n                }, options || {});\n                findConstraintSql = this.queryGenerator.getDefaultConstraintQuery(tableName, attributeName);\n                _context.next = 4;\n                return this.sequelize.query(findConstraintSql, options);\n\n              case 4:\n                _yield$this$sequelize = _context.sent;\n                _yield$this$sequelize2 = _slicedToArray(_yield$this$sequelize, 1);\n                results0 = _yield$this$sequelize2[0];\n\n                if (!results0.length) {\n                  _context.next = 11;\n                  break;\n                }\n\n                // No default constraint found -- we can cleanly remove the column\n                dropConstraintSql = this.queryGenerator.dropConstraintQuery(tableName, results0[0].name);\n                _context.next = 11;\n                return this.sequelize.query(dropConstraintSql, options);\n\n              case 11:\n                findForeignKeySql = this.queryGenerator.getForeignKeyQuery(tableName, attributeName);\n                _context.next = 14;\n                return this.sequelize.query(findForeignKeySql, options);\n\n              case 14:\n                _yield$this$sequelize3 = _context.sent;\n                _yield$this$sequelize4 = _slicedToArray(_yield$this$sequelize3, 1);\n                results = _yield$this$sequelize4[0];\n\n                if (!results.length) {\n                  _context.next = 21;\n                  break;\n                }\n\n                // No foreign key constraints found, so we can remove the column\n                dropForeignKeySql = this.queryGenerator.dropForeignKeyQuery(tableName, results[0].constraint_name);\n                _context.next = 21;\n                return this.sequelize.query(dropForeignKeySql, options);\n\n              case 21:\n                //Check if the current column is a primaryKey\n                primaryKeyConstraintSql = this.queryGenerator.getPrimaryKeyConstraintQuery(tableName, attributeName);\n                _context.next = 24;\n                return this.sequelize.query(primaryKeyConstraintSql, options);\n\n              case 24:\n                _yield$this$sequelize5 = _context.sent;\n                _yield$this$sequelize6 = _slicedToArray(_yield$this$sequelize5, 1);\n                result = _yield$this$sequelize6[0];\n\n                if (!result.length) {\n                  _context.next = 31;\n                  break;\n                }\n\n                _dropConstraintSql = this.queryGenerator.dropConstraintQuery(tableName, result[0].constraintName);\n                _context.next = 31;\n                return this.sequelize.query(_dropConstraintSql, options);\n\n              case 31:\n                removeSql = this.queryGenerator.removeColumnQuery(tableName, attributeName);\n                return _context.abrupt(\"return\", this.sequelize.query(removeSql, options));\n\n              case 33:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function removeColumn(_x, _x2, _x3) {\n        return _removeColumn.apply(this, arguments);\n      }\n\n      return removeColumn;\n    }()\n    /**\n     * @override\n     */\n\n  }, {\n    key: \"upsert\",\n    value: function () {\n      var _upsert = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(tableName, insertValues, updateValues, where, options) {\n        var model, wheres, indexes, attributes, _iterator, _step, index, _iterator2, _step2, field, sql;\n\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                model = options.model;\n                wheres = [];\n                options = _objectSpread({}, options);\n\n                if (!Utils.isWhereEmpty(where)) {\n                  wheres.push(where);\n                } // Lets combine unique keys and indexes into one\n\n\n                indexes = Object.values(model.uniqueKeys).map(function (item) {\n                  return item.fields;\n                });\n                indexes = indexes.concat(Object.values(model._indexes).filter(function (item) {\n                  return item.unique;\n                }).map(function (item) {\n                  return item.fields;\n                }));\n                attributes = Object.keys(insertValues);\n                _iterator = _createForOfIteratorHelper(indexes);\n\n                try {\n                  for (_iterator.s(); !(_step = _iterator.n()).done;) {\n                    index = _step.value;\n\n                    if (_.intersection(attributes, index).length === index.length) {\n                      where = {};\n                      _iterator2 = _createForOfIteratorHelper(index);\n\n                      try {\n                        for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n                          field = _step2.value;\n                          where[field] = insertValues[field];\n                        }\n                      } catch (err) {\n                        _iterator2.e(err);\n                      } finally {\n                        _iterator2.f();\n                      }\n\n                      wheres.push(where);\n                    }\n                  }\n                } catch (err) {\n                  _iterator.e(err);\n                } finally {\n                  _iterator.f();\n                }\n\n                where = _defineProperty({}, Op.or, wheres);\n                options.type = QueryTypes.UPSERT;\n                options.raw = true;\n                sql = this.queryGenerator.upsertQuery(tableName, insertValues, updateValues, where, model, options);\n                _context2.next = 15;\n                return this.sequelize.query(sql, options);\n\n              case 15:\n                return _context2.abrupt(\"return\", _context2.sent);\n\n              case 16:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n\n      function upsert(_x4, _x5, _x6, _x7, _x8) {\n        return _upsert.apply(this, arguments);\n      }\n\n      return upsert;\n    }()\n  }]);\n\n  return MSSqlQueryInterface;\n}(QueryInterface);\n\nexports.MSSqlQueryInterface = MSSqlQueryInterface;","map":null,"metadata":{},"sourceType":"script"}