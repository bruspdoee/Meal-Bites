{"ast":null,"code":"'use strict';\n\nvar _defineProperty = require(\"/Users/jervisbay/project-tres/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/defineProperty\");\n\nvar _regeneratorRuntime = require(\"/Users/jervisbay/project-tres/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\");\n\nvar _asyncToGenerator = require(\"/Users/jervisbay/project-tres/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/asyncToGenerator\");\n\nvar _objectSpread = require(\"/Users/jervisbay/project-tres/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/objectSpread\");\n\nvar _classCallCheck = require(\"/Users/jervisbay/project-tres/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/Users/jervisbay/project-tres/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\n\nvar _possibleConstructorReturn = require(\"/Users/jervisbay/project-tres/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/possibleConstructorReturn\");\n\nvar _getPrototypeOf = require(\"/Users/jervisbay/project-tres/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/getPrototypeOf\");\n\nvar _inherits = require(\"/Users/jervisbay/project-tres/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/inherits\");\n\nfunction _createForOfIteratorHelper(o, allowArrayLike) { var it; if (typeof Symbol === \"undefined\" || o[Symbol.iterator] == null) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = o[Symbol.iterator](); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nvar AbstractQuery = require('../abstract/query');\n\nvar sequelizeErrors = require('../../errors');\n\nvar _ = require('lodash');\n\nvar DataTypes = require('../../data-types');\n\nvar _require = require('../../utils/logger'),\n    logger = _require.logger;\n\nvar ER_DUP_ENTRY = 1062;\nvar ER_ROW_IS_REFERENCED = 1451;\nvar ER_NO_REFERENCED_ROW = 1452;\nvar debug = logger.debugContext('sql:mariadb');\n\nvar Query = /*#__PURE__*/function (_AbstractQuery) {\n  _inherits(Query, _AbstractQuery);\n\n  function Query(connection, sequelize, options) {\n    _classCallCheck(this, Query);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(Query).call(this, connection, sequelize, _objectSpread({\n      showWarnings: false\n    }, options)));\n  }\n\n  _createClass(Query, [{\n    key: \"run\",\n    value: function () {\n      var _run = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(sql, parameters) {\n        var connection, options, showWarnings, complete, results;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                this.sql = sql;\n                connection = this.connection, options = this.options;\n                showWarnings = this.sequelize.options.showWarnings || options.showWarnings;\n                complete = this._logQuery(sql, debug, parameters);\n\n                if (parameters) {\n                  debug('parameters(%j)', parameters);\n                }\n\n                _context.prev = 5;\n                _context.next = 8;\n                return connection.query(this.sql, parameters);\n\n              case 8:\n                results = _context.sent;\n                complete(); // Log warnings if we've got them.\n\n                if (!(showWarnings && results && results.warningStatus > 0)) {\n                  _context.next = 13;\n                  break;\n                }\n\n                _context.next = 13;\n                return this.logWarnings(results);\n\n              case 13:\n                _context.next = 22;\n                break;\n\n              case 15:\n                _context.prev = 15;\n                _context.t0 = _context[\"catch\"](5);\n\n                // MariaDB automatically rolls-back transactions in the event of a deadlock\n                if (options.transaction && _context.t0.errno === 1213) {\n                  options.transaction.finished = 'rollback';\n                }\n\n                complete();\n                _context.t0.sql = sql;\n                _context.t0.parameters = parameters;\n                throw this.formatError(_context.t0);\n\n              case 22:\n                if (!(showWarnings && results && results.warningStatus > 0)) {\n                  _context.next = 25;\n                  break;\n                }\n\n                _context.next = 25;\n                return this.logWarnings(results);\n\n              case 25:\n                return _context.abrupt(\"return\", this.formatResults(results));\n\n              case 26:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this, [[5, 15]]);\n      }));\n\n      function run(_x, _x2) {\n        return _run.apply(this, arguments);\n      }\n\n      return run;\n    }()\n    /**\n     * High level function that handles the results of a query execution.\n     *\n     *\n     * Example:\n     *  query.formatResults([\n     *    {\n     *      id: 1,              // this is from the main table\n     *      attr2: 'snafu',     // this is from the main table\n     *      Tasks.id: 1,        // this is from the associated table\n     *      Tasks.title: 'task' // this is from the associated table\n     *    }\n     *  ])\n     *\n     * @param {Array} data - The result of the query execution.\n     * @private\n     */\n\n  }, {\n    key: \"formatResults\",\n    value: function formatResults(data) {\n      var result = this.instance;\n\n      if (this.isBulkUpdateQuery() || this.isBulkDeleteQuery()) {\n        return data.affectedRows;\n      }\n\n      if (this.isUpsertQuery()) {\n        return [result, data.affectedRows === 1];\n      }\n\n      if (this.isInsertQuery(data)) {\n        this.handleInsertQuery(data);\n\n        if (!this.instance) {\n          // handle bulkCreate AI primary key\n          if (this.model && this.model.autoIncrementAttribute && this.model.autoIncrementAttribute === this.model.primaryKeyAttribute && this.model.rawAttributes[this.model.primaryKeyAttribute]) {\n            //ONLY TRUE IF @auto_increment_increment is set to 1 !!\n            //Doesn't work with GALERA => each node will reserve increment (x for first server, x+1 for next node ...\n            var startId = data[this.getInsertIdField()];\n            result = new Array(data.affectedRows);\n            var pkField = this.model.rawAttributes[this.model.primaryKeyAttribute].field;\n\n            for (var i = 0; i < data.affectedRows; i++) {\n              result[i] = _defineProperty({}, pkField, startId + i);\n            }\n\n            return [result, data.affectedRows];\n          }\n\n          return [data[this.getInsertIdField()], data.affectedRows];\n        }\n      }\n\n      if (this.isSelectQuery()) {\n        this.handleJsonSelectQuery(data);\n        return this.handleSelectQuery(data);\n      }\n\n      if (this.isInsertQuery() || this.isUpdateQuery()) {\n        return [result, data.affectedRows];\n      }\n\n      if (this.isCallQuery()) {\n        return data[0];\n      }\n\n      if (this.isRawQuery()) {\n        var meta = data.meta;\n        delete data.meta;\n        return [data, meta];\n      }\n\n      if (this.isShowIndexesQuery()) {\n        return this.handleShowIndexesQuery(data);\n      }\n\n      if (this.isForeignKeysQuery() || this.isShowConstraintsQuery()) {\n        return data;\n      }\n\n      if (this.isShowTablesQuery()) {\n        return this.handleShowTablesQuery(data);\n      }\n\n      if (this.isDescribeQuery()) {\n        result = {};\n\n        var _iterator = _createForOfIteratorHelper(data),\n            _step;\n\n        try {\n          for (_iterator.s(); !(_step = _iterator.n()).done;) {\n            var _result = _step.value;\n            result[_result.Field] = {\n              type: _result.Type.toLowerCase().startsWith('enum') ? _result.Type.replace(/^enum/i, 'ENUM') : _result.Type.toUpperCase(),\n              allowNull: _result.Null === 'YES',\n              defaultValue: _result.Default,\n              primaryKey: _result.Key === 'PRI',\n              autoIncrement: Object.prototype.hasOwnProperty.call(_result, 'Extra') && _result.Extra.toLowerCase() === 'auto_increment',\n              comment: _result.Comment ? _result.Comment : null\n            };\n          }\n        } catch (err) {\n          _iterator.e(err);\n        } finally {\n          _iterator.f();\n        }\n\n        return result;\n      }\n\n      if (this.isVersionQuery()) {\n        return data[0].version;\n      }\n\n      return result;\n    }\n  }, {\n    key: \"handleJsonSelectQuery\",\n    value: function handleJsonSelectQuery(rows) {\n      var _this = this;\n\n      if (!this.model || !this.model.fieldRawAttributesMap) {\n        return;\n      }\n\n      var _loop = function _loop() {\n        var _field = _Object$keys[_i];\n        var modelField = _this.model.fieldRawAttributesMap[_field];\n\n        if (modelField.type instanceof DataTypes.JSON) {\n          //value is return as String, no JSON\n          rows = rows.map(function (row) {\n            row[modelField.fieldName] = row[modelField.fieldName] ? JSON.parse(row[modelField.fieldName]) : null;\n\n            if (DataTypes.JSON.parse) {\n              return DataTypes.JSON.parse(modelField, _this.sequelize.options, row[modelField.fieldName]);\n            }\n\n            return row;\n          });\n        }\n      };\n\n      for (var _i = 0, _Object$keys = Object.keys(this.model.fieldRawAttributesMap); _i < _Object$keys.length; _i++) {\n        _loop();\n      }\n    }\n  }, {\n    key: \"logWarnings\",\n    value: function () {\n      var _logWarnings = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(results) {\n        var warningResults, warningMessage, messages, _iterator2, _step2, _warningRow, _iterator3, _step3, _warningResult, _iterator4, _step4, _objectKey;\n\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                _context2.next = 2;\n                return this.run('SHOW WARNINGS');\n\n              case 2:\n                warningResults = _context2.sent;\n                warningMessage = \"MariaDB Warnings (\".concat(this.connection.uuid || 'default', \"): \");\n                messages = [];\n                _iterator2 = _createForOfIteratorHelper(warningResults);\n                _context2.prev = 6;\n\n                _iterator2.s();\n\n              case 8:\n                if ((_step2 = _iterator2.n()).done) {\n                  _context2.next = 16;\n                  break;\n                }\n\n                _warningRow = _step2.value;\n\n                if (!(_warningRow === undefined || typeof _warningRow[Symbol.iterator] !== 'function')) {\n                  _context2.next = 12;\n                  break;\n                }\n\n                return _context2.abrupt(\"continue\", 14);\n\n              case 12:\n                _iterator3 = _createForOfIteratorHelper(_warningRow);\n\n                try {\n                  for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {\n                    _warningResult = _step3.value;\n\n                    if (Object.prototype.hasOwnProperty.call(_warningResult, 'Message')) {\n                      messages.push(_warningResult.Message);\n                    } else {\n                      _iterator4 = _createForOfIteratorHelper(_warningResult.keys());\n\n                      try {\n                        for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {\n                          _objectKey = _step4.value;\n                          messages.push([_objectKey, _warningResult[_objectKey]].join(': '));\n                        }\n                      } catch (err) {\n                        _iterator4.e(err);\n                      } finally {\n                        _iterator4.f();\n                      }\n                    }\n                  }\n                } catch (err) {\n                  _iterator3.e(err);\n                } finally {\n                  _iterator3.f();\n                }\n\n              case 14:\n                _context2.next = 8;\n                break;\n\n              case 16:\n                _context2.next = 21;\n                break;\n\n              case 18:\n                _context2.prev = 18;\n                _context2.t0 = _context2[\"catch\"](6);\n\n                _iterator2.e(_context2.t0);\n\n              case 21:\n                _context2.prev = 21;\n\n                _iterator2.f();\n\n                return _context2.finish(21);\n\n              case 24:\n                this.sequelize.log(warningMessage + messages.join('; '), this.options);\n                return _context2.abrupt(\"return\", results);\n\n              case 26:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this, [[6, 18, 21, 24]]);\n      }));\n\n      function logWarnings(_x3) {\n        return _logWarnings.apply(this, arguments);\n      }\n\n      return logWarnings;\n    }()\n  }, {\n    key: \"formatError\",\n    value: function formatError(err) {\n      var _this2 = this;\n\n      switch (err.errno) {\n        case ER_DUP_ENTRY:\n          {\n            var match = err.message.match(/Duplicate entry '([\\s\\S]*)' for key '?((.|\\s)*?)'?\\s.*$/);\n            var fields = {};\n            var message = 'Validation error';\n            var values = match ? match[1].split('-') : undefined;\n            var fieldKey = match ? match[2] : undefined;\n            var fieldVal = match ? match[1] : undefined;\n            var uniqueKey = this.model && this.model.uniqueKeys[fieldKey];\n\n            if (uniqueKey) {\n              if (uniqueKey.msg) {\n                message = uniqueKey.msg;\n              }\n\n              fields = _.zipObject(uniqueKey.fields, values);\n            } else {\n              fields[fieldKey] = fieldVal;\n            }\n\n            var errors = [];\n\n            _.forOwn(fields, function (value, field) {\n              errors.push(new sequelizeErrors.ValidationErrorItem(_this2.getUniqueConstraintErrorMessage(field), 'unique violation', // sequelizeErrors.ValidationErrorItem.Origins.DB,\n              field, value, _this2.instance, 'not_unique'));\n            });\n\n            return new sequelizeErrors.UniqueConstraintError({\n              message: message,\n              errors: errors,\n              parent: err,\n              fields: fields\n            });\n          }\n\n        case ER_ROW_IS_REFERENCED:\n        case ER_NO_REFERENCED_ROW:\n          {\n            // e.g. CONSTRAINT `example_constraint_name` FOREIGN KEY (`example_id`) REFERENCES `examples` (`id`)\n            var _match = err.message.match(/CONSTRAINT ([`\"])(.*)\\1 FOREIGN KEY \\(\\1(.*)\\1\\) REFERENCES \\1(.*)\\1 \\(\\1(.*)\\1\\)/);\n\n            var quoteChar = _match ? _match[1] : '`';\n\n            var _fields = _match ? _match[3].split(new RegExp(\"\".concat(quoteChar, \", *\").concat(quoteChar))) : undefined;\n\n            return new sequelizeErrors.ForeignKeyConstraintError({\n              reltype: err.errno === 1451 ? 'parent' : 'child',\n              table: _match ? _match[4] : undefined,\n              fields: _fields,\n              value: _fields && _fields.length && this.instance && this.instance[_fields[0]] || undefined,\n              index: _match ? _match[2] : undefined,\n              parent: err\n            });\n          }\n\n        default:\n          return new sequelizeErrors.DatabaseError(err);\n      }\n    }\n  }, {\n    key: \"handleShowTablesQuery\",\n    value: function handleShowTablesQuery(results) {\n      return results.map(function (resultSet) {\n        return {\n          tableName: resultSet.TABLE_NAME,\n          schema: resultSet.TABLE_SCHEMA\n        };\n      });\n    }\n  }, {\n    key: \"handleShowIndexesQuery\",\n    value: function handleShowIndexesQuery(data) {\n      var currItem;\n      var result = [];\n      data.forEach(function (item) {\n        if (!currItem || currItem.name !== item.Key_name) {\n          currItem = {\n            primary: item.Key_name === 'PRIMARY',\n            fields: [],\n            name: item.Key_name,\n            tableName: item.Table,\n            unique: item.Non_unique !== 1,\n            type: item.Index_type\n          };\n          result.push(currItem);\n        }\n\n        currItem.fields[item.Seq_in_index - 1] = {\n          attribute: item.Column_name,\n          length: item.Sub_part || undefined,\n          order: item.Collation === 'A' ? 'ASC' : undefined\n        };\n      });\n      return result;\n    }\n  }], [{\n    key: \"formatBindParameters\",\n    value: function formatBindParameters(sql, values, dialect) {\n      var bindParam = [];\n\n      var replacementFunc = function replacementFunc(match, key, val) {\n        if (val[key] !== undefined) {\n          bindParam.push(val[key]);\n          return '?';\n        }\n\n        return undefined;\n      };\n\n      sql = AbstractQuery.formatBindParameters(sql, values, dialect, replacementFunc)[0];\n      return [sql, bindParam.length > 0 ? bindParam : undefined];\n    }\n  }]);\n\n  return Query;\n}(AbstractQuery);\n\nmodule.exports = Query;","map":null,"metadata":{},"sourceType":"script"}