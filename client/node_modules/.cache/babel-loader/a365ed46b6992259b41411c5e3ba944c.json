{"ast":null,"code":"'use strict';\n\nvar _classCallCheck = require(\"/Users/jervisbay/project-tres/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/Users/jervisbay/project-tres/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\n\nvar _possibleConstructorReturn = require(\"/Users/jervisbay/project-tres/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/possibleConstructorReturn\");\n\nvar _getPrototypeOf = require(\"/Users/jervisbay/project-tres/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/getPrototypeOf\");\n\nvar _inherits = require(\"/Users/jervisbay/project-tres/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/inherits\");\n\nvar _assertThisInitialized = require(\"/Users/jervisbay/project-tres/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/assertThisInitialized\");\n\nvar net = require('net');\n\nvar EventEmitter = require('events').EventEmitter;\n\nvar Connection = require('./connection');\n\nvar ConnectionConfig = require('./connection_config'); // TODO: inherit Server from net.Server\n\n\nvar Server = /*#__PURE__*/function (_EventEmitter) {\n  _inherits(Server, _EventEmitter);\n\n  function Server() {\n    var _this;\n\n    _classCallCheck(this, Server);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Server).call(this));\n    _this.connections = [];\n    _this._server = net.createServer(_this._handleConnection.bind(_assertThisInitialized(_assertThisInitialized(_this))));\n    return _this;\n  }\n\n  _createClass(Server, [{\n    key: \"_handleConnection\",\n    value: function _handleConnection(socket) {\n      var connectionConfig = new ConnectionConfig({\n        stream: socket,\n        isServer: true\n      });\n      var connection = new Connection({\n        config: connectionConfig\n      });\n      this.emit('connection', connection);\n    }\n  }, {\n    key: \"listen\",\n    value: function listen(port) {\n      this._port = port;\n\n      this._server.listen.apply(this._server, arguments);\n\n      return this;\n    }\n  }, {\n    key: \"close\",\n    value: function close(cb) {\n      this._server.close(cb);\n    }\n  }]);\n\n  return Server;\n}(EventEmitter);\n\nmodule.exports = Server;","map":null,"metadata":{},"sourceType":"script"}