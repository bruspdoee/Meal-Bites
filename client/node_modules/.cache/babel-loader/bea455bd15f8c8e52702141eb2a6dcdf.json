{"ast":null,"code":"'use strict';\n\nvar LRU = require('lru-cache');\n\nvar parserCache = new LRU({\n  max: 15000\n});\n\nfunction keyFromFields(type, fields, options, config) {\n  var res = \"\".concat(type) + \"/\".concat(typeof options.nestTables) + \"/\".concat(options.nestTables) + \"/\".concat(options.rowsAsArray) + \"/\".concat(options.supportBigNumbers || config.supportBigNumbers) + \"/\".concat(options.bigNumberStrings || config.bigNumberStrings) + \"/\".concat(typeof options.typeCast) + \"/\".concat(options.timezone || config.timezone) + \"/\".concat(options.decimalNumbers) + \"/\".concat(options.dateStrings);\n\n  for (var i = 0; i < fields.length; ++i) {\n    var field = fields[i];\n    res += \"/\".concat(field.name, \":\").concat(field.columnType, \":\").concat(field.flags, \":\").concat(field.characterSet);\n  }\n\n  return res;\n}\n\nfunction getParser(type, fields, options, config, compiler) {\n  var key = keyFromFields(type, fields, options, config);\n  var parser = parserCache.get(key);\n\n  if (parser) {\n    return parser;\n  }\n\n  parser = compiler(fields, options, config);\n  parserCache.set(key, parser);\n  return parser;\n}\n\nfunction setMaxCache(max) {\n  parserCache.max = max;\n}\n\nfunction clearCache() {\n  parserCache.reset();\n}\n\nmodule.exports = {\n  getParser: getParser,\n  setMaxCache: setMaxCache,\n  clearCache: clearCache\n};","map":null,"metadata":{},"sourceType":"script"}