{"ast":null,"code":"'use strict';\n\nvar _toConsumableArray = require(\"/Users/jervisbay/project-tres/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/toConsumableArray\");\n\nfunction _createForOfIteratorHelper(o, allowArrayLike) { var it; if (typeof Symbol === \"undefined\" || o[Symbol.iterator] == null) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = o[Symbol.iterator](); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nfunction checkNamingCollision(association) {\n  if (Object.prototype.hasOwnProperty.call(association.source.rawAttributes, association.as)) {\n    throw new Error(\"Naming collision between attribute '\".concat(association.as, \"'\") + \" and association '\".concat(association.as, \"' on model \").concat(association.source.name) + '. To remedy this, change either foreignKey or as in your association definition');\n  }\n}\n\nexports.checkNamingCollision = checkNamingCollision;\n\nfunction addForeignKeyConstraints(newAttribute, source, target, options, key) {\n  // FK constraints are opt-in: users must either set `foreignKeyConstraints`\n  // on the association, or request an `onDelete` or `onUpdate` behavior\n  if (options.foreignKeyConstraint || options.onDelete || options.onUpdate) {\n    // Find primary keys: composite keys not supported with this approach\n    var primaryKeys = Object.keys(source.primaryKeys).map(function (primaryKeyAttribute) {\n      return source.rawAttributes[primaryKeyAttribute].field || primaryKeyAttribute;\n    });\n\n    if (primaryKeys.length === 1 || !primaryKeys.includes(key)) {\n      if (source._schema) {\n        newAttribute.references = {\n          model: source.sequelize.getQueryInterface().QueryGenerator.addSchema({\n            tableName: source.tableName,\n            _schema: source._schema,\n            _schemaDelimiter: source._schemaDelimiter\n          })\n        };\n      } else {\n        newAttribute.references = {\n          model: source.tableName\n        };\n      }\n\n      newAttribute.references.key = key || primaryKeys[0];\n      newAttribute.onDelete = options.onDelete;\n      newAttribute.onUpdate = options.onUpdate;\n    }\n  }\n}\n\nexports.addForeignKeyConstraints = addForeignKeyConstraints;\n/**\n * Mixin (inject) association methods to model prototype\n *\n * @private\n *\n * @param {Object} association instance\n * @param {Object} obj Model prototype\n * @param {Array} methods Method names to inject\n * @param {Object} aliases Mapping between model and association method names\n *\n */\n\nfunction mixinMethods(association, obj, methods, aliases) {\n  aliases = aliases || {};\n\n  var _iterator = _createForOfIteratorHelper(methods),\n      _step;\n\n  try {\n    for (_iterator.s(); !(_step = _iterator.n()).done;) {\n      var method = _step.value;\n\n      // don't override custom methods\n      if (!Object.prototype.hasOwnProperty.call(obj, association.accessors[method])) {\n        (function () {\n          var realMethod = aliases[method] || method;\n\n          obj[association.accessors[method]] = function () {\n            return association[realMethod].apply(association, [this].concat(_toConsumableArray(Array.from(arguments))));\n          };\n        })();\n      }\n    }\n  } catch (err) {\n    _iterator.e(err);\n  } finally {\n    _iterator.f();\n  }\n}\n\nexports.mixinMethods = mixinMethods;","map":null,"metadata":{},"sourceType":"script"}