{"ast":null,"code":"var _jsxFileName = \"/Users/jervisbay/project-tres/client/src/components/GoogleMapTest/Map.js\",\n    _this = this;\n\nimport React from \"react\";\nimport { withGoogleMap, GoogleMap, withScriptjs, Marker, InfoWindow } from \"react-google-maps\";\nimport { compose, withProps, withStateHandlers } from \"recompose\";\nvar MapWithPlaces = compose(withProps({\n  googleMapURL: \"https://maps.googleapis.com/maps/api/js?key=&libraries=geometry,drawing,places\",\n  loadingElement: /*#__PURE__*/React.createElement(\"div\", {\n    style: {\n      height: \"100%\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 15,\n      columnNumber: 21\n    }\n  }),\n  containerElement: /*#__PURE__*/React.createElement(\"div\", {\n    style: {\n      height: \"100vh\",\n      width: \"100%\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 16,\n      columnNumber: 23\n    }\n  }),\n  mapElement: /*#__PURE__*/React.createElement(\"div\", {\n    style: {\n      height: \"100%\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 17,\n      columnNumber: 17\n    }\n  })\n}), withStateHandlers(function (props) {\n  return {\n    infoWindows: props.places.map(function (p) {\n      return {\n        isOpen: false\n      };\n    })\n  };\n}, {\n  onToggleOpen: function onToggleOpen(_ref) {\n    var infoWindows = _ref.infoWindows;\n    return function (selectedIndex) {\n      return {\n        infoWindows: infoWindows.map(function (iw, i) {\n          iw.isOpen = selectedIndex === i;\n          return iw;\n        })\n      };\n    };\n  }\n}), withScriptjs, withGoogleMap)(function (props) {\n  return /*#__PURE__*/React.createElement(GoogleMap, {\n    defaultZoom: props.zoom,\n    defaultCenter: props.center,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 3\n    }\n  }, props.places && props.places.map(function (place, i) {\n    var lat = parseFloat(place.latitude, 10);\n    var lng = parseFloat(place.longitude, 10);\n    return /*#__PURE__*/React.createElement(Marker, {\n      id: place.id,\n      key: place.id,\n      position: {\n        lat: lat,\n        lng: lng\n      },\n      title: \"Click to zoom\",\n      onClick: props.onToggleOpen.bind(_this, i),\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 11\n      }\n    }, props.infoWindows[i].isOpen && /*#__PURE__*/React.createElement(InfoWindow, {\n      onCloseClick: props.onToggleOpen.bind(i),\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 15\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 17\n      }\n    }, place.name)));\n  }));\n});\nexport default MapWithPlaces;","map":{"version":3,"sources":["/Users/jervisbay/project-tres/client/src/components/GoogleMapTest/Map.js"],"names":["React","withGoogleMap","GoogleMap","withScriptjs","Marker","InfoWindow","compose","withProps","withStateHandlers","MapWithPlaces","googleMapURL","loadingElement","height","containerElement","width","mapElement","props","infoWindows","places","map","p","isOpen","onToggleOpen","selectedIndex","iw","i","zoom","center","place","lat","parseFloat","latitude","lng","longitude","id","bind","name"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport {\n  withGoogleMap,\n  GoogleMap,\n  withScriptjs,\n  Marker,\n  InfoWindow\n} from \"react-google-maps\";\nimport { compose, withProps, withStateHandlers } from \"recompose\";\n\nconst MapWithPlaces = compose(\n  withProps({\n    googleMapURL:\n      \"https://maps.googleapis.com/maps/api/js?key=&libraries=geometry,drawing,places\",\n    loadingElement: <div style={{ height: `100%` }} />,\n    containerElement: <div style={{ height: \"100vh\", width: \"100%\" }} />,\n    mapElement: <div style={{ height: \"100%\" }} />\n  }),\n  withStateHandlers(\n    props => ({\n      infoWindows: props.places.map(p => {\n        return { isOpen: false };\n      })\n    }),\n    {\n      onToggleOpen: ({ infoWindows }) => selectedIndex => ({\n        infoWindows: infoWindows.map((iw, i) => {\n          iw.isOpen = selectedIndex === i;\n          return iw;\n        })\n      })\n    }\n  ),\n  withScriptjs,\n  withGoogleMap\n)(props => (\n  <GoogleMap defaultZoom={props.zoom} defaultCenter={props.center}>\n    {props.places &&\n      props.places.map((place, i) => {\n        let lat = parseFloat(place.latitude, 10);\n        let lng = parseFloat(place.longitude, 10);\n\n        return (\n          <Marker\n            id={place.id}\n            key={place.id}\n            position={{ lat: lat, lng: lng }}\n            title=\"Click to zoom\"\n            onClick={props.onToggleOpen.bind(this, i)}\n          >\n            {props.infoWindows[i].isOpen && (\n              <InfoWindow onCloseClick={props.onToggleOpen.bind(i)}>\n                <div>{place.name}</div>\n              </InfoWindow>\n            )}\n          </Marker>\n        );\n      })}\n  </GoogleMap>\n));\n\nexport default MapWithPlaces;\n"]},"metadata":{},"sourceType":"module"}